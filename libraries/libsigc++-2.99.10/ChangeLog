2018-01-10  Murray Cumming  <murrayc@murrayc.com>

	2.99.10

2017-11-09  Kjell Ahlstedt  <kjellahlstedt@gmail.com>

	slot_base::set_parent(): Create a dummy slot_rep if necessary

	set_parent() must always store the supplied parent pointer and cleanup
	function pointer, or else there may be a memory leak. The pointers are
	stored in slot_rep. Bug 167714

2017-11-09  Kjell Ahlstedt  <kjellahlstedt@gmail.com>

	visit_each.h: Add an #include

2017-08-07  Murray Cumming  <murrayc@murrayc.com>

	2.99.9

2017-07-21  Murray Cumming  <murrayc@murrayc.com>

	Tests: Add comments by uses after move.

	Because we really do want to test this.
	We do not explicitly promise that it's safe to use moved-from libsigc++
	objects, but we choose to make it safe.

2017-07-21  Murray Cumming  <murrayc@murrayc.com>

	signal_impl_exec_holder: Make a constructor explicit.

	Because it has only one parameter.
	Noticed by clang-tidy.

2017-07-21  Murray Cumming  <murrayc@murrayc.com>

	trackable: Use emplace_back() instead of push_back().

	Found by clang-tidy.

2017-07-21  Murray Cumming  <murrayc@murrayc.com>

	slot_base: Destructor: No need for null check before delete.

	Found by clang-tidy.

2017-07-21  Murray Cumming  <murrayc@murrayc.com>

	signal.h: Correct some strange comment formatting.

2017-07-21  Murray Cumming  <murrayc@murrayc.com>

	trackable: Make move operations noexcept.

	I don't think there is any reason not to.
	Noticed by clang-tidy.

2017-07-21  Murray Cumming  <murrayc@murrayc.com>

	weak_raw_ptr: Minor use of auto

	Noticed by clang-tidy.

2017-07-21  Murray Cumming  <murrayc@murrayc.com>

	trackable: Don't bother checking for null before using delete.

	Because deleting null is allowed.
	Noticed by clang-tidy.

2017-07-21  Murray Cumming  <murrayc@murrayc.com>

	track_obj_functor: Make the constructor explicit.

	Because it can take just one argument.
	Noticed by clang-tidy.

2017-07-21  Murray Cumming  <murrayc@murrayc.com>

	tests: Initialize a member variable.

	Noticed by clang-tidy.

2017-07-21  Murray Cumming  <murrayc@murrayc.com>

	tests: Some use of auto.

	Noticed by clang-tidy.

2017-07-21  Murray Cumming  <murrayc@murrayc.com>

	tests: Make some casts explicit.

	Noticed by clang-tidy.

2017-07-21  Murray Cumming  <murrayc@murrayc.com>

	tests: Include cstring instead of string.h

	Noticed by clang-tidy.

2017-07-17  Kjell Ahlstedt  <kjellahlstedt@gmail.com>

	Update method names in comments

	Some method names have changed from libsigc++2 to libsigc++3, but not all
	comments have been changed accordingly.

	* sigc++/connection.h: Correct some parameter names in doxygen comments.
	connection::notify() has been replaced by a private method in weak_raw_ptr.
	* sigc++/signal_base.[cc|h]: signal_impl::notify() has been renamed
	notify_self_and_iter_of_invalidated_slot().

2017-07-17  Kjell Ahlstedt  <kjellahlstedt@gmail.com>

	Remove signal_base::erase() and signal_impl::erase()

	They are not used in libsigc++3. Bug 784550

2017-07-17  Kjell Ahlstedt  <kjellahlstedt@gmail.com>

	test_signal: Test calls to signal_base::clear()

	Call it both during signal emission and otherwise. Bug 784550

2017-07-17  Kjell Ahlstedt  <kjellahlstedt@gmail.com>

	signal_impl::clear(): Don't clear the slot list during signal emission

	If signal_impl::clear() is called during signal emission, don't call
	slots_.clear(). Let signal_impl::sweep() erase all slots after the signal
	emission. Bug 784550

2017-04-18  Murray Cumming  <murrayc@murrayc.com>

	tests: Implement a function.

	We don't actually call the function, but it avoids an inspection
	warning from Jetbrains CLion, and doesn't seem unreasonable.

2017-04-18  Murray Cumming  <murrayc@murrayc.com>

	tests: Remove unnecessary includes.

	Found by Jetbrains CLion.

2017-03-16  Chun-wei Fan  <fanchunwei@src.gnome.org>

	MSVC_Net2017/filelist.am: Fix listing

	The test_functor_trait project was removed, so it ought to be removed from
	MSVC_Net2017/filelist.am as well.

2017-03-14  Chun-wei Fan  <fanchunwei@src.gnome.org>

	Visual Studio builds: Update "install"

	Numerous headers have been added or deleted during the development phase
	of 3.0, so make sure we are copying the right items.

2017-03-14  Chun-wei Fan  <fanchunwei@src.gnome.org>

	Visual Studio builds: Rename libsigc++2 projects to libsigc++3

	This makes it clearer to people that this is 3.x-to-be, not 2.x.

2017-02-14  Murray Cumming  <murrayc@murrayc.com>

	2.99.8

2017-02-13  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	slot_rep: Fix the notify_slot_rep_invalidated() name in comments

	slot_rep::notify() has been renamed to notify_slot_rep_invalidated(),
	but the name was not updated in all comments.

2017-02-13  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	slot_rep: Rename dup() to clone()

	because clone() is the usual name of such a function. Bug 777618

2017-02-13  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	slot_rep: Make destructor, destroy() and dup() virtual

	* sigc++/functors/slot_base.h:
	* sigc++/functors/slot.h: Make ~slot_rep(), slot_rep::destroy() and
	slot_rep::dup() virtual. Bug 777618

2016-12-19  Chun-wei Fan  <fanchunwei@src.gnome.org>

	Visual Studio builds: Rename MSVC_Net2013 to MSVC_Net2017

	Since libsigc++-3.0 will require Visual Studio 2017 to build,
	we ought to rename MSVC_Net2013 to MSVC_Net2017 so that it is clear to people,
	and let them know that it is the case in README.

2016-12-11  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Add tests/memleakcheck.sh

	This shell script runs the test cases with valgrind, searching for
	memory leaks. Bug 775871

2016-12-11  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	signal_impl: Use std::weak_ptr<signal_impl> in connected slots

	A signal_impl object shall not store std::shared_ptr to itself via connected
	slots. It results in memory leaks. Use std::weak_ptr in the self_and_iter
	struct. Bug 775871

2016-12-08  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	signal_impl::clear(): Really avoid erasing the slots prematurely

	The call signal_impl_exec_holder(this) creates a signal_impl_exec_holder
	which is immediately destroyed. It does not stop signal_impl::notify() from
	erasing the slots. Create a signal_impl_exec_holder that exists until the
	end of clear().

2016-12-05  Chun-wei Fan  <fanchunwei@src.gnome.org>

	Visual Studio builds: Use Visual Studio 2017.

	libsigc++-3.x requires C++-14 features which are only adequately supported
	on Visual Studio 2017, so update the project settings to Visual Studio
	2017.

	Note that the 2017 CRT still makes use of the 2015 CRT as they aim to be
	compatiable with each other.

2016-11-23  Murray Cumming  <murrayc@murrayc.com>

	tests: Catch exceptions by const ref.

	Noticed by cppcheck.

2016-11-20  Christophe Lermytte  <gentoo@lermytte.be>

	Make --disable-benchmark work

	Currently, when calling ./configure, the possible outcomes of the
	enable_benchmark variable are:

	./configure                          -> ""
	./configure --enable-benchmark       -> "yes"
	./configure --enable-benchmark=yes   -> "yes"
	./configure --enable-benchmark=no    -> "yes"
	./configure --enable-benchmark=hello -> "yes"
	./configure --disable-benchmark      -> "yes"

	With this commit, those values become

	./configure                          -> ""
	./configure --enable-benchmark       -> "yes"
	./configure --enable-benchmark=yes   -> "yes"
	./configure --enable-benchmark=no    -> "no"
	./configure --enable-benchmark=hello -> "hello"
	./configure --disable-benchmark      -> "no"

	Note that enable_benchmark is currently only being checked for
	being "yes" or not.

	Bug #774732

2016-07-28  Murray Cumming  <murrayc@murrayc.com>

	slot_rep::dup(): Remove an unnecessary static_cast.

	Found by CLion's code inspection.

2016-07-18  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Build: Fix silent builds

	* configure.ac: Pass yes to AM_SILENT_RULES, thus enabling silent builds.
	Require mm-common 0.9.10 (not necessary for silent builds, but necessary when
	MM_AX_CXX_COMPILE_STDCXX is used).
	* docs/reference/Doxyfile.in: Set QUIET=YES.
	Update for doxygen 1.8.11 (not necessary for silent builds).
	Bug #768797

2016-07-06  Murray Cumming  <murrayc@murrayc.com>

	Correct a comment.

2016-06-27  Murray Cumming  <murrayc@murrayc.com>

	2.99.7

2016-05-16  Murray Cumming  <murrayc@murrayc.com>

	Remove trailing whitespace.

2016-05-02  Murray Cumming  <murrayc@murrayc.com>

	slot_base: Use weak_raw_ptr instead of destroy_notify_struct.

	This seems cleaner.

2016-05-02  Murray Cumming  <murrayc@murrayc.com>

	connection: Use weak_raw_ptr for slot_base.

	Instead of connection deriving from notifiable and setting/unsetting
	its own notification callbacks. This simplifies the code.

2016-05-02  Murray Cumming  <murrayc@murrayc.com>

	Added sigc::internal::weak_raw_ptr<>.

	As a simpler way to null a pointer to an object when that object
	is deleted.

2016-04-29  Murray Cumming  <murrayc@murrayc.com>

	connection: Update the documentation.

	This no longer needs to (or can be) created from an iterator.

2016-04-29  Murray Cumming  <murrayc@murrayc.com>

	Docs: Fix some minor typos.

2016-04-29  Murray Cumming  <murrayc@murrayc.com>

	Docs: Fix invokation->invocation typos.

2016-04-28  Murray Cumming  <murrayc@murrayc.com>

	signal_base: Remove unnecessary trackable.h include.

2016-04-28  Murray Cumming  <murrayc@murrayc.com>

	signal_base: Do not derive from trackable.

	Because we don't seem to actually use the trackable API when using
	these objects. There was a call to notify_callbacks(), but that
	cannot have done anything, because nothing registers any callbacks
	with the base trackable, and now cannot possibly register any
	callbacks, because it's no longer a trackable.

2016-04-28  Murray Cumming  <murrayc@murrayc.com>

	slot_rep: Pass a slot_rep*, not notifiable*, to destroy().

	To make it clearer exactly what callback signature is expected,
	and what the type of the data is.

2016-04-28  Murray Cumming  <murrayc@murrayc.com>

	signal_impl: Doesn't need to derive from notifiable.

2016-04-27  Murray Cumming  <murrayc@murrayc.com>

	2.99.6

2016-04-27  Murray Cumming  <murrayc@murrayc.com>

	copy operations: Name all parameters src.

	To make it more obvious that these are copy operations.

2016-04-24  Murray Cumming  <murrayc@murrayc.com>

	signal_impl_holder: Split into this and signal_exec_holder.

	And use just signal_exec_holder in signal_impl::clear(),
	instead of trying to take create a shared_ptr to this while
	this is being destroyed.

	Bug #764935

2016-04-24  Murray Cumming  <murrayc@murrayc.com>

	signal_exec: Rename to signal_exec_holder.

	Because that's what it does. It doesn't execute anything.

2016-04-23  Murray Cumming  <murrayc@murrayc.com>

	signal_impl: Trying to do the ref-counting with std::shared_ptr.

	Bug #764935

2016-04-22  Marcin Kolny  <marcin.kolny@gmail.com>

	slot: use pointer for functor_ member

	Using pointer instead of value allows us to avoid calling
	destructor of functor_ directly in destroy()

2016-04-22  Murray Cumming  <murrayc@murrayc.com>

	test_disconnect: Add comment to explain potential leak.

	Because clang-tidy incorrectly (but understandably) complains about this.

2016-04-22  Murray Cumming  <murrayc@murrayc.com>

	tests: Make single argument constructors explicit.

	Found by the google-explicit-constructor clang-tidy check.

2016-04-22  Murray Cumming  <murrayc@murrayc.com>

	limit_refernce: =default copy/move operations.

	Because we really use at least the default copy constructor,
	so this makes that clearer.

2016-04-22  Murray Cumming  <murrayc@murrayc.com>

	limit_reference: Make constructor explicit.

2016-04-22  Murray Cumming  <murrayc@murrayc.com>

	Connection: Constructor: Take slot_base as reference.

	This constructor existed before, so this avoids an API break.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	signal_emit: Make constructor explicit.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	temp_slot_list: Make constructor explicit.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	typed_slot_rep: Make constructor explicit.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	test_size: Add comments with the results, so we can notice changes.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	slot_rep: Rename notify() for clarity.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	signal_impl: Rename notify_self_and_iter_invalidated().

	To notify_self_and_iter_of_invalidated_slot(), to make it clear both
	what is being notified, and what is being invalidated.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	test_accum_iter: Use of decltype(auto).

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	Use temp_slot_list as const.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	Fixed missing newline in doxygen comment.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	signal_emit: Make a_ private.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	signal_emit: Remove some public type aliases.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	connection: Rename notify() for clarity.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	connection: Make notify() private.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	connection: Take the slot_base directly, without the intermediate slot_iterator.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	signal::connect(): Return a sigc::connection.

	Instead of an iterator aliases to a signal<>::connection.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	slot_list: Remove this now-unused class.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	Remove unused const_*_iterator.

	And the unused slot_list methods that use it.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	signal: Remove public emitter_type alias.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	signal: Rename iterator to connection.

	It is still actually an iterator, but we can change that later.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	Remove now-unused slot_reverse_iterator_buf.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	signal: Remove slots().

	Because it does not seem useful.
	Also remove the unused extra iterator types and the const slot().

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	signal: Remove emit_reverse().

	It is not used in any tests or examples. Let's see if anybody actually
	uses it.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	signal: connect(), insert(): Remove unnecessary static_cast<>s.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	signal_base::insert(): Add and use help method to avoid copy/pasting.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	signal_base: Rename notify() to notify_self_and_iter().

	To make it clearer that this is only ever called for self_and_iter.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	signal_base: Make notify() private.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	signal_impl::insert(): Rename a variable for clarity.

2016-04-21  Murray Cumming  <murrayc@murrayc.com>

	slot_rep: Add and use unset_parent().

	Because that is slightly clearer.

2016-04-20  Murray Cumming  <murrayc@murrayc.com>

	Update tests/.gitignore

2016-04-20  Murray Cumming  <murrayc@murrayc.com>

	benchmark: Use boost::timer instead of Glib::Timer.

	And optionally build it, when --enable-benchmark is passed to configure.

2016-04-20  Murray Cumming  <murrayc@murrayc.com>

	benchmark: Use the newer syntax.

2016-04-20  Murray Cumming  <murrayc@murrayc.com>

	benchmark: Increase count.

2016-04-20  Murray Cumming  <murrayc@murrayc.com>

	benchmark: Make the 1000 a constant, so we can change it.

2016-04-20  Murray Cumming  <murrayc@murrayc.com>

	benchmark: Rearrange.

2016-04-20  Murray Cumming  <murrayc@murrayc.com>

	benchmark: Add copyright header.

2016-04-20  Murray Cumming  <murrayc@murrayc.com>

	benchmark: Update for the newer libsigc++ API.

2016-04-20  Murray Cumming  <murrayc@murrayc.com>

	Add original benchmark code.

	From 2003 here:
	https://mail.gnome.org/archives/libsigc-list/2003-October/msg00005.html

2016-04-20  Murray Cumming  <murrayc@murrayc.com>

	Correct some doxygen comments for variadic parameters.

	These showed up as errors in doxygen.log.

2016-04-20  Murray Cumming  <murrayc@murrayc.com>

	Correct a doxygen comment.

2016-04-20  Murray Cumming  <murrayc@murrayc.com>

	Remove another unecessary c++ marker comment.

2016-04-20  Murray Cumming  <murrayc@murrayc.com>

	Added missing copyright headers.

	These files might be older than 2003, but that's all I see in our
	git respository (imported from the old svn repository, which probably
	lost some history once).

2016-04-20  Murray Cumming  <murrayc@murrayc.com>

	tests: Move copyright headers to top.

2016-04-20  Murray Cumming  <murrayc@murrayc.com>

	Remove unnecessary -*- c++ - *-* comments.

2016-04-20  Murray Cumming  <murrayc@murrayc.com>

	tests: Add missing copyright headers.

2016-04-20  Murray Cumming  <murrayc@murrayc.com>

	Update copyright years.

2016-04-19  Murray Cumming  <murrayc@murrayc.com>

	tuple_transform_each: Don't use typename for a template template parameter.

2016-04-19  Murray Cumming  <murrayc@murrayc.com>

	Revert "concepts: bind: Use the origin::Copy_constructible C++ concept."

	This reverts commit 66cee4dd3c0595ee62b446afafb5bbbfdcd36eca.

	I didn't mean to push this to master.

2016-04-19  Murray Cumming  <murrayc@murrayc.com>

	signal: Rename list_ to sig_impl_.

	Because that's what it is.
	And avoid the need for a __ prefix on the input parameter.

2016-04-19  Murray Cumming  <murrayc@murrayc.com>

	signal: Remove __ prefix on tmp variables.

	Leading underscores are reserved in C++.

2016-04-19  Murray Cumming  <murrayc@murrayc.com>

	Remove _A_ prefixes from method arguments.

	Leading underscores are reserved in C++, and the A is just odd.

2016-04-19  Murray Cumming  <murrayc@murrayc.com>

	Header guards: Remove leading underscores (and trailing underscores).

	Names with leading underscores are reserved in C++.

2016-04-19  Murray Cumming  <murrayc@murrayc.com>

	Use typename instead of class for all template parameters.

	Apart from template template parameters, which must still be class
	according to the C++14 standard:
	http://stackoverflow.com/a/11311432/1123654
	though g++ and clang++ actually already supporting using typename
	instead by implementing N4051:
	http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4051.html

2016-04-19  Murray Cumming  <murrayc@murrayc.com>

	Revert "Always use typename rather than class for template types."

	This reverts commit 180353986d101e367c26b3199c44c7b2e4c1e681.

	Because I misread https://stackoverflow.com/questions/213121/use-class-or-typename-for-template-parameters
	class is _still_ needed for template template parameters in C++14,
	though g++ and clang++ seem to support it anyway.

2016-04-19  Murray Cumming  <murrayc@murrayc.com>

	Always use typename rather than class for template types.

	For consistency. As of C++14 class is not necessary even
	for template template parameters. We can change those few uses back
	to class if any (otherwise compliant-enough) compiler actually needs it.
	See http://stackoverflow.com/a/11311432/1123654

2016-04-18  Murray Cumming  <murrayc@murrayc.com>

	concepts: bind: Use the origin::Copy_constructible C++ concept.

2016-04-16  Murray Cumming  <murrayc@murrayc.com>

	Minor uses of auto.

2016-04-16  Murray Cumming  <murrayc@murrayc.com>

	Replace some reinterpret_cast<>s with static_casts<>.

	This is particularly unnecessary now that we have the notifiable
	base class.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	limit_trackable_target: =delete copy/move operations.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	Correct some comments.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	visit_each: Prototype trackable as struct, not class.

	clang++ rightly complains that it cannot be both a struct and a class.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	self_and_iter: Take the iterator by const ref and store it as const.

	This is less generically useful, but this isn't a generally used class.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	test_visit_each_type: Rename to test_visit_each_trackable.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	Update comment.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	limit_derived_target<T_Target>: Rename to limit_trackable_target<>.

	Because that is now how we always use it, and this makes things
	clearer by being less generic.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	Rename visit_each_type<T_Type>() to visit_each_trackable().

	Because that is how we always use it. Making it more generic obscures
	how it works and what it is for.
	We can revert, and improve this, if we ever need to handle more than
	one way to make a functor's arguments trackable.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	limit_derived_target(): Remove the specialization for pointer types.

	Now we always call visit_each_type() with trackable, not sometimes
	trackable*.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	Remove now-irrelevant comment.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	visit_each_type: More comments.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	Add a comment.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	signal_emit: Make call_type private and remove iterator_type.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	visit_each_type(): Add comment about how it is used.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	test_functor_trait: Rename to test_visit_each_type.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	Remove now-irrelevant comments.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	test_functor_trait: Rearange to make tests self-contained.

	I guess this should really be called test_visit_each_type.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	visit_each_type(): Remove unnecessary intermediate alias.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	Remove now-irrelevant comment.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	limit_derived_target: Add some comments.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	limit_derived_type: Move with_type and with_type_pointer into class.

	As private inner classes. This makes it clearer that they are only used
	there.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	with_type/with_type_pointer: Use is_base_of_or_same_v<> in declaration.

	Instead of in the instantiation. This makes the relationship between
	the two template types, and their specialiations, slightly clearer.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	slot_rep::notify(): Rearrange a comment.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	signal_exec: =delete copy and move operations.

2016-04-15  Murray Cumming  <murrayc@murrayc.com>

	slot_rep: Make =deleted operations public.

	It doesn't really make sense for these to be private.

2016-04-14  Murray Cumming  <murrayc@murrayc.com>

	2.99.5

2016-04-13  Murray Cumming  <murrayc@murrayc.com>

	limit_derived_target: Move T_Self aliases into methods where they are used.

2016-04-13  Murray Cumming  <murrayc@murrayc.com>

	adapts, typed_slot_rep: Make adaptor_type aliases private.

	They are used in public API, but that is legal C++.
	This way, we don't need to think that the public types are needed.

2016-04-13  Murray Cumming  <murrayc@murrayc.com>

	compose: Remove left-over adaptor_type.

2016-04-13  Murray Cumming  <murrayc@murrayc.com>

	compose: Remove unnecessary getter/setter aliases.

2016-04-13  Murray Cumming  <murrayc@murrayc.com>

	Remove unnecessary functor_base.

	It only existed as something to derive from to show that it had the
	result_type typedef.

2016-04-13  Murray Cumming  <murrayc@murrayc.com>

	signal: Remove result_type from emitters and accumulators.

2016-04-13  Murray Cumming  <murrayc@murrayc.com>

	signal: Remove most unused result_type aliases.

2016-04-13  Murray Cumming  <murrayc@murrayc.com>

	functor_type: Remove unused result_type.

2016-04-13  Murray Cumming  <murrayc@murrayc.com>

	Remove all remaining result_type aliases.

	They are not actually needed by anything.

2016-04-13  Murray Cumming  <murrayc@murrayc.com>

	adapts, adaptor_functor: Remove result_type.

	Instead just using functor_trait<T_Functor>::result_type wherever
	it would be used, because that is always the same thing.

2016-04-13  Murray Cumming  <murrayc@murrayc.com>

	adaptor_trait: Remove unnecessary result_type.

	It was only used in adapts<>, but that can just use functor_trait<>
	instead. This leaves adaptor_trait doing one simple job: Either
	giving us the original functor or giving us a functor (mem_functor
	or ptr_functor) to wrap a bare C function.

2016-04-13  Murray Cumming  <murrayc@murrayc.com>

	adpator_trait: Slight improvements to doxygen comments.

2016-04-13  Murray Cumming  <murrayc@murrayc.com>

	adaptor_trait.h: Move adapts<> into its own file.

	To make it clearer what is used by what.

2016-04-13  Murray Cumming  <murrayc@murrayc.com>

	adaptor_trait: Remove an apparently-unnecessary extra declaration for Doxygen.

2016-04-13  Murray Cumming  <murrayc@murrayc.com>

	exception_catch_functor: Remove unused adaptor_type.

2016-04-13  Murray Cumming  <murrayc@murrayc.com>

	Make unused adaptor_type aliases private.

2016-04-13  Murray Cumming  <murrayc@murrayc.com>

	adaptor_trait: Remove unused functor_type.

2016-04-13  Murray Cumming  <murrayc@murrayc.com>

	Use just one TupleVisitorVisitEach instead of having 2 identical.

	Just to avoid the copy/pasting even of this small amount of code.

2016-04-13  Murray Cumming  <murrayc@murrayc.com>

	TrackObjVisitEach: Use constexpr, as in TupleVisitorVisitEach.

2016-04-13  Murray Cumming  <murrayc@murrayc.com>

	signal_base.h: Move temp_slot_list to signal.h

	Because that is the only place where it is used.

2016-04-12  Murray Cumming  <murrayc@murrayc.com>

	Make a comment easier to reformat.

2016-04-08  Murray Cumming  <murrayc@murrayc.com>

	2.99.4

2016-04-08  Murray Cumming  <murrayc@murrayc.com>

	2.99.4

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	C++11: Small uses of auto.

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	C++11: slot: Use = default for simple copy constructor.

	With help from clang-tidy, like so:
	clang-tidy-3.8 -fix --checks=modernize-use-default --header-filter=.*  `find . -name "*.cc"`
	after using "bear make all check".

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	C++11: Use = default for simple default constructors.

	With help from clang-tidy, like so:
	clang-tidy-3.8 -fix --checks=modernize-use-default --header-filter=.*  `find . -name "*.cc"`
	after using "bear make all check".

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	signal: Use a range-based for() loop.

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	Use of auto instead of mentioning iterator types.

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	trackable.cc: Use auto instead of specifying iterator type.

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	Revert "tuple tests: Use static_assert() in constexpr tests."

	This reverts commit 798210eeaedd88477b71115423b1d7928e81138f.

	Because this doesn't work with g++ (at least version 5.2.1)
	though it does work with clang++ (3.8).

	g++ gives this error:

	test_tuple_start.cc: In function ‘constexpr void test_tuple_start_constexpr()’:
	test_tuple_start.cc:130:3: error: non-constant condition for static assertion
	static_assert(std::get<0>(t_prefix) == nullptr,
	^
	test_tuple_start.cc:130:3: error: ‘nullptr’ is not a constant expression

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	tuple tests: Use static_assert() in constexpr tests.

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	limit_derived_target: Make constructors explicit.

	Found by cppcheck.

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	slot_do_bind/unbind: Make constructors explicit.

	Found by cppcheck.

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	Remove unnecessary signal.cc file.

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	Remove unnecessary slot.cc file.

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	docs: ptr_fun: Improve the simple description.

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	docs: slots: Fix tiny typo.

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	docs: mem_fun: Improve the simple description.

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	docs: mem_fun: Improve the note about auto-disconnection.

	Because "cleared" doesn't really tell us how this benefits us.

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	docs: slots: Mention automatic disconnection.

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	docs: slots: auto: Mention why it is bad.

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	test_mem_fun: Test auto-disconnection with trackable.

	This is probably tested somewhere else already, but I like having it
	here too because it is an important reason for slot<> to exist,
	compared to a simple std::function.

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	test_mem_fun: Rearrange into individual test functions.

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	docs: Slots: Add section titles to break it up.

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	Remove now-useless SIGC_FUNCTORS_DEDUCE_RESULT_TYPE_WITH_DECLTYPE.

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	Docs: Remove unnecessary Scope of Documentation paragraph.

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	Some perfect-forwarding.

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	limit_derived_target: Use perfect forwarding.

2016-04-01  Murray Cumming  <murrayc@murrayc.com>

	visit_each.h: Add and use is_base_of_or_same_v to avoid duplication.

2016-03-31  Murray Cumming  <murrayc@murrayc.com>

	Use {} with multiline while() blocks.

2016-03-31  Murray Cumming  <murrayc@murrayc.com>

	Use {} with multiline for() blocks.

2016-03-31  Murray Cumming  <murrayc@murrayc.com>

	Rearrange another comment.

2016-03-31  Murray Cumming  <murrayc@murrayc.com>

	Make a comment easier to reformat with clang-format.

2016-03-30  Murray Cumming  <murrayc@murrayc.com>

	slot_base: Make _dup private and _destroy protected.

2016-03-30  Murray Cumming  <murrayc@murrayc.com>

	signal_base/signal_exec: Make some member data protected.wq

2016-03-30  Murray Cumming  <murrayc@murrayc.com>

	slot_list: Make list_ private, not protected.

2016-03-30  Murray Cumming  <murrayc@murrayc.com>

	Reformat .h files with clang-format.

2016-03-30  Murray Cumming  <murrayc@murrayc.com>

	Reformat .cc files with clang-format.

2016-03-30  Murray Cumming  <murrayc@murrayc.com>

	Add .clang-format file and reformat tests and examples.

2016-03-18  Murray Cumming  <murrayc@murrayc.com>

	2.99.3

2016-03-18  Murray Cumming  <murrayc@murrayc.com>

	website: license: Link to the (LGPL3) license text.

	Instead of showing a copy of the license text.

2016-03-18  Murray Cumming  <murrayc@murrayc.com>

	COPYING: Change from LGPL 2+ to LGPL 3+

	Because the tuple-utils .h files are LGPL 3+.
	Bug #763616 (Dominique Leuenberger)

2016-03-18  Murray Cumming  <murrayc@murrayc.com>

	tuple-utils: Change license from GPL to LGPL.

	Following the change in their source in murrayc-tuple-utils.
	I am the author, with some small improvements by Jonathan Wakely,
	who agreed to the license change via email.

	Bug #763616 (Dominique Leuenberger)

2016-03-18  Murray Cumming  <murrayc@murrayc.com>

	configure.ac: Remove check for m4.

	As suggested by Kjell:  https://bugzilla.gnome.org/show_bug.cgi?id=763515#c2

2016-03-18  Marcin Kolny  <marcin.kolny@gmail.com>

	.gitignore: update test ignored files list

2016-03-18  Marcin Kolny  <marcin.kolny@gmail.com>

	build: remove unused m4 file

2016-03-18  Murray Cumming  <murrayc@murrayc.com>

	website: Improve the bugs links for clarity.

2016-03-18  Murray Cumming  <murrayc@murrayc.com>

	website: Mention the GitHub mirror.

2016-03-18  Murray Cumming  <murrayc@murrayc.com>

	website: Fix a capitalized libsigc++.

2016-03-18  Murray Cumming  <murrayc@murrayc.com>

	test_member_method_trait: Implement the methods.

	Because Jetbrains CLion inspections complain about it, and that
	seems fair.

2016-03-18  Murray Cumming  <murrayc@murrayc.com>

	website: Update Developers part to mention libsigc++-3.0.

2016-03-18  Murray Cumming  <murrayc@murrayc.com>

	website: Change News section to just link to NEWS.

2016-03-18  Murray Cumming  <murrayc@murrayc.com>

	website: Remove benchmark page, apparently unlinked.

2016-03-18  Murray Cumming  <murrayc@murrayc.com>

	CMake: tests: explicitly list the tests.

	I don't like just looking for *.cc files in the directory. That
	seems fragile.

2016-03-16  Murray Cumming  <murrayc@murrayc.com>

	2.99.2

2016-03-16  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	slot: Reinsert a comment that disappeared accidentally

	The description of slot's specialization of visitor<>::do_visit_each<>()
	disappeared by mistake when the slot# classes were removed.

2016-03-16  Murray Cumming  <murrayc@murrayc.com>

	slot: Allow only the slot<R(Args...)> syntax.

2016-03-16  Murray Cumming  <murrayc@murrayc.com>

	tests: Use the sigc::slot<R(Args...)> syntax only.

2016-03-16  Murray Cumming  <murrayc@murrayc.com>

	pointer_functor: Use the R(Args...) syntax.

2016-03-16  Murray Cumming  <murrayc@murrayc.com>

	signal: Allow only the signal<R(Args...)> syntax.

2016-03-16  Murray Cumming  <murrayc@murrayc.com>

	tests: Use sigc::signal<R(Args...)> syntax only.

2016-03-16  Murray Cumming  <murrayc@murrayc.com>

	signal: Use the slot<R(Args...)> syntax.

2016-03-16  Murray Cumming  <murrayc@murrayc.com>

	examples: Use sigc::signal<R(Args...)> syntax.

2016-03-16  Murray Cumming  <murrayc@murrayc.com>

	docs: signal_base/exception_catch: Use signal<R(Args...)> syntax.

2016-03-16  Murray Cumming  <murrayc@murrayc.com>

	docs: slot_base: Use slot<R(Args...)> syntax.

2016-03-16  Murray Cumming  <murrayc@murrayc.com>

	docs: Use signal<R(Args..)> syntax.

2016-03-16  Murray Cumming  <murrayc@murrayc.com>

	docs: mem_fun/ptr_fun: Use the sigc::slot<R(Args...)> syntax.

2016-03-16  Murray Cumming  <murrayc@murrayc.com>

	test_retype: Add test of R(Args...) syntax.

2016-03-16  Murray Cumming  <murrayc@murrayc.com>

	test_retype: Break into smaller tests.

2016-03-15  Murray Cumming  <murrayc@murrayc.com>

	Reference docs: main page: Use @c to monospace function names.

2016-03-15  Murray Cumming  <murrayc@murrayc.com>

	Reference docs: main page: Discourage multiple PKG_CHECK_MODULES() calls.

	Mention that one PKG_CHECK_MODULES() call can check for all
	pgk-config-based dependencies.

2016-03-15  Murray Cumming  <murrayc@murrayc.com>

	Reference docs: main page: Make autotools part consistent with CMake part.

2016-03-15  Murray Cumming  <murrayc@murrayc.com>

	Reference docs: main page: Mention CMake.

2016-03-13  Murray Cumming  <murrayc@murrayc.com>

	Add a file about build systems.

	Otherwise people will wonder whether we use autotools or CMake as our
	main build system.

2016-03-13  Murray Cumming  <murrayc@murrayc.com>

	Update README to remove mention of m4.

2016-03-13  Murray Cumming  <murrayc@murrayc.com>

	test_tuple_transform_each: Comment out constexpr test that fails with g++.

	Hopefully this works with newer g++ versions.

2016-03-13  Marcin Kolny  <marcin.kolny@gmail.com>

	cmake: reduce required version to 3.2

2016-03-13  Marcin Kolny  <marcin.kolny@gmail.com>

	cmake: add cmake files to dist package

2016-03-12  Marcin Kolny  <marcin.kolny@gmail.com>

	cmake: fix generating cmake *Config files

2016-03-12  Marcin Kolny  <marcin.kolny@gmail.com>

	cmake: fix library name

2016-03-12  Marcin Kolny  <marcin.kolny@gmail.com>

	cmake: fix library output name

2016-03-12  Marcin Kolny  <marcin.kolny@gmail.com>

	cmake: install sigc++config.h file

2016-03-12  Marcin Kolny  <marcin.kolny@gmail.com>

	cmake: don't install uninstalled.pc file

2016-03-12  Marcin Kolny  <marcin.kolny@gmail.com>

	cmake: add uninstall target

2016-03-12  Marcin Kolny  <marcin.kolny@gmail.com>

	cmake: install headers from sigc++ directory

2016-03-12  Marcin Kolny  <marcin.kolny@gmail.com>

	cmake: generate and install uninstalled.pc file

2016-03-12  Marcin Kolny  <marcin.kolny@gmail.com>

	cmake: generate cmake *Config and *ConfigVersion files

2016-03-12  Marcin Kolny  <marcin.kolny@gmail.com>

	cmake: add pkg-config support

2016-03-12  Marcin Kolny  <marcin.kolny@gmail.com>

	cmake: init - add cmake files

2016-03-11  Murray Cumming  <murrayc@murrayc.com>

	signal: Allow sigc::signal<R(Args...)> declaration, like std::function.

	By adding a template specialization that repeats the main
	template declaration, though it would be good to avoid the repetition.

	Bug #763393

	Please enter the commit message for your changes. Lines starting

2016-03-11  Murray Cumming  <murrayc@murrayc.com>

	slot: Allow sigc::slot<R(Args...)> declaration, like std::function.

	By adding a template specialization that repeats the main
	template declaration, though it would be good to avoid the repetition.

	Bug #763393

2016-03-11  Murray Cumming  <murrayc@murrayc.com>

	signal: Update and improve the doxygen comment.

2016-03-11  Murray Cumming  <murrayc@murrayc.com>

	test_accumulated(): Restructure this.

	To make it clearer and to keep the small tests more self-contained and
	separate.

2016-03-11  Murray Cumming  <murrayc@murrayc.com>

	test_signal: Add test_simple().

2016-03-11  Murray Cumming  <murrayc@murrayc.com>

	test_signal(): Restructure this.

	To make it clearer and to keep the small tests more self-contained and
	separate.

2016-03-11  Murray Cumming  <murrayc@murrayc.com>

	slot: Update the Doxygen comment.

2016-03-11  Murray Cumming  <murrayc@murrayc.com>

	slot: Correct the doxygen comment line ending.

2016-03-11  Murray Cumming  <murrayc@murrayc.com>

	test_slot(): Restructure this.

	To make it clearer and to keep the small tests more self-contained and
	separate.

2016-03-10  Murray Cumming  <murrayc@murrayc.com>

	examples build: Disable deprecated API.

2016-03-10  Murray Cumming  <murrayc@murrayc.com>

	mem_functor: Remove now-unnecessary operator()(pointer).

2016-03-10  Murray Cumming  <murrayc@murrayc.com>

	retype: Simplify by using a template template parameter.

2016-03-10  Murray Cumming  <murrayc@murrayc.com>

	mem_fun(): Remove the T_obj* overloads.

	So you would, for instance, always call sigc::mem_fun(*this, ...)
	instead of sigc::mem_fun(this, ...).

	Bug #763215

2016-03-08  Murray Cumming  <murrayc@murrayc.com>

	tuple_transform_each(): Allow this to be a constexpr.

2016-03-08  Murray Cumming  <murrayc@murrayc.com>

	bind: Use of constexpr.

2016-03-08  Murray Cumming  <murrayc@murrayc.com>

	tuple_for_each(): Use of constexpr.

2016-03-08  Murray Cumming  <murrayc@murrayc.com>

	tuple_cdr(), tuple_start(), tuple_end(): Use of constexpr.

2016-03-08  Murray Cumming  <murrayc@murrayc.com>

	TupleVisitorVisitEach and TupleVisitorVisitEach: Use constexpr.

	This would seem to be necessary if the tuple utils are ever fully
	constexpr.

2016-03-08  Murray Cumming  <murrayc@murrayc.com>

	bind: Use of const.

2016-03-08  Murray Cumming  <murrayc@murrayc.com>

	Put member_method*<> in sigc::internal namespace.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	NEWS: Mention that it needs C++14.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Update NEWS

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Use mem_fun.h as a regular .h file.

	Instead of generating it from an .m4 file.
	This still has some repetition, but it is not nearly as much as before,
	and it is the last m4 file.
	Having all the code in normal C++ source files makes it far easier for people
	to contribute, to actually reduce this repetition.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	.doap: Correct the web site URL.

	Though we really must stop using sourceforge even for the web site.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Rename our .doap file.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Use 2.99.1 instead of 2.9.1

	This gives us more room for 2.x releases of the libsigc++-2.0 API
	in future.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Rename mem_functor_base to mem_functor.

	And rename bound_mem_functor_base to bound_mem_functor.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	mem_fun.h.m4: Remove mem_functor and const_mem_functor.

	They were only used in one place, internally, and did not add much clarity.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	mem_fun.h.m4: Remove bound_const_mem_functor alias.

	It was only used in one place in the code and didn't add much clarity.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	bound_mem_functor: Remove constructor that takes pointer.

	Leaving just the constructor that takes the object by reference.
	This is not a class that application code would use directly,
	so there seems no need for the convenience.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	mem_functor_base: Use member_method_result<>::type.

	To avoid the (apparent) need to use T_args... with std::result_of_t<>.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Added  member_method_result<>::type type trait.

	This seems to be easier than std::result_of<>, which seems to need us to
	explicitly specify the arguments too.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	bound_mem_functor_base: Remove now-unnecessary T_obj template parameter.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	mem_functor_base: Remove T_obj template parameter.

	Instead using member_method_class<>::type.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Add member_method_class<>::type type trait.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Remove some now-unused tuple_type*<> type traits.

	Because we now motly only need the tuple*() utilities to manipulate
	the actual instances. Some are still need for those tuple*()
	implementations.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	hide_functor: Don't specify a specific specialization for operator().

	It doesn't seem to be necessary now.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Remove unnecessary TODO comment.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	bound_mem_functor_base: Remove now-unused T_return template parameter.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	mem_functor_base: Remove T_return template parameter.

	Instead using std::result_of<> to discover it from the T_func.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	bound_mem_functor_base: Remove T_limit_reference template parameter.

	Instead discover it via std::conditional_t and our
	ember_method_is_const<>::value type traits.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	use limit_reference.h as a regular .h file.

	Instead of generating it.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Rename limit_reference_base to limit_reference.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Remove limit_reference_base<> aliases, such as const_limit_reference.

	Because limit_reference_base<T_type> is now simple enough to just
	use directly.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	limit_reference.h.m4: Remove unused 2nd LIMIT_REFERENCE() parameter.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	limit_reference_base: Rename template parameter back to T_type.

	Because I think that is what this really is.
	Now this limit_reference_base<> is again as simple as *_limit_reference
	in libsigc++-2.0 but without the code generation and multiple classes.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	limit_reference_base: Take just one template parameter.

	And use std::remove_volatile_t<> to get the other.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	mem_fun: Use limit_reference_base instead of aliases.

	Because it is now simple enough.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	bound_*_mem_functor: Use limit_reference_base instead of aliases.

	Because it is now simple enough.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	limit_reference_base<>: Avoid the need for the T_trackable template parameter.

	By using std::conditional_t and std::is_const<>::value.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	(bound_)mem_functor_base: Remove T_obj_with_modifier template parameter.

	Remove the need for this by using std::conditional_t<> and
	our member_method_is_const<>::value instead.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Add member_method_is_const<> and member_method_is_volatile.

	And some tests for them.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	mem_fun(): Use base bound_mem_functor_base instead of the aliases.

	Thus making the bound_mem_functor, bound_const_mem_functor,
	bound_const_volatile_mem_functor, etc, aliases unused.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	mem_fun(): Use base mem_functor_base instead of the aliases.

	Thus making the mem_functor, const_mem_functor, const_volatile_mem_functor,
	etc, aliases unused.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	limit_reference.h.m4: Make *_limit_reference template aliases of a limit_reference_base.

	And have just one visitor specialization, using the base class.
	As for *_mem_functor. This avoids the repetition.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	A small const improvement.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Use retype.h as a normal .h file.

	Instead of generating it.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	retype.h.m4: Have retype() for just the 2 base *_mem_functor_base classes.

	Then we don't need to generate code for this at all.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	mem_func.h.m4: Have just one visitor specialization for bound_mem_functor_base.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	mem_fun.h.m4: Make bound_*_mem_functor template aliases of a bound_mem_functor_base.

	As for *_mem_functor. This avoids the repetition

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	mem_fun.h.m4: Make *_mem_functor template aliases of a mem_functor_base.

	This avoids the repetition.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	functor_trait.h: Do not repeat mem_functor and pointer_function declarations.

	Instead just include the headers.
	Then we can change their declarations without having to do it in two places.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Split functor_trait.h into functor_base.h and functor_trait.h.

	So that slot_base doesn't need to include so much.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Don't include functor_trait.h where it is not used.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	C++11: Change all typedefs to using.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	bind.h.m4: Remove now-unnecessary dnls.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Fix a typo in a static_asser() error message.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	bind_functor: Don't specify the operator() template specialization.

	This doesn't seem to be necessary now.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	bind_functor: Make bound_ private.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	signal_base: clear signal_impl in its own destructor.

	This deals with some TODO comments.
	This patch is based on a suggestion from Kjell Ahlstedt:
	See https://bugzilla.gnome.org/show_bug.cgi?id=167714#c14

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	hide_functor::operator(): Do some perfect forwarding.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	hide_functor: Avoid using std::make_tuple().

	Because it can change types, such as changing std::ref()ed T to T.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Update tuple-utils from murrayc-tuple-utils.

	tuple_transform_each() now iterates in order, instead of in reverse,
	though that didn't seem to matter to how we used it in libsigc++.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Connection::operator bool(): Make this const.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Remove use of removed SIGC_HAVE_SUN_REVERSE_ITERATOR

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	sigc++config.h.in: Remove unused macros.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	slot/slot_base: Make some API private.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	slot_rep::dup(): Take a slot_rep* instead of void*.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Add and use notifiable base class instead of void*.

	Use notifiable as the  base class for trackable, connection, signal_impl,
	self_and_iter and destroy_notify_struct.

	Use this notifiable* instead of void* for the destroy/notify callback data.
	This is a little more type-safe and self-documenting.
	Bug #302152

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Remove C++ standard library checks.

	We do not actually use these, and it must have been years since
	any compiler didn't, for instance, have the std namespace.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Remove nil and the associated pragma push/pop fixes for Objective C++.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	signal: Use void instead of nil to mean no accumulator.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Remove unused SIGC_CXX_SELF_REFERENCE_IN_MEMBER_INITIALIZATION() configure check.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Remove SIGC_WORKAROUND_OPERATOR_PARENTHESES, using just .template operator()<>.

	We can add it back if we find that the Sun or Microsoft compilers still
	need it, when/if they support enough C++14 anyway.
	We can always use libsigc++-2.0 to easily discover what its configure
	checks say about the compiler behaviour.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	adaptor_functor: Do some perfect forwarding.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	retype_return_functor: Do some perfect forwarding.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	compose: Do some perfect forwarding.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	track_obj_functor: Do some perfect forwarding.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	bind(): Correct the static_assert().

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	bind(): Add a static_assert() for when bind<num> is passed a too-high index.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	template.macros.m4: Remove unused m4 macros.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Put tuple-utils into sigc::internal namespace.

	To discourage people from using libsigc++ just for the tuple utils.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Move all tuple_*.h files into sigc++/tuple-utils/

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	bind_functor::operator(): Do perfect forwarding.

	To be consistent with the other operator().

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Create a parallel-installable sigc++-3.0 API/ABI.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Add a TODO comment.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	bind: Some perfect forwarding.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Avoid std::make_tuple().

	To preserve std::ref()ed elements.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Put bind() in its own bind.h file instead of generating it.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	bind.h.m4: Make variadic.

	With a partial build fix from Marcin Kolny.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	bind: Make the visitor<> specialization variadic.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	bind<-1>: Store the bound args in a tuple.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	bind<num>(): Store the single bound arg in a tuple.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	track_obj.h: Use this as a normal .h file.

	Instead of genrating it from a .h.m4 file.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	track_obj.h.m4: Make this variadic.

	This uses a tuple_for_each<>() utility taken from here:
	https://github.com/murraycu/murrayc-tuple-utils/tree/master/tuple-utils
	for the visit_each() specialization.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	hide.h: Use this as a normal .h file.

	Instead of generating it from an .h.m4 file.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	hide_functor: Make this fully variadic.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	hide.h.m4: hide_functor::operator(): Make this variadic.

	This uses some tuple manipulation utilities so that the variadic parameters
	with which we call a method can be based on the variadic parameters that the
	caller received, but not exactly. In this case, we need to replace an element
	in the middle of a tuple. There is probably a more efficient way to do this.

	For now, this is using copies of the tuple utilities from here:
	https://github.com/murraycu/murrayc-tuple-utils/tree/master/tuple-utils

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Add tuple utils from murrayc-tuple-utils.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	exception_catch_functor::operator():

	Remove the unnecessary operator()() overload.
	This did need me to change the test code so that it doesn't try to
	provide a catch function that returns something, but that seems
	more correct anyway.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Another use of decltype(auto) for a return type

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Correct some documentation.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	More use of decltype(auto) for return types.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	retype: Make this variadic.

	However, we still need to generate const/volatile/const_volatile/
	bound_const/bound_volatile/bound_const_volatile versions.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	slot.h: Remove comment about this being generated.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	slot.h: Use this as a normal .h file.

	Instead of generating it from a .h.m4 file.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	slot: Make this fully variadic.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	slot.h.m4: make slot_call fully variadic.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	bind_functor::operator()(): Give this a dummy template parameter.

	And remove the m4 ifelse from slot.h.m4 because we can now resolve
	that operator() when calling it with an empty variadic parameter pack.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	slot.h.m4: visit_each specialization: Make this variadic.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	make_slot: Use decltype(auto) for return type.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Replace some uses of result_type with decltype(auto).

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Remove code that used the SIGC_TEMPLATE_SPECIALIZATION_OPERATOR_OVERLOAD ifndefs.

	See the previous commit.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	test_acum_iter: Replace signal_accumulated with signal<>::accumulated.

	I've never noticed this sub-template before, but this syntax is
	arguably nicer.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	signal.h: Use this as a normal header file.

	Instead of generating it from a .h.m4 file.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	signal: Make this fully variadic.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	signal.h.m4: Rename signal1/2/3/etc to signal_with_accumulator.

	And make it fully variadic.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	signal1/2/3/etc: Make this variadic.

	Though the separate generated signal1/2/3/etc still exist.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	signal1/2/3: Move T_accumulator to second position.

	Because it can't go at the end if we want to change the args to
	a variadic template pack.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Remove useless SIGC_TYPEDEF_REDEFINE_ALLOWED

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	signal.h.m4: Make signal_emit fully variadic.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	signal_emit1/2/3/etc: Simplify call_type typedef.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	signal.h.m4: signal_emit1/2/3/etc: Make this variadic.

	Though we still have the separate generated signal_emit1/2/3, etc.

	This is the first time that we need to use a tuple, and then
	std::index_sequence(), to call another method with the stored
	(in a tuple) parameter pack.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	signal.h.m4: signal_emit: Put the T_Accumulator before the args.

	So the args can be variadic eventually.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	test_disconnect: Use slot<> instead of slot1<>.

	Because we are trying to remove slot1,2,3, etc.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	slot.h.m4: Make slot1/2/3/etc variadic.

	While still having slot1/2/3/ themselves. This is lets us take
	another small step in the conversion to variadic templates.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	test_ptr_fun: Comment out what doesn't work with g++.

	We probably need to get this working, but it already works with
	clang++ (I'm using clang++ 3.7), so I'm just doing this for now,
	with TODO comments, so I can move forwards.
	I'm using g++ 5.2.1 .

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	bind(): Make this variadic.

	Instead of generating many versions.

	bind_functor<> is not at all variadic yet.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	bind(): Move T_functor the start.

	This is different to the bind<number, ...> version but it's the only
	way to have a parameter pack at the end.
	Hopefully this version of bind() never needs to be called for specific
	template types.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	C++14: bind(): Use decltype(auto) for the return type.

	This simplifies the code a bit.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Rename deduce_result_type.h to adaptor_base.h

	Because that is all this file now contains.
	However, I suspect that we don't need adaptor_base at all now.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	C++14 Remove now-unused deduce_result_t.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	C++14: compose: Remove use of deduce_result_type.

	By removing use of SIGC_WORKAROUND_OPERATOR_PARENTHESES, which
	hopefully isn't necessary any more.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	C++14: operator(): Use decltype(auto) instead of deduce_result_type.

	So we can remove all the nasty deduce_result_type code,
	which is hard to make fully variadic in bind().

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Use C++14.

	By using the MM_AX_CXX_COMPILE_STDCXX() m4 macro that I just
	added to mm-common.

	This lets us use std::integer_sequence (and std::index_sequence) with
	std::tuple.

	We probably also want to use decltype(auto) return types for template
	methods, as long as that doesn't slow down compile times.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	deduce_result_type.h: Remove comment about it being generated.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	adaptor_trait.h: Remove comment about it being generated.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	C++11: Replace sigc::ref() with std::ref().

	It seems to be remarkably similar.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Remove (and replace) the _R_ and _P_ m4 macros.

	They just make it that little bit harder to convert the code to
	non-generated C++.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Remove (previously deprecated) lambda API.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	retype_functor: Make the slot version variadic.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	retype_functor: Make the pointer_functor version variadic.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	exception_catch.h: Use this as a normal .h file.

	Instead of generating it from a .h.m4 file.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	exception_catch_functor: Make this variadic.

	Instead of generating multiple overloads of operator().

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	track_obj_functor1*(): Make operator() variadic.

	Instead of generating multiple overloads.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	retype_return.h: Use this as a normal .h file.

	Instead of generating it from a .h.m4 file.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	retype_return_functor: Make this variadic.

	Instead of generating 7 overloads of operator().

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	compose.h: Use this as a normal .h file.

	Instead of generating it from a .h.m4 file.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	compose1_functor, compose2_functor: Make these variadic.

	Instead of using 7 arguments with void defaults, and instead of
	generating 7 overloads of operator().

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	deduce_result_type.h: Use this as a regular .h file.

	Instead of generating it from a .h.m4 file.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	bind_return.h: Use this as a normal .h file.

	Instead of generating it from a .h.m4 file.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	bind_return_functor: operator(): Make this variadic.

	Instead of generating multiple overloads.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	adaptor_trait.h: Use this as a regular .h file.

	Instead of generating it from a .h.m4 file.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	adaptor_function: Make the operator() variadic.

	Instead of generating many overloads.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	adaptor_functor: Make deduce_result_type variadic.

	Instead of having all 7 arguments, defaulting to void.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	mem_fun.h.m4: Remove now-unnecessary LIST() calls.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	filelist.am: Mention ptr_fun.h.

	I forgot to do this when I changed this from a a .h.m4 file to a .h file.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	functor_trait.h: Use this as a normal header, not generated.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	functor_trait.h.m4: Use a variadic template instead of generating many.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	*mem_functor(): Remove the numbered versions, leaving just variadic ones.

	Do not generate *mem_functor0 through *mem_functor7. Instead just
	generate variadic *mem_functor<>.
	We do still generate mem_functor, const_mem_functor and
	const_volatile_mem_functor, which seems messy.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	ptr_fun.h: Use this as a normal header instead of generating it.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	test_ptr_fun: Fix the build, at least temporarily.

	See https://bugzilla.gnome.org/show_bug.cgi?id=753612#c11

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	C++11: ptr_fun.h: Replace generated ptr_fun1/2/3/etc with ptr_fun<>.

	Note that T_Return must now be the first parameter, so that the
	variadic template parameters may be trailing, and this means that
	the return type must now be specified if you specify any argument
	types.
	For instance:
	ptr_fun<type_arg1>(&somefunc)
	now becomes
	ptr_fun<void, type_arg2>(&somefunc)

	and
	ptr_fun<type_arg1, type_return>(&somefunc)
	now becomes
	ptr_fun<type_return, type_arg1>(&somefunc)

	which might be an annoying API change, even though most people just
	use ptr_fun().

	However, this breaks the tests:

	test_ptr_fun.cc: In function ‘int main(int, char**)’:
	test_ptr_fun.cc:64:21: error: no matches converting function ‘foo’ to type ‘void (*)()’
	sigc::ptr_fun(&foo)();
	^
	test_ptr_fun.cc:24:6: note: candidates are: void {anonymous}::foo(int)
	void foo(int i1)
	^
	test_ptr_fun.cc:18:5: note:                 int {anonymous}::foo()
	int foo()
	^

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	C++11: ptr_fun.h: Replace generated pointer_functor1/2/3/etc with pointer_functor.

	Using C++11 variadic templates arguments.
	Note that T_Return is now the first template parameter, so that the variadic
	parameters can be the trailing parameters, as in std::function.

2016-03-07  Murray Cumming  <murrayc@murrayc.com>

	Fix tiny typo in a comment.

2016-03-06  Murray Cumming  <murrayc@murrayc.com>

	docs: Refer to it as libsigc++, not libsigc++2.

2016-03-06  Murray Cumming  <murrayc@murrayc.com>

	website/README: Mention the new git repository.

2016-03-03  Murray Cumming  <murrayc@murrayc.com>

	SIGC_CXX_HAS_SUN_REVERSE_ITERATOR: Add std:: now that I removed the using std.

	See https://bugzilla.gnome.org/show_bug.cgi?id=762065#c2

2016-03-03  Murray Cumming  <murrayc@murrayc.com>

	C++11: Make all operator bool() explicit.

2016-03-03  Murray Cumming  <murrayc@murrayc.com>

	Remove now-unnecessary SIGC_CXX_HAS_NAMESPACE_STD() configure check.

	Bug #762065 (Kjell Ahlstedt)

2016-03-03  Murray Cumming  <murrayc@murrayc.com>

	Remove unused SIGC_CXX_SELF_REFERENCE_IN_MEMBER_INITIALIZATION() configure check.

	Bug #762065 (Kjell Ahlstedt)

2016-03-02  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Improve the documentation of mem_fun()

	* sigc++/functors/macros/mem_fun.h.m4:
	* sigc++/functors/slot_base.h: Make it clear that mem_fun() does not return
	a slot, and 'auto s = sigc::mem_fun(....)' is not equivalent to
	'sigc::slot<....> s = sigc::mem_fun(....)'.
	The confusing documentation was noted by Andrejs Hanins on libsigc-list.

2016-03-01  Murray Cumming  <murrayc@murrayc.com>

	Add test_bind_as_slot.

	This tests sigc::bind()'s indirect use of adaptor_functor<>.
	I added this because this doesn't work yet in the variadic_bind branch.

2016-03-01  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	2.7.1

2016-01-14  Murray Cumming  <murrayc@murrayc.com>

	m4: Remove unused UPPER and LOWER functions.

2016-01-14  Murray Cumming  <murrayc@murrayc.com>

	tests: Use = delete instead of private constructors.

	To make classes non-copyable.

2016-01-07  Murray Cumming  <murrayc@murrayc.com>

	functor_trait.m4: Correct the mem_functor<> declarations.

	The first template types are T_return and T_obj, not the arguments.
	This doesn't seem to have been a problem. Maybe this code is not tested
	or used.

2015-12-17  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Don't use SIGC_USING_STD()

	The SIGC_USING_STD() macro is defined as an empty string, if some standard
	C++ symbols are defined in namespace std. They always are.
	Since many years, SIGC_USING_STD() is an unnecessary macro.

2015-12-16  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Temporarily undefine the nil macro, if it's defined

	* build/cxx.m4: Add SIGC_CXX_PRAGMA_PUSH_POP_MACRO.
	* configure.ac: Call SIGC_CXX_PRAGMA_PUSH_POP_MACRO.
	* sigc++config.h.in: Add SIGC_PRAGMA_PUSH_POP_MACRO.
	* sigc++/functors/macros/functor_trait.h.m4:
	* sigc++/adaptors/macros/bind.h.m4:
	* sigc++/adaptors/macros/retype.h.m4:
	* sigc++/functors/macros/slot.h.m4:
	* sigc++/macros/signal.h.m4: If nil and SIGC_PRAGMA_PUSH_POP_MACRO are
	defined, undefine nil temporarily in the header files.
	nil is a keyword in Objective-C++ and in Mac OS X C++. Bug #695235.

2015-12-15  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	can_deduce_result_type_with_decltype: Rename the check() methods

	* sigc++/functors/macros/functor_trait.h.m4: Rename the check() methods.
	check() is a preprocessor macro in Mac OS X. Bug #759315.

2015-12-13  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Fix some typos

2015-11-16  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Add a moving signal::connect() overload

	* sigc++/macros/signal.h.m4: Add signal#::connect(slot_type&&),
	slot_list::insert(iterator i, slot_type&&),
	slot_list::push_front(slot_type&&), push_back(slot_type&&).
	* sigc++/signal_base.[h|cc]: Add signal_base::connect(slot_base&&),
	signal_base::insert(slot_base&&), signal_impl::connect(slot_base&&),
	signal_impl::insert(slot_base&&). Bug #756484.

2015-11-13  Murray Cumming  <murrayc@murrayc.com>

	2.6.2

2015-11-12  Murray Cumming  <murrayc@murrayc.com>

	Add warnings for use with --enable-warnings=fatal

	Added use -Wsuggest-override and -Wzero-as-null-pointer-constant.

2015-11-10  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	trackable, slot_base, signal_base, connection: Add some noexcept specs

2015-11-08  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	slot and signal: Add missing move constructors and move assignments

	* sigc++/functors/macros/slot.h.m4: Add move operators for slot<>.
	* sigc++/macros/signal.h.m4: Add move operators for signal#<> and signal<>.
	* tests/test_signal_move.cc:
	* tests/test_slot_move.cc: Test that the source objects are empty.
	Bug #756484.

2015-11-08  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	trackable, slot, signal: Remove noexcept specifications

	* sigc++/functors/macros/slot.h.m4:
	* sigc++/functors/slot_base.[h|cc]:
	* sigc++/signal_base.[h|cc]:
	* sigc++/trackable.[h|cc]: Remove noexcept from the move operators.
	Bug #756484.

2015-11-06  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	slot: Handle auto-disconnection when a slot contains a slot

	* sigc++/functors/macros/slot.h.m4: Add sigc::visitor<> specializations
	for slot# and slot.
	* tests/test_disconnect.cc: Test auto-disconnection of a slot that contains
	a slot. Bug #755003.

2015-11-06  Murray Cumming  <murrayc@murrayc.com>

	signal_impl: =delete copy and move operations.

	Prevent, copy and move constructors and assignment operators from
	being generated automatically. These are never used, but this
	will make sure of that.
	See https://bugzilla.gnome.org/show_bug.cgi?id=756484#c5

2015-11-06  Murray Cumming  <murrayc@murrayc.com>

	typed_slot_rep: =delete unimplemented copy and move operations.

	Prevent, copy assignment operator, move constructor and move
	assignment operators from being generated automatically.
	These are never used, but this will make sure of that.
	See https://bugzilla.gnome.org/show_bug.cgi?id=756484#c5

2015-11-06  Murray Cumming  <murrayc@murrayc.com>

	slot_rep: =delete copy and move operations.

	Prevent, copy and move constructors and assignment operators from
	being generated automatically. These are never used, but this
	will make sure of that.
	See https://bugzilla.gnome.org/show_bug.cgi?id=756484#c5

2015-11-06  Murray Cumming  <murrayc@murrayc.com>

	Small whitespace changes in docs comment.

2015-10-31  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	trackable: Add a comment

2015-10-21  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	slot and signal: Fix move constructors and move assignments

	* sigc++/functors/macros/slot.h.m4: Add documentation.
	* sigc++/functors/slot_base.[h|cc]: Fix the move operators of slot_base.
	Don't move a connected slot.
	* sigc++/signal_base.cc: Fix the move assignment of signal_base.
	* tests/test_signal_move.cc:
	* tests/test_slot_move.cc: Really test move assignment. Bug #756484.

2015-10-13  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	More use of nullptr instead of 0

2015-10-11  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	slot_rep::disconnect(): Remove a comment, add a test

	* sigc++/functors/slot_base.cc: Remove a TODO comment at slot_rep::disconnect().
	* tests/test_slot_disconnect.cc: Add a test that assigns an empty slot.

2015-09-29  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Update sigc++/.gitignore

2015-09-27  Murray Cumming  <murrayc@murrayc.com>

	2.6.1

2015-09-26  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	sigc::trackable: Don't move the callback list

	* sigc++/trackable.[h|cc]: Don't move the callback list.
	* tests/test_trackable_move.cc: Remove a comment. Bug #755393.

2015-09-26  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Recreate adaptors/lambda files necessary not to break ABI

	* sigc++/adaptors/lambda/macros/base.h.m4:
	* sigc++/adaptors/lambda/macros/lambda.cc.m4:
	* sigc++/adaptors/lambda/macros/select.h.m4: Recreate these files.
	* sigc++/Makefile.am:
	* sigc++/filelist.am: Add the recreated lambda files.
	Approximately a reversion of commit a259b4c7a1753dbc389ee467fa536339ec820223,
	"Remove remaining parts of the sigc::lambda API."
	Differences from an exact reversion: MSVC_Net files are not modified.
	(Probably something ought to be changed in MSVC_Net2013.)
	tests/Makefile.am is not modified-
	is_base_and_derived<> is replaced by std::is_base_of<> in base.h.m4.
	The extern declarations that were previously in select.h.m4 are moved to
	lambda.cc.m4. Without them, sigc::_1 .. sigc::_7 are not included in
	the .so file.
	All code in the header files are inside #ifndef DOXYGEN_SHOULD_SKIP_THIS.
	Bug #755550.

2015-09-21  Murray Cumming  <murrayc@murrayc.com>

	2.6.0

2015-09-17  Murray Cumming  <murrayc@murrayc.com>

	C++11: deduce_result_type: Simpifying, removing use of std::is_same().

	See https://bugzilla.gnome.org/show_bug.cgi?id=753612#c9

2015-09-17  Marcin Kolny  <marcin.kolny@gmail.com>

	C++11: deduce_result_type: build fix, using SFINAE paradigm.

	Bug #753612

2015-09-17  Murray Cumming  <murrayc@murrayc.com>

	C++11: deduce_result_type: Simplify with variadic template and std::conditional<>.

	Bug #753612
	However, the build then fails like so:

	make[2]: Entering directory '/home/murrayc/checkout/gnome/libsigc++2/examples'
	g++ -DHAVE_CONFIG_H   -I.. -I..  -pedantic -Wall -Wextra -Wshadow -Wformat-security -Werror -Wall -g -O0 -std=c++11 -MT hello_world.o -MD -MP -MF .deps/hello_world.Tpo -c -o hello_world.o hello_world.cc
	In file included from ../sigc++/adaptors/adaptor_trait.h:10:0,
	from ../sigc++/functors/slot.h:7,
	from ../sigc++/signal_base.h:27,
	from ../sigc++/signal.h:8,
	from ../sigc++/sigc++.h:86,
	from hello_world.cc:10:
	../sigc++/adaptors/deduce_result_type.h: In instantiation of ‘struct sigc::deduce_result_type<sigc::pointer_functor1<const std::basic_string<char>&, void>, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&, void, void, void, void, void, void>’:
	../sigc++/adaptors/deduce_result_type.h:60:80:   required by substitution of ‘template<class T_functor, class ... T_args> using deduce_result_t = typename sigc::deduce_result_type::type [with T_functor = sigc::pointer_functor1<const std::basic_string<char>&, void>; T_args = {const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&, void, void, void, void, void, void}]’
	../sigc++/adaptors/adaptor_trait.h:67:104:   required from ‘struct sigc::adaptor_functor<sigc::pointer_functor1<const std::basic_string<char>&, void> >::deduce_result_type<const std::basic_string<char>&, void, void, void, void, void, void>’
	../sigc++/adaptors/adaptor_trait.h:88:3:   required by substitution of ‘template<class T_arg1> typename sigc::adaptor_functor<T_functor>::deduce_result_type<T_arg1>::type sigc::adaptor_functor<T_functor>::operator()(T_arg1) const [with T_arg1 = const std::basic_string<char>&]’
	../sigc++/functors/slot.h:137:20:   required from ‘static T_return sigc::internal::slot_call1<T_functor, T_return, T_arg1>::call_it(sigc::internal::slot_rep*, sigc::type_trait_take_t<T_arg3>) [with T_functor = sigc::pointer_functor1<const std::basic_string<char>&, void>; T_return = void; T_arg1 = const std::basic_string<char>&; sigc::type_trait_take_t<T_arg3> = const std::basic_string<char>&]’
	../sigc++/functors/slot.h:144:37:   required from ‘static void* (* sigc::internal::slot_call1<T_functor, T_return, T_arg1>::address())(void*) [with T_functor = sigc::pointer_functor1<const std::basic_string<char>&, void>; T_return = void; T_arg1 = const std::basic_string<char>&; sigc::internal::hook = void* (*)(void*)]’
	../sigc++/functors/slot.h:529:91:   required from ‘sigc::slot1<T_return, T_arg1>::slot1(const T_functor&) [with T_functor = sigc::pointer_functor1<const std::basic_string<char>&, void>; T_return = void; T_arg1 = const std::basic_string<char>&]’
	../sigc++/functors/slot.h:1161:26:   required from ‘sigc::slot<T_return, T_arg1, sigc::nil, sigc::nil, sigc::nil, sigc::nil, sigc::nil, sigc::nil>::slot(const T_functor&) [with T_functor = sigc::pointer_functor1<const std::basic_string<char>&, void>; T_return = void; T_arg1 = const std::basic_string<char>&]’
	hello_world.cc:25:50:   required from here
	../sigc++/adaptors/deduce_result_type.h:56:12: error: no class template named ‘deduce_result_type’ in ‘class sigc::pointer_functor1<const std::basic_string<char>&, void>’
	>::type;
	^
	In file included from ../sigc++/signal_base.h:27:0,
	from ../sigc++/signal.h:8,
	from ../sigc++/sigc++.h:86,
	from hello_world.cc:10:
	../sigc++/functors/slot.h: In instantiation of ‘static T_return sigc::internal::slot_call1<T_functor, T_return, T_arg1>::call_it(sigc::internal::slot_rep*, sigc::type_trait_take_t<T_arg3>) [with T_functor = sigc::pointer_functor1<const std::basic_string<char>&, void>; T_return = void; T_arg1 = const std::basic_string<char>&; sigc::type_trait_take_t<T_arg3> = const std::basic_string<char>&]’:
	../sigc++/functors/slot.h:144:37:   required from ‘static void* (* sigc::internal::slot_call1<T_functor, T_return, T_arg1>::address())(void*) [with T_functor = sigc::pointer_functor1<const std::basic_string<char>&, void>; T_return = void; T_arg1 = const std::basic_string<char>&; sigc::internal::hook = void* (*)(void*)]’
	../sigc++/functors/slot.h:529:91:   required from ‘sigc::slot1<T_return, T_arg1>::slot1(const T_functor&) [with T_functor = sigc::pointer_functor1<const std::basic_string<char>&, void>; T_return = void; T_arg1 = const std::basic_string<char>&]’
	../sigc++/functors/slot.h:1161:26:   required from ‘sigc::slot<T_return, T_arg1, sigc::nil, sigc::nil, sigc::nil, sigc::nil, sigc::nil, sigc::nil>::slot(const T_functor&) [with T_functor = sigc::pointer_functor1<const std::basic_string<char>&, void>; T_return = void; T_arg1 = const std::basic_string<char>&]’
	hello_world.cc:25:50:   required from here
	../sigc++/functors/slot.h:137:20: error: no matching function for call to ‘sigc::adaptor_functor<sigc::pointer_functor1<const std::basic_string<char>&, void> >::operator()(const std::basic_string<char>&)’
	(a_1);
	^
	../sigc++/functors/slot.h:137:20: note: candidates are:
	In file included from ../sigc++/functors/slot.h:7:0,
	from ../sigc++/signal_base.h:27,
	from ../sigc++/signal.h:8,
	from ../sigc++/sigc++.h:86,
	from hello_world.cc:10:
	../sigc++/adaptors/adaptor_trait.h:88:3: note: template<class T_arg1> typename sigc::adaptor_functor<T_functor>::deduce_result_type<T_arg1>::type sigc::adaptor_functor<T_functor>::operator()(T_arg1) const [with T_arg1 = T_arg1; T_functor = sigc::pointer_functor1<const std::basic_string<char>&, void>]
	operator()(T_arg1 _A_arg1) const
	^
	../sigc++/adaptors/adaptor_trait.h:88:3: note:   substitution of deduced template arguments resulted in errors seen above
	../sigc++/adaptors/adaptor_trait.h:107:3: note: template<class T_arg1, class T_arg2> typename sigc::adaptor_functor<T_functor>::deduce_result_type<T_arg1, T_arg2>::type sigc::adaptor_functor<T_functor>::operator()(T_arg1, T_arg2) const [with T_arg1 = T_arg1; T_arg2 = T_arg2; T_functor = sigc::pointer_functor1<const std::basic_string<char>&, void>]
	operator()(T_arg1 _A_arg1, T_arg2 _A_arg2) const
	^
	../sigc++/adaptors/adaptor_trait.h:107:3: note:   template argument deduction/substitution failed:
	In file included from ../sigc++/signal_base.h:27:0,
	from ../sigc++/signal.h:8,
	from ../sigc++/sigc++.h:86,
	from hello_world.cc:10:
	../sigc++/functors/slot.h:137:20: note:   candidate expects 2 arguments, 1 provided
	(a_1);
	^

2015-09-11  Chun-wei Fan  <fanchunwei@src.gnome.org>

	MSVC Builds: Add "Install" Project

	This makes building the -mm stack easier by copying the headers and the
	built DLL, PDB and LIB files to a location where it can be picked up by
	the gtkmm stack automatically, when they are extracted in a common
	directory.  This is what is currently done with the GTK+ and Clutter
	stacks for Visual Studio builds.

2015-09-09  Chun-wei Fan  <fanchunwei@src.gnome.org>

	Update README on Visual Studio Builds

	Since the Visual Studio project files and the related sources have been
	updated to work with Visual Studio 2013, and that the test programs do
	run well there, update the README file to let people know the situation.

	https://bugzilla.gnome.org/show_bug.cgi?id=754082

2015-09-09  Chun-wei Fan  <fanchunwei@src.gnome.org>

	sigc++config.h.in: Allow Build for MSVC 2013

	MSVC 2013 does not have the C++-11 noexcept, so we need to define that to
	_NOEXCEPT for MSVC 2013.  Plus, since by default MSVC 2013 does not allow
	us to re-define keywords, though they may or may not be supported, we need
	to use the _ALLOW_KEYWORD_MACROS macro to allow this to happen.

	https://bugzilla.gnome.org/show_bug.cgi?id=754082

2015-09-08  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Update source of web page

	* docs/website/fragments/footer.html_fragment:
	* docs/website/fragments/html_declaration.html_fragment:
	* docs/website/devel.shtml:
	* docs/website/doc.shtml:
	* docs/website/index.shtml:
	* docs/website/link.shtml:
	* docs/website/stable.shtml: Fix or remove broken links. Remove the lists of
	supported compilers. Mention that a C++11 compiler is required and that
	support for lambdas has been removed. Bug #754082.

2015-09-07  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Update .gitignore

2015-09-03  Murray Cumming  <murrayc@murrayc.com>

	2.5.4

2015-09-03  Murray Cumming  <murrayc@murrayc.com>

	Update tests/.gitignore

2015-09-02  Chun-wei Fan  <fanchunwei@src.gnome.org>

	MSVC Builds: Use Windows Line Endings for .sln

	The .sln files need to have Windows/DOS line endings to work properly so
	that Windows can detect the Visual Studio version of the solution file.

2015-09-02  Chun-wei Fan  <fanchunwei@src.gnome.org>

	MSVC Builds: Add Forgotten Files

	The MSVC projects now use property sheets, but they were forgotten from
	dist in the previous commits.  Dist them... sorry!

2015-09-02  Chun-wei Fan  <fanchunwei@src.gnome.org>

	MSVC Builds: Remove MSVC 2005 and 2008 projects

	They are now unable to build libsigc++ at all, so drop them.

	https://bugzilla.gnome.org/show_bug.cgi?id=754082

2015-09-02  Chun-wei Fan  <fanchunwei@src.gnome.org>

	MSVC Builds: Rename MSVC_Net2010/ to MSVC_Net2013/

	Since libsigc++ now requires MSVC 2013 to build, the MSVC_Net2010 directory
	needs to be renamed to MSVC_Net2013, so that people will not be confused on
	what MSVC version is needed to build libsigc++.  Also remove MSVC_Net2005
	and MSVC_Net2008 from the distribution, as they are no longer able to build
	libsigc++.

	https://bugzilla.gnome.org/show_bug.cgi?id=754082

2015-09-01  Murray Cumming  <murrayc@murrayc.com>

	signal_base, trackable: Make move operations noexcept.

2015-09-01  Murray Cumming  <murrayc@murrayc.com>

	Added test_signal_move.

	This seems to work.

2015-09-01  Murray Cumming  <murrayc@murrayc.com>

	Added test_slot_move

	This seems to do what it should, acting much like regular slot copying.

2015-09-01  Murray Cumming  <murrayc@murrayc.com>

	Add test_trackable_move.

	It doesn't segfault, but I'm not sure it's doing what it should.
	See the TODO.

2015-09-01  Murray Cumming  <murrayc@murrayc.com>

	trackable: move constructor: null the src.

2015-09-01  Murray Cumming  <murrayc@murrayc.com>

	trackable: move assignment operator: null the src.

2015-09-01  Murray Cumming  <murrayc@murrayc.com>

	C++11: signal_base: Add move operations.

2015-09-01  Murray Cumming  <murrayc@murrayc.com>

	trackable: Add missing operator=(&&) implementation.

2015-09-01  Murray Cumming  <murrayc@murrayc.com>

	trackable: Add move operations.

	Also adding them to trackable_callback_list and makeing
	trackable_callback_list noncopyable, which I think is intended.

2015-09-01  Murray Cumming  <murrayc@murrayc.com>

	C++11: slot*: Add move operations.

2015-09-01  Murray Cumming  <murrayc@murrayc.com>

	C++11 slot_base: Add move operations.

	Improvements welcome.

2015-09-01  Murray Cumming  <murrayc@murrayc.com>

	slot_base::operator=(const &): Copy blocked_ too.

	So, if we do
	a = b;
	then a will be blocked if b was blocked. Otherwise it depends on
	whether a was blocked, which seems odd.

	If this is not the intended behaviour then we need a comment about it
	in operator=() and a test.

2015-09-01  Murray Cumming  <murrayc@murrayc.com>

	2.5.3

2015-08-31  Chun-wei Fan  <fanchunwei@src.gnome.org>

	MSVC Projects: Overhaul The Projects

	The former MSVC 2010 (2012) projects carried over quite a bit of cruft from
	the Visual Studio 2003 days, and there are a number of items that could be
	consolidated into ptoperty sheets, so it's time that the projects get a
	clean up and overhaul.  This is not unlike what was done to the glibmm
	projects some time ago.

	Consolidate the projects all into MSVC_Net2010, without subdirectories, as
	the property sheets will separate the object files of the various projects
	into their own places.

	This will also likely enable us to support MSVC 2015 in a more efficient
	way.

	Also, move the projects configs to MSVC 2013, as that is now the minimum
	version of MSVC required to build sigc++.

2015-08-14  Murray Cumming  <murrayc@murrayc.com>

	deduce_result_t: Add initial T_return template parameter.

	To make it clearer that this is how to use it.

2015-08-14  Murray Cumming  <murrayc@murrayc.com>

	tests: Use sigc::deduce_result_t<> instead of deduce_result_type<>::type.

	This removes the last use of sigc::deduce_result_type<>, allowing
	us to change the implementation of sigc::deduce_result_t more easily.

2015-08-14  Murray Cumming  <murrayc@murrayc.com>

	exception_catch.h: Generate deduce_result_type for the void specializations too.

	I guess this is correct and test_exception_catch still passes.
	Without this, it's actually using, for instance:
	sigc::deduce_result_type<T_arg1, T_Arg2>
	even though sigc::deduce_result_type<> should really be called with a result type
	first, like so:
	sigc::deduce_result_type<T_return, T_arg1, T_Arg2>

	Explicitly changing it to use
	sigc::deduce_result_type<T_return, T_Arg1, T_Arg2>
	or
	sigc::deduce_result_type<T_Arg1, T_Arg2>
	instead of just
	deduce_result_type<T_Arg1, T_Arg2>
	doesn't seem to break things either, probably out of luck,
	but changing it to define a type that it actually seems to expect seems
	cleaner, and makes it easier for us to change sigc::deduce_result_type.

2015-08-13  Murray Cumming  <murrayc@murrayc.com>

	C++11: deduce_result_type.h: Add and use a deduce_result_t<> alias.

	This simplifies the code a bit, by replacing use of this:
	typename deduce_result_type<SomeType1, SomeType2>::type
	with this:
	deduce_result_t<SomeType1, SomeType2>

	Note that the alias is a C++11 variadic template.
	Bug #753580

2015-08-13  Murray Cumming  <murrayc@murrayc.com>

	type_traits.h: Remove the unused type and pointer types.

	These were apparently never used.
	Bug #753580

2015-08-13  Murray Cumming  <murrayc@murrayc.com>

	type_trait: Define and use type_trait_pass/take_t aliases.

	This simplifies the code a bit, by replacing use of this:
	typename type_trait<SomeType>::take
	with this:
	type_trait_take_t<SomeType>
	Bug #753580

2015-08-13  Murray Cumming  <murrayc@murrayc.com>

	2.5.2

2015-08-13  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Remove the sigc++/object.h header

	Because it now contains no API.
	See https://bugzilla.gnome.org/show_bug.cgi?id=752560#c6

2015-08-12  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Update sigc++/.gitignore

2015-08-12  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Store sigc++/slot.h in git, don't generate it from m4

	* sigc++/macros/slot.h.m4: Remove.
	* sigc++/slot.h: New in git.
	* sigc++/filelist.am: Replace sigc++/macros/slot.h.m4 by sigc++/slot.h.
	See https://bugzilla.gnome.org/show_bug.cgi?id=752560#c6

2015-08-12  Murray Cumming  <murrayc@murrayc.com>

	Remove the (generated) sigc++/hide.h header.

	Because it now contains no API.
	See https://bugzilla.gnome.org/show_bug.cgi?id=752560#c6

	The generated sigc++/hide file did not include sigc++/adaptors/hide.h
	so it did not exist as a convenience.

2015-08-12  Murray Cumming  <murrayc@murrayc.com>

	Remove the (generated) sigc++/retype.h header.

	Because it now contains no API.
	See https://bugzilla.gnome.org/show_bug.cgi?id=752560#c6

	sigc++/macros/retype_h.m4 did define some m4 macros but these were
	not actually used. The generated sigc++/retype.h file did not
	include sigc++/adaptors/retype.h so it did not exist as a convenience.

2015-08-12  Murray Cumming  <murrayc@murrayc.com>

	Remove the (generated) sigc++/object_slot.h header.

	Because it now contains no API.
	See https://bugzilla.gnome.org/show_bug.cgi?id=752560#c6

2015-08-12  Murray Cumming  <murrayc@murrayc.com>

	Remove the (generated) method_slot.h header.

	Because it now contains no API.
	See https://bugzilla.gnome.org/show_bug.cgi?id=752560#c6

2015-08-12  Murray Cumming  <murrayc@murrayc.com>

	Remove the (generated) class_slot.h header.

	Because it now contains no API.
	See https://bugzilla.gnome.org/show_bug.cgi?id=752560#c6

2015-08-04  Chun-wei Fan  <fanchunwei@src.gnome.org>

	Visual Studio Builds: Move 2010 Projects to 2012

	Since the builds of the *mm stack are going to use C++11, this means that
	we can't build libsigc++ with MSVC 2005~2010 anymore, so we need to update
	the Visual Studio project files to version 2012 (11.0), so that we can
	still support building with Visual Studio, as it does support enough of
	C++11 features that is needed.

	Also clean up a little bit by dropping some of the unneeded items from the
	projects and solution files.

	These project files are clearly going to need more cleanup, and we should
	drop the MSVC_Net2005 and MSVC_Net2008 folders, and rename MSVC_Net2010 to
	MSVC_Net2012, but this commit will ensure that libsigc++ is indeed still
	buildable with Visual Studio, and we can support Visual Studio 2013 and
	2015 in a more efficient manner.

2015-08-03  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	C++11: Replace deprecated std::auto_ptr by std::unique_ptr

2015-07-26  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	C++11: visit_each_type<>(): Another check for the same type

	The rest of my suggested additions in bug 752560 comment 3.
	The #include <type_traits> are necessary, if header files are included
	one-by-one, and not via #include <sigc++/sigc++.h>.

2015-07-25  Murray Cumming  <murrayc@murrayc.com>

	C++11: visit_each<>: Check for the same type as well as the base.

	As suggested by Kjell Ahlstedt here:
	https://bugzilla.gnome.org/show_bug.cgi?id=752560#c3

	This fixes the test cases.

2015-07-25  Murray Cumming  <murrayc@murrayc.com>

	C++11: Use std::is_base_of<> instead of our sigc::is_base_and_derived<>.

	As suggested by Kjell's comment here:
	https://git.gnome.org/browse/libsigc++2/commit/sigc++/type_traits.h?id=1e9f65c978be67da71f15231643d504e06a6af3f
	This also removes sigc::is_base_and_derived<> which should cause
	only a slight API change but no ABI change.

	Bug #752560

2015-07-19  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Update README, remove TODO

	* README: Remove lambda from the list of directories.
	Remove the list of compatible compilers. It has become obsolete now that
	libsigc++ uses C++11 features.
	* TODO: Remove. It's obsolete. TODO comments are now scattered in
	the source code.

2015-07-18  Murray Cumming  <murrayc@murrayc.com>

	C++11: Use of range-based for loops.

2015-07-18  Murray Cumming  <murrayc@murrayc.com>

	C++11: More use of auto.

2015-07-18  Murray Cumming  <murrayc@murrayc.com>

	C++11: Use auto.

	Trying to avoid using auto where its a specific type that we are
	trying to test for.

2015-07-18  Murray Cumming  <murrayc@murrayc.com>

	Use -Wformat-security with --enable-warnings=fatal.

	Because we use it in glibmm already. No code changes were necessary.

2015-07-18  Murray Cumming  <murrayc@murrayc.com>

	Use -Wshadow with --enable-warnings=fatal.

2015-07-18  Murray Cumming  <murrayc@murrayc.com>

	Revert "C++11: Use std::is_base_of<> instead of our sigc::is_base_and_derived<>."

	This reverts commit bf89034e116d4d9eb761ceb4597c69f0f2b9c597.
	I didn't meat to push that quite yet.

2015-07-18  Murray Cumming  <murrayc@murrayc.com>

	C++11: Use std::is_base_of<> instead of our sigc::is_base_and_derived<>.

	As suggested by Kjell's comment here:
	https://git.gnome.org/browse/libsigc++2/commit/sigc++/type_traits.h?id=1e9f65c978be67da71f15231643d504e06a6af3f
	This also removes sigc::is_base_and_derived<> which should cause
	only a slight API change but no ABI change.

2015-07-18  Murray Cumming  <murrayc@murrayc.com>

	C++11: Use of nullptr instead of 0.

2015-07-18  Murray Cumming  <murrayc@murrayc.com>

	2.5.1

	2.5.1

2015-07-17  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Require mm-common 0.9.8

2015-07-17  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Remove remaining parts of the sigc::lambda documentation

	* docs/index.html: Remove link to group__lambdas.html.
	* sigc++/adaptors/macros/bind.h.m4:
	* sigc++/adaptors/macros/compose.h.m4:
	* sigc++/adaptors/macros/hide.h.m4: Remove talk of sigc::group().
	* sigc++/.gitignore:
	* tests/.gitignore: Remove files that are no longer generated. Bug #672555.

2015-07-17  Murray Cumming  <murrayc@murrayc.com>

	Remove remaining parts of the sigc::lambda API.

	The remaining API, defined in a .cc file, does not actually end up
	being used by applications, so we can safely remove it.
	See https://bugzilla.gnome.org/show_bug.cgi?id=672555#c21

2015-07-17  Murray Cumming  <murrayc@murrayc.com>

	Remove deprecated sigc::lambda API that is only in headers.

	So this is an API removal (of deprecated API) but not an ABI change.
	The remaining deprecated API in the headers is needed by the definitions
	in lambda.cc.m4.
	Bug #672555

2015-07-14  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	C++11: Avoid the need for SIGC_FUNCTORS_DEDUCE_RESULT_TYPE_WITH_DECLTYPE

	* sigc++/adaptors/lambda/macros/base.h.m4:
	* sigc++/adaptors/lambda/macros/group.h.m4:
	* sigc++/adaptors/macros/track_obj.h.m4:
	* sigc++/macros/signal.h.m4: Remove all talk about
	SIGC_FUNCTORS_DEDUCE_RESULT_TYPE_WITH_DECLTYPE.
	* sigc++/functors/slot_base.h: Mentioned that
	SIGC_FUNCTORS_DEDUCE_RESULT_TYPE_WITH_DECLTYPE is not needed any more.
	* tests/test_cpp11_lambda.cc:
	* tests/test_track_obj.cc: Remove calls to
	SIGC_FUNCTORS_DEDUCE_RESULT_TYPE_WITH_DECLTYPE and tests for C++11 capability.
	* sigc++/functors/macros/functor_trait.h.m4: Add class
	can_deduce_result_type_with_decltype<>. Use it as default value for the new
	template parameter I_can_use_decltype in struct functor_trait<>.
	Bug #672555.
	Murray Cumming made the changes of all files except functor_trait.h.m4.

2015-07-14  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Require C++11

	* configure.ac: Use MM_AX_CXX_COMPILE_STDCXX_11 to check for compiler
	support for C++11 and use it (--std=c++11 for current versions of
	g++). Bug #672555.

2015-02-28  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	2.4.1

2015-02-28  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Docs: Update for Doxygen 1.8.9

	* docs/reference/Doxyfile.in: Update for Doxygen 1.8.9.

2014-10-23  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Tests: Improve test_disconnect_during_emit

	* tests/test_disconnect_during_emit.cc: Test that the slot is really
	disconnected during signal emission.

2014-10-23  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	slot_base: Let the assignment operator destroy the slot

	* sigc++/functors/slot_base.cc: slot_base's assignment operator shall
	destroy the old slot_rep even if the assigned slot is empty. Bug #738602.

2014-09-15  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	2.4.0

2014-09-15  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Docs: Use doxygen-extra.css

	* configure.ac: Require mm-common 0.9.7.
	* docs/.gitignore: Ignore doxygen-extra.css.
	* docs/reference/Doxyfile.in: Use doxygen-extra.css instead of doxygen.css.

2014-09-11  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	doap: Add <description>

2014-08-12  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	test_lambda: Fix for MS Visual C++ 2013

	* tests/test_lambda.cc: Don't rely on implicit conversion from std::ostream
	to bool. Instead, hide a problematic slot return type with sigc::hide_return().
	Bug #734368.

2014-08-08  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Add an include in limit_reference.h

	* sigc++/macros/limit_reference.h.m4: limit_reference.h must include
	visit_each.h, with the primary definition of template struct visitor.
	https://mail.gnome.org/archives/libsigc-list/2014-August/msg00001.html

2014-08-01  Andre Klapper  <a9016009@gmx.de>

	doap: add <programming-language>

2014-08-01  Olav Vitters  <olav@vitters.nl>

	doap: link tarball name and git module

2014-07-31  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	2.3.2

2014-07-31  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Remove .gitattributes

	* .gitattributes: Instructed git to use a custom merge function for
	merging ChangeLog. Might have been useful, but it's not any more.

2014-07-30  Olav Vitters  <olav@vitters.nl>

	doap category core

2014-07-29  Ryan Beasley  <rbeasley@vmware.com>

	Tests: Enable C++11 lambda expressions with MS Visual Studio 2012 and later

	* tests/test_cpp11_lambda.cc:
	* tests/test_track_obj.cc: Compile C++11 lambda expressions if
	_MSC_VER >= 1700. Bug #733752.

2014-07-28  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Documentation: Emphasize that signals are ref counted

	* sigc++/signal_base.h: Emphasize that a sigc::signal holds a pointer to
	a ref counted signal_impl. Bug #611941.

2014-07-27  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Add test_visit_each to MSVC_Net2010

	* MSVC_Net2010/filelist.am: Add new project files.
	* MSVC_Net2010/libsigc++2.sln: Add new project.
	* MSVC_Net2010/tests/test_visit_each/: New test case. Bug #724496.

2014-07-27  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Tests: Add test_visit_each

	* tests/.gitignore:
	* tests/Makefile.am: Add test_visit_each.
	* tests/test_visit_each.cc: New file. Bug #724496.

2014-07-27  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Replace visit_each() overloads by struct visitor<>

	Note: This patch breaks API for some users, but it does not break ABI.
	Only users who have added their own visit_each() overloads are affected by
	the API break. Their programs will still compile, but there will be run-time
	errors, if they rely on auto-disconnection of slots.
	Updated instructions for users who implement their own adaptors are found in
	the description of sigc::adapts<>.

	* sigc++/adaptors/bound_argument.h:
	* sigc++/adaptors/macros/adaptor_trait.h.m4:
	* sigc++/adaptors/macros/bind.h.m4:
	* sigc++/adaptors/macros/bind_return.h.m4:
	* sigc++/adaptors/macros/compose.h.m4:
	* sigc++/adaptors/macros/exception_catch.h.m4:
	* sigc++/adaptors/macros/hide.h.m4:
	* sigc++/adaptors/macros/retype.h.m4:
	* sigc++/adaptors/macros/retype_return.h.m4:
	* sigc++/adaptors/macros/track_obj.h.m4:
	* sigc++/adaptors/lambda/macros/base.h.m4:
	* sigc++/adaptors/lambda/macros/group.h.m4:
	* sigc++/adaptors/lambda/macros/operator.h.m4:
	* sigc++/functors/macros/mem_fun.h.m4:
	* sigc++/macros/limit_reference.h.m4:
	* sigc++/visit_each.h: Replace overloads of visit_each<>() by
	specializations of struct visitor<> with a specialized member function
	do_visit_each<>(). Qualify all calls to visit_each() with sigc:: to avoid
	argument-dependent lookup.
	* sigc++/functors/macros/slot.h.m4: Qualify the calls to visit_each_type()
	with sigc:: to avoid argument-dependent lookup.
	* tests/test_functor_trait.cc: Fix the expected result now when the test
	really works.
	Thanks to Ryan Beasley <rbeasley@vmware.com>, bug #724496.

2014-07-25  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	signal_impl::notify(): Don't delete signal_impl during erase()

	* sigc++/signal_base.cc: signal_impl::notify() and sweep(): Don't delete
	signal_impl while its slot list is being manipulated. Without this fix,
	tests/test_bind_refptr crashes in MS Visual C++ in debug mode.
	The behaviour without the fix is risky, and shall be avoided. Bug #564005.

2014-07-24  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Update the signal_impl::notify() documentation

	* sigc++/signal_base.h: Update the signal_impl::notify() documentation.
	It should have been updated when notify() was updated. Bug #167714.

2014-07-24  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Add a maintainer in the DOAP file

2014-07-18  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Update MSVC_Net2010

	* MSVC_Net2010/filelist.am: Add new project files.
	* MSVC_Net2010/libsigc++2.sln: Add new projects.
	* MSVC_Net2010/libsigc++2.vcxproj.filters:
	* MSVC_Net2010/libsigc++2.vcxproj: Update the list of header files.
	* MSVC_Net2010/tests/test_*/test_*.vcxproj.filters:
	* MSVC_Net2010/tests/test_*/test_*.vcxproj: Add testutilities.[h|cc].
	* MSVC_Net2010/tests/test_accum_iter/:
	* MSVC_Net2010/tests/test_bind_ref/:
	* MSVC_Net2010/tests/test_bind_refptr/:
	* MSVC_Net2010/tests/test_copy_invalid_slot/:
	* MSVC_Net2010/tests/test_cpp11_lambda/:
	* MSVC_Net2010/tests/test_custom/:
	* MSVC_Net2010/tests/test_lambda/:
	* MSVC_Net2010/tests/test_limit_reference/:
	* MSVC_Net2010/tests/test_slot_disconnect/:
	* MSVC_Net2010/tests/test_track_obj/: New test case projects. Bug #724496.

2014-07-14  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Fix 'make check' with clang++ and --enable-warnings=fatal

	* tests/test_cpp11_lambda.cc:
	* tests/test_deduce_result_type.cc:
	* tests/test_track_obj.cc: Don't define functions which are not used.
	The clang++ compiler considers unused functions an error, when libsigc++ is
	configured with --enable-warnings=fatal. Bug #724496.

2013-10-28  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Documentation: Talk less about std::function

	* sigc++/functors/macros/slot.h.m4:
	* sigc++/functors/slot_base.h: Remove the examples with std::function.
	Add an example with a C++11 lambda expression.
	https://mail.gnome.org/archives/libsigc-list/2013-October/msg00003.html

2013-10-27  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Update .gitignore files

	* build/.gitignore:
	* tests/.gitignore: Ignore files generated by automake 1.13 and 'make check'.

2013-10-26  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Documentation: Mention std::function and std::bind() in more comments

	* sigc++/functors/macros/functor_trait.h.m4: Mention that
	SIGC_FUNCTORS_DEDUCE_RESULT_TYPE_WITH_DECLTYPE does not support functors
	with overloaded operator()().
	* sigc++/adaptors/macros/track_obj.h.m4:
	* sigc++/functors/macros/slot.h.m4:
	* sigc++/functors/slot_base.h:
	* sigc++/signal_base.h: Mention std::function as an alternative to
	sigc::slot.
	* sigc++/macros/signal.h.m4: connect(): Describe why the result of
	std::bind() can't be connected directly to a signal.

2013-10-26  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Fix test_cpp11_lambda for gcc 4.8

	* tests/test_cpp11_lambda.cc: Remove an unneccesary std::ref().
	Show that std::bind() can be assigned to a slot, if it's combined with
	std::function.

2013-07-30  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	signal_base, signal_impl: Speed up disconnection of slots.

	* sigc++/signal_base.cc: Tell signal_impl::notify() which slot is being
	disconnected. Execution time is then usually O(1) instead of O(n), where n
	is the size of the slot list. Disconnect all connected slots when a signal is
	deleted. Disconnect slots before they are erased from a signal's slot list.
	Bug #167714.

2013-07-03  José Alburquerque  <jaalburquerque@gmail.com>

	Move to a generated ChangeLog.

2013-07-02  José Alburquerque  <jaalburquerque@gmail.com>

	Auto-generate the ChangeLog from the git log for 'make dist'.

	* Makefile.am: Include the dist-changelog.am file copied in build/
	from mm-common so that the ChangeLog is automatically generated from
	the git commit messages on 'make dist'.

2013-05-01  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Don't use __file__ in the FIREWALL m4 macro.

	* sigc++/adaptors/lambda/macros/group.h.m4:
	* sigc++/adaptors/macros/*.h.m4:
	* sigc++/functors/macros/*.h.m4:
	* sigc++/macros/class_slot.h.m4:
	* sigc++/macros/hide.h.m4:
	* sigc++/macros/limit_reference.h.m4:
	* sigc++/macros/method_slot.h.m4:
	* sigc++/macros/retype.h.m4:
	* sigc++/macros/slot.h.m4: Replace __FIREWALL__ with _FIREWALL(filename).
	* sigc++/macros/template.macros.m4: Replace __FIREWALL__ with _FIREWALL,
	taking a parameter. Don't use __file__ to generate the name of the C++
	preprocessor macro. __file__ may expand to an absolute path, containing
	almost all sorts of special characters and being excessively long.
	Bug #699168.

2013-04-11  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Use DOXYGEN_SHOULD_SKIP_THIS consistently.

	* docs/reference/Doxyfile.in: EXTRACT_ALL=YES, like in most mm packages.
	* sigc++/sigc++.h: Mention that the reference manual contains only some of
	the template specializations.
	* sigc++/adaptors/bound_argument.h:
	* sigc++/adaptors/lambda/macros/base.h.m4:
	* sigc++/adaptors/lambda/macros/group.h.m4:
	* sigc++/adaptors/macros/adaptor_trait.h.m4:
	* sigc++/adaptors/macros/bind.h.m4:
	* sigc++/adaptors/macros/bind_return.h.m4:
	* sigc++/adaptors/macros/compose.h.m4:
	* sigc++/adaptors/macros/deduce_result_type.h.m4:
	* sigc++/adaptors/macros/exception_catch.h.m4:
	* sigc++/adaptors/macros/hide.h.m4:
	* sigc++/adaptors/macros/retype.h.m4:
	* sigc++/adaptors/macros/retype_return.h.m4:
	* sigc++/adaptors/macros/track_obj.h.m4:
	* sigc++/functors/macros/functor_trait.h.m4:
	* sigc++/functors/macros/mem_fun.h.m4:
	* sigc++/macros/limit_reference.h.m4:
	* sigc++/type_traits.h:
	* sigc++/visit_each.h: Use DOXYGEN_SHOULD_SKIP_THIS to mark what Doxygen
	shall not extract.

2013-03-20  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Suppress erroneous links in documentation.

	* sigc++/adaptors/lambda/macros/base.h.m4:
	* sigc++/adaptors/lambda/macros/group.h.m4:
	* sigc++/adaptors/lambda/macros/select.h.m4: Doxygen links std::bind to
	sigc::bind. Suppress these links. No link is better than the wrong link.

2013-03-19  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Deprecate libsigc++ lambdas, sigc::group(), sigc::var().

	* configure.ac: Add MM_ARG_DISABLE_DEPRECATED_API(SIGCXX).
	* sigc++/adaptors/lambda/macros/base.h.m4:
	* sigc++/adaptors/lambda/macros/group.h.m4:
	* sigc++/adaptors/lambda/macros/lambda.cc.m4:
	* sigc++/adaptors/lambda/macros/operator.h.m4:
	* sigc++/adaptors/lambda/macros/select.h.m4: Deprecate everything.
	* sigc++/macros/template.macros.m4: Add deprecation macros.
	* sigc++config.h.in: Add #undef SIGCXX_DISABLE_DEPRECATED.
	* tests/test_lambda.cc: Skip test if SIGCXX_DISABLE_DEPRECATED is defined.
	Bug #672555.

2013-02-26  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Add track_obj() and test_track_obj.

	* sigc++/.gitignore: Add adaptors/track_obj.h.
	* sigc++/adaptors/adaptors.h: Add sigc++/adaptors/track_obj.h.
	* sigc++/adaptors/lambda/macros/group.h.m4:
	* sigc++/adaptors/macros/adaptor_trait.h.m4: Mention track_obj() in the
	documentation.
	* sigc++/adaptors/macros/track_obj.h.m4: New file.
	* sigc++/filelist.am: Add track_obj.h.m4 and track_obj.h.
	* tests/.gitignore:
	* tests/Makefile.am: Add test_track_obj.
	* tests/test_cpp11_lambda.cc: Use track_obj() to test auto-disconnection.
	* tests/test_track_obj.cc: New test case.
	Bug #672555.

2013-01-07  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Documentation: Fix many warnings from Doxygen.

	* configure.ac: Require mm-common 0.9.6 or later.
	* docs/reference/Doxyfile.in: Don't warn for undocumented classes and structs.
	* sigc++/adaptors/macros/bind.h.m4:
	* sigc++/adaptors/macros/bind_return.h.m4:
	* sigc++/adaptors/macros/compose.h.m4:
	* sigc++/adaptors/macros/hide.h.m4:
	* sigc++/connection.h:
	* sigc++/macros/limit_reference.h.m4: Make all parameter names in @param
	commands equal to the corresponding names in the function declarations.
	* sigc++/signal_base.h: Remove an extraneous period that confuses Doxygen.
	* sigc++/type_traits.h: Add a missing @code/@endcode pair.

2012-10-18  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Test cases: Report pass/fail with exit status.

	* tests/testutilities.[h|cc]: New files. Code common to all test cases.
	* tests/*.cc: Use class TestUtilities. Don't print anything
	if the test passes. Return EXIT_FAILURE if the test fails.
	* tests/Makefile.am: Add testutilities.[h|cc] to all test cases.
	Bug #684956.

2012-10-18  Murray Cumming  <murrayc@murrayc.com>

	2.3.1

2012-10-18  Murray Cumming  <murrayc@murrayc.com>

	Update the Doxyfile.in syntax.

	* docs/reference/Doxyfile.in: By running doxygen -u
	on it.

2012-10-17  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Add some missing newin{}.

	* docs/reference/Doxyfile.in: Add ALIASES newin.
	* sigc++/functors/macros/functor_trait.h.m4: Add newin{2,2,11} to
	SIGC_FUNCTORS_DEDUCE_RESULT_TYPE_WITH_DECLTYPE.
	* sigc++/signal_base.h: Add newin{2,4} to signal_impl::blocked(), block() and
	signal_base::blocked(), block(), unblock(). Bug #153780.

2012-10-12  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	signal_base: Add blocked(), block(), unblock().

	* sigc++/signal_base.[h|cc]: Add signal_impl::blocked(), block() and
	signal_base::blocked(), block(), unblock(). Bug #153780.

2012-09-23  Murray Cumming  <murrayc@murrayc.com>

	2.2.11

2012-09-20  Andris Pavenis  <andris.pavenis@iki.fi>

	Fix comma operator in lambda expressions.

	* sigc++/adaptors/lambda/macros/operator.h.m4: Add lambda_action<>
	specialization for comma operator (operator,()).
	* tests/test_cpp11_lambda.cc:
	* tests/test_lambda.cc: Add a test case for the comma operator. Bug #342911.

2012-09-19  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Add SIGC_FUNCTORS_DEDUCE_RESULT_TYPE_WITH_DECLTYPE.

	* sigc++/adaptors/lambda/macros/base.h.m4:
	* sigc++/adaptors/lambda/macros/group.h.m4:
	* sigc++/functors/macros/functor_trait.h.m4:
	* tests/test_cpp11_lambda.cc: Replace the preprocessor macro
	SIGC_FUNCTORS_DEDUCE_RESULT_TYPE_WITH(C_keyword) with
	SIGC_FUNCTORS_DEDUCE_RESULT_TYPE_WITH_DECLTYPE. Bug #672555.

2012-09-10  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Correct a bug number in ChangeLog.

2012-09-10  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Use std::size_t and std::ptrdiff_t.

	* sigc++/macros/signal.h.m4: Use std::size_t and std::ptrdiff_t instead
	of ::size_t and ::ptrdiff_t. Only the std versions are required to be
	declared in <cstddef>.
	* sigc++/signal_base.h: Use std::size_t instead of ::size_t. (I did not change
	MSVC++-only code in this file and other files.)

2012-09-07  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Fix 'make check' with gcc 4.7.

	* sigc++/adaptors/lambda/macros/base.h.m4: Define sigc::unwrap_lambda_value()
	before it's used in sigc::lambda::operator[]() and operator=().
	* sigc++/adaptors/lambda/macros/group.h.m4: Fix the C++11 examples in the
	documentation as in test_cpp11_lambda.cc.
	* tests/test_cpp11_lambda.cc: Only variables with automatic storage duration
	shall be captured in C++11 lambda expressions.

2012-08-28  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Update .gitignore and tests/.gitignore

	* .gitignore: Add *~ (gedit's backup files).
	* tests/.gitignore: Add missing executable test files.

2012-08-28  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Add SIGC_FUNCTORS_DEDUCE_RESULT_TYPE_WITH for C++11 lambda expressions.

	* sigc++/functors/macros/functor_trait.h.m4: Add the preprocessor macro
	SIGC_FUNCTORS_DEDUCE_RESULT_TYPE_WITH(C_keyword), which makes it possible to
	assign C++11 lambda expressions with any return type to slots.
	Thanks to Chow Loong Jin, who posted similar code on libsigc-list.
	* sigc++/adaptors/lambda/macros/base.h.m4:
	* sigc++/adaptors/lambda/macros/group.h.m4: Add information on C++11 lambda
	expressions to the documentation of lambda expressions and sigc::group().
	* tests/Makefile.am: Add test_cpp11_lambda.cc.
	* tests/test_cpp11_lambda.cc: New test case, showing that most uses of
	libsigc++'s lambda expressions can be replaced by standard C++11 lambda
	expressions. Bug #672555.

2012-03-19  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Enable test_lambda in 'make check'.

	* tests/Makefile.am: Enable test_lambda in 'make check'.
	* tests/test_lambda.cc: Comment out the tests with sigc::ref() in lambda
	functions' parameter lists. See Bug #669128.

2012-02-29  Andre Klapper  <ak-47@gmx.net>

	Add missing bug-database entry to DOAP file

2011-09-22  Krzesimir Nowak  <qdlacz@gmail.com>

	Don't use obsolete macros.

	* autogen.sh: Warn about everything during autoreconf.
	* build/cxx.m4:
	* build/cxx_std.m4: Replaced AC_TRY_COMPILE with AC_COMPILE_IFELSE.
	* configure.ac: Use LT_INIT.

2011-07-25  Murray Cumming  <murrayc@murrayc.com>

	2.2.10

2011-07-21  Thomas Rydzynski  <qsorix@rydznet.pl>

	Mention visit_each() in the documentation of sigc::adapts.

	* sigc++/adaptors/macros/adaptor_trait.h.m4: Mention that a user-supplied
	adaptor must be accompanied by a specialization of template function
	visit_each(). Correct some minor errors in the example of a user-supplied
	adaptor. Bug #486373.

2011-07-20  Murray Cumming  <murrayc@murrayc.com>

	Missing changes from the previous commit.

2011-07-19  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Add a test case for the previous commit.

	* tests/Makefile.am:
	* tests/test_bind_refptr.cc: A version of this test is also in glibmm.
	Note that this includes a copy/paste of RefPtr.
	See Bug #564005#14

2011-07-19  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	slot_rep: Avoid access to deleted object in notify().

	* sigc++/functors/slot_base.cc: slot_rep::notify() calls disconnect() before
	destroy(). If disconnect() has deleted the slot_rep object, destroy() is not
	called. Bug #564005.

2011-05-24  Olav Vitters  <olav@vitters.nl>

	Use tar-ustar instead of tar-pax to ensure OpenBSD compatibility

2011-03-08  Murray Cumming  <murrayc@murrayc.com>

	2.2.9

2011-02-22  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	trackable: Avoid calling the same callback function twice

	* sigc++/trackable.cc: Invalidate a callback function entry in
	trackable_callback_list::remove_callback() when the list is being cleared.
	Bug 589202.

2011-02-04  Kalev Lember  <kalev@smartlink.ee>

	Fix the build with GCC 4.6

	* sigc++/signal_base.h: Include <cstddef> for size_t.

2010-10-12  David King  <davidk@openismus.com>

	Update .gitignore and tests/.gitignore

2010-10-12  David King  <davidk@openismus.com>

	Documentation changes

	* *.h.m4: Minor changes to documentation to fix up code example
	formatting, by removing the additional two spaces of indentation.
	Additionally, fix some spelling and grammar mistakes and typos.

2010-09-26  Armin Burgmeier  <armin@arbur.net>

	Add support for 64 bit to MSVC project files

2010-09-27  Armin Burgmeier  <armin@arbur.net>

	* MSVC_Net2005/libsigc++2.sln:
	* MSVC_Net2005/libsigc++2.vcproj:
	* MSVC_Net2005/tests/test_accumulated/test_accumulated.vcproj:
	* MSVC_Net2005/tests/test_bind/test_bind.vcproj:
	* MSVC_Net2005/tests/test_bind_return/test_bind_return.vcproj:
	* MSVC_Net2005/tests/test_compose/test_compose.vcproj:
	* MSVC_Net2005/tests/test_deduce_result_type/test_deduce_result_type.vcproj:
	* MSVC_Net2005/tests/test_disconnect/test_disconnect.vcproj:
	* MSVC_Net2005/tests/test_disconnect_during_emit/test_disconnect_during_emit.vcproj:
	* MSVC_Net2005/tests/test_exception_catch/test_exception_catch.vcproj:
	* MSVC_Net2005/tests/test_functor_trait/test_functor_trait.vcproj:
	* MSVC_Net2005/tests/test_hide/test_hide.vcproj:
	* MSVC_Net2005/tests/test_mem_fun/test_mem_fun.vcproj:
	* MSVC_Net2005/tests/test_ptr_fun/test_ptr_fun.vcproj:
	* MSVC_Net2005/tests/test_retype/test_retype.vcproj:
	* MSVC_Net2005/tests/test_retype_return/test_retype_return.vcproj:
	* MSVC_Net2005/tests/test_signal/test_signal.vcproj:
	* MSVC_Net2005/tests/test_size/test_size.vcproj:
	* MSVC_Net2005/tests/test_slot/test_slot.vcproj:
	* MSVC_Net2005/tests/test_trackable/test_trackable.vcproj:
	* MSVC_Net2008/libsigc++2.sln:
	* MSVC_Net2008/libsigc++2.vcproj:
	* MSVC_Net2008/tests/test_accumulated/test_accumulated.vcproj:
	* MSVC_Net2008/tests/test_bind/test_bind.vcproj:
	* MSVC_Net2008/tests/test_bind_return/test_bind_return.vcproj:
	* MSVC_Net2008/tests/test_compose/test_compose.vcproj:
	* MSVC_Net2008/tests/test_deduce_result_type/test_deduce_result_type.vcproj:
	* MSVC_Net2008/tests/test_disconnect/test_disconnect.vcproj:
	* MSVC_Net2008/tests/test_disconnect_during_emit/test_disconnect_during_emit.vcproj:
	* MSVC_Net2008/tests/test_exception_catch/test_exception_catch.vcproj:
	* MSVC_Net2008/tests/test_functor_trait/test_functor_trait.vcproj:
	* MSVC_Net2008/tests/test_hide/test_hide.vcproj:
	* MSVC_Net2008/tests/test_mem_fun/test_mem_fun.vcproj:
	* MSVC_Net2008/tests/test_ptr_fun/test_ptr_fun.vcproj:
	* MSVC_Net2008/tests/test_retype/test_retype.vcproj:
	* MSVC_Net2008/tests/test_retype_return/test_retype_return.vcproj:
	* MSVC_Net2008/tests/test_signal/test_signal.vcproj:
	* MSVC_Net2008/tests/test_size/test_size.vcproj:
	* MSVC_Net2008/tests/test_slot/test_slot.vcproj:
	* MSVC_Net2008/tests/test_trackable/test_trackable.vcproj:
	* MSVC_Net2010/libsigc++2.vcxproj:
	* MSVC_Net2010/tests/test_accumulated/test_accumulated.vcxproj:
	* MSVC_Net2010/tests/test_bind/test_bind.vcxproj:
	* MSVC_Net2010/tests/test_bind_return/test_bind_return.vcxproj:
	* MSVC_Net2010/tests/test_compose/test_compose.vcxproj:
	* MSVC_Net2010/tests/test_deduce_result_type/test_deduce_result_type.vcxproj:
	* MSVC_Net2010/tests/test_disconnect/test_disconnect.vcxproj:
	* MSVC_Net2010/tests/test_disconnect_during_emit/test_disconnect_during_emit.vcxproj:

2010-09-26  Armin Burgmeier  <armin@arbur.net>

	Add test_accumulated to the MSVC projects

2010-09-27  Armin Burgmeier  <armin@arbur.net>

	* MSVC_Net2005/libsigc++2.sln:
	* MSVC_Net2005/tests/test_accumulated/test_accumulated.vcproj:
	* MSVC_Net2008/libsigc++2.sln:
	* MSVC_Net2008/tests/test_accumulated/test_accumulated.vcproj: Add
	test_accumulated to the MSVC projects.

2010-09-20  Armin Burgmeier  <armin@arbur.net>

	Added MSVC 2010 project files

2010-09-19  Armin Burgmeier  <armin@arbur.net>

	* MSVC_Net2010/filelist.am:
	* MSVC_Net2010/libsigc++2.sln:
	* MSVC_Net2010/libsigc++2.vcxproj:
	* MSVC_Net2010/libsigc++2.vcxproj.filters:
	* MSVC_Net2010/sigc.rc.in:
	* MSVC_Net2010/tests/test_accumulated/test_accumulated.vcxproj:
	* MSVC_Net2010/tests/test_accumulated/test_accumulated.vcxproj.filters:
	* MSVC_Net2010/tests/test_bind/test_bind.vcxproj:
	* MSVC_Net2010/tests/test_bind/test_bind.vcxproj.filters:
	* MSVC_Net2010/tests/test_bind_return/test_bind_return.vcxproj:
	* MSVC_Net2010/tests/test_bind_return/test_bind_return.vcxproj.filters:
	* MSVC_Net2010/tests/test_compose/test_compose.vcxproj:
	* MSVC_Net2010/tests/test_compose/test_compose.vcxproj.filters:
	* MSVC_Net2010/tests/test_deduce_result_type/test_deduce_result_type.vcxproj:
	* MSVC_Net2010/tests/test_deduce_result_type/test_deduce_result_type.vcxproj.filters:
	* MSVC_Net2010/tests/test_disconnect/test_disconnect.vcxproj:
	* MSVC_Net2010/tests/test_disconnect/test_disconnect.vcxproj.filters:
	* MSVC_Net2010/tests/test_disconnect_during_emit/test_disconnect_during_emit.vcxproj:
	* MSVC_Net2010/tests/test_disconnect_during_emit/test_disconnect_during_emit.vcxproj.filters:
	* MSVC_Net2010/tests/test_exception_catch/test_exception_catch.vcxproj:
	* MSVC_Net2010/tests/test_exception_catch/test_exception_catch.vcxproj.filters:
	* MSVC_Net2010/tests/test_functor_trait/test_functor_trait.vcxproj:
	* MSVC_Net2010/tests/test_functor_trait/test_functor_trait.vcxproj.filters:
	* MSVC_Net2010/tests/test_hide/test_hide.vcxproj:
	* MSVC_Net2010/tests/test_hide/test_hide.vcxproj.filters:
	* MSVC_Net2010/tests/test_mem_fun/test_mem_fun.vcxproj:
	* MSVC_Net2010/tests/test_mem_fun/test_mem_fun.vcxproj.filters:
	* MSVC_Net2010/tests/test_ptr_fun/test_ptr_fun.vcxproj:
	* MSVC_Net2010/tests/test_ptr_fun/test_ptr_fun.vcxproj.filters:
	* MSVC_Net2010/tests/test_retype/test_retype.vcxproj:
	* MSVC_Net2010/tests/test_retype/test_retype.vcxproj.filters:
	* MSVC_Net2010/tests/test_retype_return/test_retype_return.vcxproj:
	* MSVC_Net2010/tests/test_retype_return/test_retype_return.vcxproj.filters:
	* MSVC_Net2010/tests/test_signal/test_signal.vcxproj:
	* MSVC_Net2010/tests/test_signal/test_signal.vcxproj.filters:
	* MSVC_Net2010/tests/test_size/test_size.vcxproj:
	* MSVC_Net2010/tests/test_size/test_size.vcxproj.filters:
	* MSVC_Net2010/tests/test_slot/test_slot.vcxproj:
	* MSVC_Net2010/tests/test_slot/test_slot.vcxproj.filters:
	* MSVC_Net2010/tests/test_trackable/test_trackable.vcxproj:
	* MSVC_Net2010/tests/test_trackable/test_trackable.vcxproj.filters:

	* Makefile.am:
	* configure.ac: Added project files for Visual Studio 2010.

2010-06-05  David King  <davidk@openismus.com>

	Small website updates

	* docs/index.html: Remove broken namespace links.
	* docs/website/doc.shtml: Link to library.gnome.org tutorial and API
	reference.

2010-06-04  Murray Cumming  <murrayc@murrayc.com>

	2.2.8

2010-06-04  Murray Cumming  <murrayc@murrayc.com>

	Manual: Add an id=index attribute in case that helps library.gnome.org.

	* docs/manual/libsigc_manual.xml: Add it to the <book> tag.

2010-05-04  Murray Cumming  <murrayc@murrayc.com>

	2.2.7

2010-05-04  Murray Cumming  <murrayc@murrayc.com>

	Documentation improvements.

	* docs/manual/libsigc_manual.xml: Remove Marshallers section because
	it is apparently outdated and there is no example code to test it.
	This fixes bug #417924 (Michael Ekstrand)
	Also changed LibSigC++ to libsigc++ for consistency.
	* sigc++/sigc++.h: Main page text: Rearranged slightly.

2010-04-27  David King  <davidk@openismus.com>

	Improvements to main page documentation

	* sigc++/sigc++.h: Minor improvements.

2010-04-23  David King  <davidk@openismus.com>

	Add main page to Doxygen documentation

	* docs/Makefile.am: Parse sigc++/sigc++.h for documentation.
	* sigc++/sigc++.h: Add main page to Doxygen documentation.

2010-04-23  David King  <davidk@openismus.com>

	Fix the functors Doxygen group in the m4 files

	* sigc++/functors/macros/functor_trait.h.m4:
	* sigc++/functors/macros/mem_fun.h.m4:
	* sigc++/functors/macros/ptr_fun.h.m4: Rename functors to
	sigcfunctors.

2010-04-16  Murray Cumming  <murrayc@murrayc.com>

	2.2.6

2010-04-16  Murray Cumming  <murrayc@murrayc.com>

	Docs: Fix the functors group and the link from the overview.

	* docs/website/doc.shtml: Revert this to point to the overview page at
	docs/indeex.html, which I have manually uploaded to the website, until
	we add this overview to the doxygen-generated documentation itself.
	* sigc++/functors/slot_base.h:
	* sigc++/visit_each.h: Rename the functors doxygen group to sigcfunctors,
	because doxygen seems to confuse it with the one in libstdc++.
	* docs/index.html: Update the links.

2010-04-16  Murray Cumming  <murrayc@murrayc.com>

	Website: Fix the Makefile so upload works with sourceforge again.

2010-04-06  Murray Cumming  <murrayc@murrayc.com>

	Website: Update the reference API link.

	* docs/website/doc.shtml: Update the reference API link to use
	library.gnome.org. We should make sure that the tutorial docbook is there
	too.
	* docs/website/devel.shtml: Remove CVS-specific instructions, quickly
	mentioning the git module instead.
	However, the Makefile must be updated to cope with sourceforge's changes.
	I was not able to upload this yet.

2010-03-29  Murray Cumming  <murrayc@murrayc.com>

	2.2.5

2010-01-06  Daniel Elstner  <daniel.kitta@gmail.com>

	Use non-blurry font for dot graph labels

	* docs/reference/Doxyfile.in (SHOW_INCLUDE_FILES): Enable.
	(SHOW_USED_FILES): Disable.
	(DOT_FONTNAME): Change from FreeSans to Sans, as the hinting for the
	former appears to be rather bad.
	(TEMPLATE_RELATIONS): Disable to reduce noise.

2009-12-29  Murray Cumming  <murrayc@murrayc.com>

	Accumulators: Allow return types that are different to the signal's.

	* sigc++/macros/signal.h.m4: signal_emit*: Correct the slot_iterator_buf_type
	and slot_reverse_iterator_buf_type typedefs to allow accumulators with
	return types that are different to the signal's return type.
	* tests/Makefile.am: Reenable test_accumulated, so we can test the fix.
	It should be manually disabled if building on AIX (if the AIX problem cannot
	be fixed properly).
	* tests/test_accumulated.cc: Add an accumulator with a return type that is
	different to the signal's return type. In this case it's a vector listing
	all results.
	Bug #586436.

2009-12-27  Daniel Elstner  <daniel.kitta@gmail.com>

	Disable collaboration graphs in documentation

	* docs/reference/Doxyfile.in (CLASS_DIAGRAMS): Enable.  Contrary to
	what the Doxygen documentation says, no dot class inheritance graphs
	will be generated if both CLASS_DIAGRAMS and COLLABORATION_GRAPH are
	set to NO.
	(COLLABORATION_GRAPH), (GROUP_GRAPHS): Turn off additional graphs to
	reduce the noise.

2009-10-26  Armin Burgmeier  <armin@arbur.net>

	Fix build with MSVC

2009-10-26  Armin Burgmeier  <armin@arbur.net>

	* sigc++config.h: Move the first five definitions to the !SIGC_MSC
	ifdef block, so MSVC does not see them and only uses the definitions
	from the SIGC_MSC block. This fixes the build with MSVC.

2009-09-19  Daniel Elstner  <daniel.kitta@gmail.com>

	Support Automake silent rules

	* configure.ac: Call the AM_SILENT_RULES macro if it is defined.
	* docs/doc-manual.am, sigc++/Makefile.am: Prefix the commands of
	custom rules with $(AM_V_GEN) or $(AM_V_at) in order to support
	the silent rules feature of Automake.

2009-09-18  Michael Hasselmann  <michaelh@openismus.com>

	Documentation cleanup: sigc::hide() always only hides one signal argument

	* sigc++/adaptors/macros/hide.h.m4: The documentation stated that sigc::hide()
	could discard multiple signal arguments when in fact the whole API only allows
	control over one (dummy) signal argument at a time. The  "multiple argument
	hiding" example lives in it own section now to make it clearer you have to nest
	sigc::hide() for that.

2009-09-13  Daniel Elstner  <daniel.kitta@gmail.com>

	Enable verbose output of autoreconf

	* autogen.sh: Pass --verbose option to autoreconf.

2009-09-07  Daniel Elstner  <danielk@openismus.com>

	Delete obsolete MAINTAINERS file

2009-09-02  Daniel Elstner  <danielk@openismus.com>

	Bump version to 2.2.4.2 and update NEWS

	* configure.ac (AC_INIT): Increment version number to 2.2.4.2.
	(MM_PREREQ): Require mm-common 0.7.2.
	* NEWS: Write news entry for libsigc++ 2.2.4.2.

2009-09-02  Daniel Elstner  <danielk@openismus.com>

	Document namespace sigc briefly

	* sigc++/signal_base.h (sigc): Prepend documentation comment to
	provide a brief description of namespace sigc, so that Doxygen
	will recognize the namespace as documented.

2009-08-31  Daniel Elstner  <danielk@openismus.com>

	Update Doxygen configuration for Doxygen 1.6.1

	* docs/reference/Doxyfile.in: Update configuration template using
	Doxygen 1.6.1.
	(SORT_MEMBERS_CTORS_1ST): Enable.

2009-08-31  Daniel Elstner  <danielk@openismus.com>

	Protect space after comma in M4 output

	* sigc++/macros/template.macros.m4 (_LOOP_SEP): Triple-quote the
	list separator in this hairy construct, since the macro definition
	itself is not quoted at all and the space after the comma got lost
	in the output.  This, in turn, produced overlong lines in the HTML
	reference documentation.

2009-08-28  Daniel Elstner  <danielk@openismus.com>

	Update news entry for libsigc++ 2.2.4.1 release

	* NEWS: Update top entry for release 2.2.4.1 of libsigc++.
	(2.2.4): Correct spelling of Frédéric Péters' name.

2009-08-27  Daniel Elstner  <danielk@openismus.com>

	Use shared mm-common Doxygen style sheet

	* configure.ac (MM_PREREQ): Require mm-common 0.7.
	* docs/Makefile.am (dist_noinst_DATA): List doxygen.css.
	* docs/reference/Doxyfile.in (HTML_STYLESHEET): Assign path
	to the shared doxygen.css provided by mm-common.

2009-08-27  Daniel Elstner  <danielk@openismus.com>

	Remove header and footer HTML fragments

	* docs/reference/libsigc_{header,footer}.html_fragment: Delete
	files.  These custom fragments were an unnecessary maintenance
	hassle.  Also, the files were out of date with respect to the
	encoding and CSS classes used by Doxygen.
	* docs/reference/Doxyfile.in (HTML_HEADER), (HTML_FOOTER): Set
	to the empty string.
	(PROJECT_NAME): Substitute @PACKAGE_NAME@.
	(PROJECT_NUMBER): Substitute @PACKAGE_VERSION@.  It does look
	nicer in the generated HTML pages, and is probably also less
	confusing.
	(SORT_GROUP_NAMES): Enable for predictability.

2009-08-27  Daniel Elstner  <danielk@openismus.com>

	Change version of upcoming release to 2.2.4.1

	* configure.ac (AC_INIT): Adjust version number to 2.2.4.1.
	* NEWS: Correct version of top news entry to 2.2.4.1.

2009-08-26  Daniel Elstner  <danielk@openismus.com>

	Bump version to 2.2.5 and update NEWS

	* configure.ac (AC_INIT): Increment version number to 2.2.5.
	* NEWS: Write news entry for libsigc++ 2.2.5.

2009-08-26  Daniel Elstner  <danielk@openismus.com>

	Reenable hierarchy graphs for each class

	* docs/reference/Doxyfile.in (COLLABORATION_GRAPH): Set option
	to YES to enable the per-class inheritance graphs.

2009-08-25  Daniel Elstner  <danielk@openismus.com>

	Have Automake check NEWS and use bzip2

	* configure.ac (AM_INIT_AUTOMAKE): Add options check-news and
	dist-bzip2.

2009-08-25  Daniel Elstner  <danielk@openismus.com>

	Update NEWS for libsigc++ 2.2.4 release

2009-08-25  Daniel Elstner  <danielk@openismus.com>

	Bump version to 2.2.4 and require mm-common 0.6.1

	* configure.ac (AC_INIT): Increase version number to 2.2.4.
	(MM_PREREQ): Require mm-common 0.6.1 for the updated default
	location of the reference documentation.

2009-08-25  Daniel Elstner  <danielk@openismus.com>

	Change documentation host to library.gnome.org

	* README, docs/manual/libsigc_manual.xml: Adjust links to the
	reference documentation in the text.
	* docs/Makefile.am (pubdocbase), (htmlrefpub): Remove override
	and use the updated mm-common default values.
	* sigc++{,-uninstalled}.pc.in (htmlrefpub): Adjust link.

2009-08-24  Daniel Elstner  <danielk@openismus.com>

	Add id="content" element to documentation index

	* docs/reference/libsigc_header.html_fragment: Start <div> element
	with attribute id="content" to match the other C++ binding modules.
	* docs/reference/libsigc_footer.html_fragment: Close <div> element.

2009-08-20  Daniel Elstner  <danielk@openismus.com>

	Use new version component substitutions

	* MSVC_Net200[58]/sigc.rc.in: Replace the no longer defined
	@FP_*_VERSION@ substitutions by the new @SIGCXX_*_VERSION@
	substitutions for the version number components.  These are
	defined by MM_INIT_MODULE() from mm-common.

2009-08-20  Daniel Elstner  <danielk@openismus.com>

	Substitute API version in filenames dynamically

	* sigc++.pc.in: Rename file from sigc++-2.0.pc.in.
	* sigc++-uninstalled.pc.in: Rename file from
	sigc++-2.0-uninstalled.pc.in.
	* MSVC_Net200[58]/sigc.rc.in: Rename files from sigc-2.0.rc.in
	and use @SIGCXX_API_VERSION@ substitution for the API version.
	Also replace @VERSION@ with @PACKAGE_VERSION@.
	* MSVC_Net200[58]/libsigc++2.{sln,vcproj}: Remove version from
	the project name and filenames.
	* MSVC_Net200[58]/filelist.am: Remove version from filenames.
	* configure.ac (AC_CONFIG_FILES): Insert ${SIGCXX_MODULE_NAME}
	into output filenames and remove the version from the input
	filenames.
	* Makefile.am: Use $(SIGCXX_MODULE_NAME) in pkg-config file
	names instead of hard-coding the API version.
	* sigc++/Makefile.am (lib_LTLIBRARIES): Instead of hard-coding
	the libtool archive name, substitute @SIGCXX_API_VERSION@ into
	it, as well as into the derived variable names.

2009-08-17  Daniel Elstner  <danielk@openismus.com>

	Set libtool version information

	* sigc++/Makefile.am (libsigc_2_0_la_LDFLAGS): Add libtool option
	-version-info 0:0:0 to specify the version information explicitly.

2009-08-16  Daniel Elstner  <daniel.kitta@gmail.com>

	Remove unused parameter names for correctness

	* tests/test_copy_invalid_slot.cc, tests/test_custom.cc,
	tests/test_deduce_result_type.cc, tests/test_functor_trait.cc,
	tests/test_limit_reference.cc: Remove the names of unused function
	parameters from the prototype, in order to get libsigc++ to build
	with fatal compiler warnings.

2009-08-16  Daniel Elstner  <daniel.kitta@gmail.com>

	Rename scripts/ to build/ for consistency

	* build/: Rename directory from scripts/ for consistency with most
	of the other modules that switched to the new build infrastructure.
	* Makefile.am (ACLOCAL_AMFLAGS): Adjust M4 include directory.
	* README: Adjust a reference to scripts/ in the text.
	* configure.ac (AC_CONFIG_AUX_DIR): Copy auxiliary files to build/.
	(AC_CONFIG_MACRO_DIR): Place Autoconf M4 files into build/.
	* docs/Makefile.am: Include $(top_srcdir)/build/doc-reference.am.

2009-08-16  Daniel Elstner  <danielk@openismus.com>

	Copy log entry into legacy ChangeLog file

2009-08-16  Daniel Elstner  <danielk@openismus.com>

	Update for latest mm-common 0.4

	* configure.ac (MM_PREREQ): Require mm-common 0.4.
	(MM_INIT_MODULE): Omit now optional version number argument.
	(MM_CONFIG_DOCTOOL_DIR): Copy the documentation utilities into docs/
	instead of scripts/.
	* Makefile.am (dist_noinst_DATA): Remove documentation utilities.
	* sigc++-2.0.pc.in (htmlrefpub): Append trailing slash.
	* sigc++-2.0-uninstalled.pc.in (htmlrefpub): ditto,
	* docs/Makefile.am (htmlrefpub): ditto.
	(doc_input): Perform a VPATH search for each input file, to correctly
	handle the case of rebuilding the documentation of a tarball release
	which includes the generated sources.
	(dist_noinst_DATA): List documentation utilities.

2009-08-11  Daniel Elstner  <danielk@openismus.com>

	Do not recurse into MSVC subdirectories

	* MSVC_Net200[58]/filelist.am: New Automake include files, defining
	the lists of files to ship from the MSVC project directories.
	* MSVC_Net200[58]/Makefile.am: Delete recursive Makefile.am files.
	* Makefile.am: Include MSVC_Net200[58]/filelist.am.
	(dist_noinst_DATA): Distribute MSVC project files.
	(SUBDIRS): Do not recurse into the MSVC_Net200[58] subdirectories.
	* configure.ac (AC_CONFIG_FILES): Remove the output files
	MSVC_Net200[58]/Makefile.am from the list.
	(AC_CONFIG_COMMANDS): Copy sigc++config.h into the MSVC project
	directories at the end of config.status.

2009-08-11  Daniel Elstner  <danielk@openismus.com>

	Remove now superfluous doctool overrides

	* docs/Makefile.am: Remove overrides for the documentation
	utilities, since MM_CONFIG_DOCTOOL_DIR() already takes care
	of setting MMDOCTOOLDIR to the local directory.
	* sigc++-2.0.pc.in (datadir): Substitute value, just in case.

2009-08-10  Daniel Elstner  <danielk@openismus.com>

	List mm-common files in scripts/.gitignore

2009-08-10  Daniel Elstner  <danielk@openismus.com>

	Have mm-common-prepare install the doc utils

	* configure.ac: Call MM_CONFIG_DOCTOOL_DIR([scripts]) to set
	up the destination directory for mm-common-prepare to copy
	the documentation utilities to.
	* scripts/doc-install.pl: Delete file.
	* scripts/doc-postprocess.pl: ditto,
	* scripts/tagfile-to-devhelp2.xsl: ditto.

2009-08-09  Daniel Elstner  <danielk@openismus.com>

	Refresh doc-install and doc-postprocess copies

	* scripts/doc-install.pl, scripts/doc-postprocess.pl: Copy
	latest versions from the mm-common module.
	* docs/Makefile.am (doc_install), (doc_postprocess): Include
	$(PERL) interpreter command in front of the script name.

2009-08-08  Daniel Elstner  <danielk@openismus.com>

	Disable extraction of undocumented identifiers

	* docs/reference/Doxyfile.in (EXTRACT_ALL): Change setting to
	NO, and adapt a number of related options accordingly.  The
	result is a net loss of about 300 generated .html files.  The
	roughly 450 files which remain now are still an insanely high
	number, though.
	(PREDEFINED): Predefine the Autoconf configuration defines to
	nudge Doxygen towards documenting the canonical code paths.

2009-08-07  Daniel Elstner  <danielk@openismus.com>

	Use #error explicitly instead of broken code

	* sigc++config.h.in: Do use the #error preprocessor directive,
	instead of an errornous piece of code.  This code does not need
	the same level of obfuscation as an Autoconf feature test.

2009-08-07  Daniel Elstner  <danielk@openismus.com>

	Change bug report URL to point to Bugzilla

	* configure.ac (AC_INIT): Change the bug-report argument to the
	URL for filing a new libsigc++ bug on bugzilla.gnome.org.  Also
	name the website URL as fifth argument.  It will simply be ignored
	if the installed Autoconf does not support this new feature.

2009-08-07  Daniel Elstner  <danielk@openismus.com>

	Do not enable -pedantic mode by default

	* configure.ac (MM_ARG_ENABLE_WARNINGS): Remove -pedantic from the
	list of compiler flags to use at warning level "min" (the default).

2009-08-07  Daniel Elstner  <danielk@openismus.com>

	Correct M4 forbidden tokens pattern

	* configure.ac (m4_pattern_forbid): Take into account that the
	pattern is applied to tokens, not lines.  Also catch unexpanded
	calls to underscore-prefixed private macros.

2009-08-06  Daniel Elstner  <danielk@openismus.com>

	Transition to new mm-common build infrastructure

	* autogen.sh: Replace with a minimal script that simply executes
	mm-common-prepare, autoreconf and configure.
	* configure.ac: Get rid of an enormous amount of old cruft.  Use
	macros from the new mm-common module to set up Doxygen for building
	the documentation.  Add option to enable more compiler warnings.
	* sigc++-2.0-uninstalled.pc.in: New pkg-config data file to allow
	linking to an uninstalled libsigc++.
	* sigc++-2.0.pc.in: Modernize.  Provide the location of the
	installed reference documentation and the Doxygen tag file.
	* sigc++config.h.in: Modernize and update for new build
	infrastructure.
	* Makefile.am, */Makefile.am: Modernize and adapt to the new C++
	binding build infrastructure in the mm-common module.
	* sigc++/filelist.am: New Automake include file.  Defines lists
	of C++ and M4 source files.
	* docs/Makefile.am: Rewrite using doc-reference.am from the
	mm-common module.
	* docs/doc-manual.am: New Automake include file for building the
	libsigc++ Docbook manual.
	* docs/images/Makefile.am: Remove file.
	* docs/manual/Makefile.am: ditto,
	* docs/reference/Makefile.am: ditto.
	* docs/Makefile_web.am_fragment: Remove for now, to be taken care
	of later.
	* docs/reference/Doxyfile.in: Modernize and adapt to new build
	infrastructure.
	* docs/reference/beautify_docs.pl: Remove and use the more recent
	scripts/doc-postprocess.pl instead.
	* libsigc++-2.0.spec.in: Remove, to be resurrected only if someone
	complains.
	* scripts/Makefile.am: Remove file.  Distribute the files from the
	toplevel Makefile.am instead.
	* scripts/cxx_std.m4: Add missing third argument to AC_DEFINE().
	* scripts/doc-install.pl: New file, copied from mm-common.
	* scripts/doc-postprocess.pl: ditto,
	* scripts/tagfile-to-devhelp2.xsl: ditto.

2009-06-24  Daniel Elstner  <danielk@openismus.com>

	Add Description of a Project (DOAP) file

2008-11-13  Murray Cumming  <murrayc@murrayc.com>

	Correct the download link so it shows all versions, not just 2.0.

2008-11-13  Murray Cumming  <murrayc@murrayc.com>

	* docs/website/stable.shtml: Correct the download link so it shows all 
	versions, not just 2.0.

	svn path=/trunk/; revision=302

2008-10-15  Murray Cumming  <murrayc@src.gnome.org>

	Increased version

	svn path=/trunk/; revision=301

2008-10-08  Armin Burgmeier  <armin@arbur.net>

	Changed output name to match the new naming convention.

2008-10-08  Armin Burgmeier  <armin@arbur.net>

	* MSVN_Net2005/libsigc++2.vcproj: Changed output name to match the new
	naming convention.

	* MSVC_Net2008/: Added MSVC 2008 project files. These are basically
	the same as for MSVC 2005, but converted to MSVC 2008 projects.

	* configure.ac:
	* Makefile.am: Added the new files to the build.

	svn path=/trunk/; revision=300

2008-08-08  Armin Burgmeier  <armin@arbur.net>

	Enable the disconnect_during_emit test by default.

2008-08-08  Armin Burgmeier  <armin@arbur.net>

	* MSVC_Net2005/libsigc++2.sln: Enable the disconnect_during_emit test
	by default.

	* MSVC_Net2005/libsigc++2.vcproj: Renamed the generated debug database
	file to sigc-2.0d.pdb (the default), to stay consistent with the *mm
	wrapper libraries.

	svn path=/trunk/; revision=299

2008-08-08  Armin Burgmeier  <armin@arbur.net>

	Moved from MSVC_Net2003.

2008-08-08  Armin Burgmeier  <armin@arbur.net>

	* MSVC_Net2005/: Moved from MSVC_Net2003.

	* MSVC_Net2005/libsigc++2.sln:
	* MSVC_Net2005/libsigc++2.vcproj:
	* MSVC_Net2005/tests/*/*.vcproj: Converted the Visual Studio 2003
	project files to 2005 ones.

	* MSVC_Net2005/Makefile.am:
	* Makefile.am:
	* configure.ac: Adapted build files accordingly.

	svn path=/trunk/; revision=298

2008-04-06  Cedric Gustin  <cedric.gustin@gmail.com>

	Removed ATL/MFC header files dependency as afxres.h is not part of the

	2008-04-06 Cedric Gustin <cedric.gustin@gmail.com>

	* MSVC_Net2003/sigc-2.0.rc.in: Removed ATL/MFC header files 
	dependency as afxres.h is not part of the Microsoft Platform
	SDK provided with Visual C++ Express 2008.
	Bug #503933.

	svn path=/trunk/; revision=297

2008-03-10  Murray Cumming  <murrayc@src.gnome.org>

	Increased version

	svn path=/trunk/; revision=296

2008-02-28  Murray Cumming  <murrayc@src.gnome.org>

	Increased version

	svn path=/trunk/; revision=295

2008-02-28  Elaine Xiong  <elaine.xiong@sun.com>

	Add ifdefs around uses of reverse_iterator to really fix the build with

2008-02-28  Elaine Xiong  <elaine.xiong@sun.com>

	* sigc++/macros/signal.h.m4:
	* tests/test_accum_iter.cc: Add ifdefs around uses of 
	reverse_iterator to really fix the build with recent 
	versions of Sun CC.
	Bug #302098.

	svn path=/trunk/; revision=294

2008-02-22  Murray Cumming  <murrayc@src.gnome.org>

	Increased version

	svn path=/trunk/; revision=293

2008-01-01  Ryan Hill  <dirtyepic@gentoo>

	Include the cstdlib and cstring headers to fix the build with the gcc 4.3

2008-01-01  Ryan Hill  <dirtyepic@gentoo.>

	* tests/test_copy_invalid_slot.cc: Include the cstdlib 
	and cstring headers to fix the build with the gcc 4.3 
	pre-release. Bug #454882.

	svn path=/trunk/; revision=292

2007-12-09  Murray Cumming  <murrayc@murrayc.com>

	Added some includes to fix the build in some environments, such as when

2007-08-31  Murray Cumming  <murrayc@murrayc.com>

	* tests/test_copy_invalid_slot.cc: Added some includes to 
	fix the build in some environments, such as when using Sun CC.
	Thanks to Vladimir Marek in bug #469872.

	svn path=/trunk/; revision=291

2007-09-10  Murray Cumming  <murrayc@src.gnome.org>

	Mark version in ChangeLog

	svn path=/trunk/; revision=290

2007-09-10  Murray Cumming  <murrayc@src.gnome.org>

	Added MAINTAINERS file

	svn path=/trunk/; revision=288

2007-08-14  Murray Cumming  <murrayc@src.gnome.org>

	Increase version

	svn path=/trunk/; revision=286

2007-08-14  Murray Cumming  <murrayc@murrayc.com>

	Removed this header.

2007-08-14  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/Makefile.am:
	* sigc++/compatibility.h: Removed this header.
	* sigc++/bind.h:
	* sigc++/bind_return.h:
	* sigc++/connection.h:
	* sigc++/macros/class_slot.h.m4:
	* sigc++/macros/hide.h.m4:
	* sigc++/macros/method_slot.h.m4:
	* sigc++/macros/object_slot.h.m4:
	* sigc++/macros/retype.h.m4:
	* sigc++/macros/signal.h.m4:
	* sigc++/macros/slot.h.m4:
	* sigc++/object.h:
	* sigc++/retype_return.h: Removed deprecated 
	compatibility API, to probably fix the build with 
	some compilers, such as some versions of the Sun Forte C++ 
	CC compiler. This API has been deprecated April 2004, and 
	is not widely used, so it seems safe to do this now.

	* tests/Makefile.am:
	* tests/test_compatibility.cc: Removed this test.

	svn path=/trunk/; revision=285

2007-07-28  Michael Elkstrand  <michael@elehack.net>

	slot_iterator_buf, slot_reverse_iterator_buf: Added typedefs for

2007-07-28  Michael Elkstrand  <michael@elehack.net>

	* sigc++/macros/signal.h.m4: slot_iterator_buf, 
	slot_reverse_iterator_buf: Added typedefs for 
	value_type, reference, and pointer, so that these 
	iterators are more like standard C++ iterators, so they can 
	be used with standard C++ algorithms.  
	* tests/Makefile.am:
	* tests/test_accum_iter.cc: Added a test for this.
	Bug #417926.

	svn path=/trunk/; revision=284

2006-11-14  Daniel Elstner  <daniel@src.gnome.org>

	Wholly replace this script with a critter from one of my personal

	* autogen.sh: Wholly replace this script with a critter from one
	of my personal projects, with slight modifications.  This one does
	some sophisticated stuff like probing version numbers of available
	automake and aclocal executables, in order to choose the right one
	accordingly.  All this is necessary to make the build system work
	robustly in custom environments such as Maemo where automake-1.9
	doesn't come preinstalled.

2006-06-20  Murray Cumming  <murrayc@murrayc.com>

	Revert the previous changes, because none is used in the exported symbol

2006-06-20  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/adaptors/macros/bind.h.m4:
	* sigc++/adaptors/macros/retype.h.m4:
	* sigc++/functors/macros/functor_trait.h.m4:
	* sigc++/functors/macros/slot.h.m4:
	* sigc++/macros/retype.h.m4:
	* sigc++/macros/signal.h.m4: Revert the previous changes, because none is
	used in the exported symbol names from gtkmm, so this would break the ABI
	of gtkmm.

2006-06-06  Régis Duchesne  <hpreg@vmware.com>

	Renamed 'nil' to 'none' to allow an Objective-C++ compiler to compile the

	2006-05-26  Régis Duchesne <hpreg@vmware.com>

	* sigc++/adaptors/macros/bind.h.m4:
	* sigc++/adaptors/macros/retype.h.m4:
	* sigc++/functors/macros/functor_trait.h.m4:
	* sigc++/functors/macros/slot.h.m4:
	* sigc++/macros/retype.h.m4:
	* sigc++/macros/signal.h.m4:
	Renamed 'nil' to 'none' to allow an Objective-C++ compiler to compile
	the library header files.

2005-12-21  Murray Cumming  <murrayc@murrayc.com>

	Make remaining reverse_iterator_buf operator--() methods return by

2005-12-21  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/macros/signal.h.m4: Make remaining
	reverse_iterator_buf operator--() methods
	return by reference, like the operator++() methods.
	Bug #304402 from John Profic.

2005-12-20  Murray Cumming  <murrayc@murrayc.com>

	Make all operator--() methods return by reference, like the operator++()

2005-12-20  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/macros/signal.h.m4: Make all operator--() methods
	return by reference, like the operator++() methods.
	Bug #304402 from John Profic.

2005-12-14  John Profic  <profic@kursknet.ru>

	Fix compilation problem in the last patch.

	2005-12-14  John Profic <profic@kursknet.ru>

	* sigc++/macros/signal.h.m4: Fix compilation problem in
	the last patch.

2005-12-14  John Profic  <profic@kursknet.ru>

	Added emit_reverse().

	2005-12-14  John Profic <profic@kursknet.ru>

	* sigc++/macros/signal.h.m4: Added emit_reverse().

2005-12-14  Murray Cumming  <murrayc@src.gnome.org>

	mark branch in ChangeLog

2005-12-01  Murray Cumming  <murrayc@murrayc.com>

	slot_base::disconnect(): Set call_ to 0, to invalidate the slot, even if

	2005-12-01  Murray Cumming <murrayc@murrayc.com>

	* sigc++/functors/slot_base.cc:
	slot_base::disconnect(): Set call_ to 0,
	to invalidate the slot, even if parent_ is 0.
	I think parent_ is, for instance, a signal, but
	disconnect should still work on a slot that is not
	connected to a signal, because a slot can be invoked
	directly.
	Fixes bug #311057 from James Lin.

2005-12-01  Murray Cumming  <murrayc@murrayc.com>

	Added test case from bug #311057.

	2005-12-01  Murray Cumming <murrayc@murrayc.com>

	* tests/Makefile.am:
	* tests/test_slot_disconnect.cc: Added test
	case from bug #311057.

2005-11-16  Philipp Berndt  <philipp.berndt@gmx.net>

	Make member exception_catch_functor<T_functor, T_catcher, void>::catcher_

2005-11-16  Philipp Berndt  <philipp.berndt@gmx.net>

	* sigc++/adaptors/macros/exception_catch.h.m4: Make member
	exception_catch_functor<T_functor, T_catcher, void>::catcher_
	public so that it can be accessed by visit_each()
	(bug fixed for generalization on 2004-11-06)
	~

2005-08-17  Murray Cumming  <murrayc@src.gnome.org>

	Increased version. Forgot to commit this a few days ago.

2005-08-01  Neal E. Coombes  <nealc@trdlnk.com>

	Updated the documentation for temp_slot_list as requested in bug #303896.

2005-08-01  Neal E. Coombes  <nealc@trdlnk.com>

	* sigc++/signal_base.h: Updated the documentation for temp_slot_list
	as requested in bug #303896.

2005-08-01  Murray Cumming  <murrayc@murrayc.com>

	Added missing ) in call to sun_forte_workaround(), fixing build on SUN

2005-07-13  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/adaptors/hide.h.m4: Added missing
	) in call to sun_forte_workaround(), fixing
	build on SUN Forte 5.5. Bug #312020.

2005-08-01  Bruno Martinez  <brunom@fing.edu.uy>

	Renamed ::sigc::is_base_and_derived::internal to

	2005-08-19  Bruno Martinez <brunom@fing.edu.uy>

	* sigc++/type_traits.h: Renamed
	::sigc::is_base_and_derived::internal to
	::sigc::is_base_and_derived::internal_class
	in order to avoid conflict with
	namespace internal.

2005-07-13  Murray Cumming  <murrayc@src.gnome.org>

	fix typo.

2005-07-13  Murray Cumming  <murrayc@murrayc.com>

	Correct mentions of 1.2 stuff instead of 2.0. Patch in bug #310213 from

2005-07-13  Murray Cumming  <murrayc@murrayc.com>

	* docs/manual/libsigc_manual.xml: Correct mentions of
	1.2 stuff instead of 2.0. Patch in bug #310213 from
	pebble.org.uk.

2005-07-13  Murray Cumming  <murrayc@murrayc.com>

	Fixed typo found by Antonio Coralles.

2005-07-13  Murray Cumming  <murrayc@murrayc.com>

	* docs/manual/libsigc_manual.xml: Fixed typo
	found by Antonio Coralles.

2005-07-09  Murray Cumming  <murrayc@murrayc.com>

	Did the same (see last commit) for slot_const_iterator and

2005-07-09  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/macros/signal.h.m4: Did the same (see
	last commit) for slot_const_iterator and
	slot_iterator_buf.

2005-07-09  Murray Cumming  <murrayc@murrayc.com>

	slot_iterator: operator--() now returns value, not reference, like

2005-07-09  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/macros/signal.h.m4: slot_iterator:
	operator--() now returns value, not reference, like
	operator++() already did. This caused crashes when
	using --no-inline with g++. Bug #308651 by
	Michael Andres.

2005-07-04  Murray Cumming  <murrayc@src.gnome.org>

	Increased version

2005-07-04  Philip Langdale  <plangdale@vmware.com>

	Add a setter typedef to compose*_functor and use it instead of the

2005-07-04  Philip Langdale  <plangdale@vmware.com>

	* sigc++/adaptors/macros/compose.h.m4: Add a setter typedef to
	compose*_functor and use it instead of the (incorrect) getter
	typedef in the compose* specialization of visit_each<>().
	This corrects the lifetime management of slots created with
	compose(). Bug #308433.

2005-06-13  Marek Rouchal  <marek.rouchal@infineon.com>

	Specify int return type for main(), to be more ISO C++ compliant. Bug

2005-06-13  Marek Rouchal  <marek.rouchal@infineon.com>

	* tests/test_deduce_result_type.cc: Specify int return type
	for main(), to be more ISO C++ compliant. Bug #307478.

2005-06-13  Andris Pavenis  <pavenis@latnet.lv>

	sigc++/adaptors/lambda/macros/select.h.m4 Specify only a type (not a

	2005-06-11  Andris Pavenis <pavenis@latnet.lv>

	* sigc++/adaptors/lambda/macros/base.h.m4:
	* sigc++/adaptors/lambda/macros/select.h.m4
	* sigc++/adaptors/macros/hide.h.m4: Specify only a type (not a
	parameter name) for unused member function parameters

2005-06-12  Paul Pogonyshev  <pogonyshev@gmx.net>

	Add test for whether the compiler allows referencing to member functions

2005-06-12  Paul Pogonyshev  <pogonyshev@gmx.net>

	* configure.ac:
	* scripts/cxx.m4:
	* sigc++config.h.in: Add test for whether the compiler allows
	referencing to member functions of the class/structure being
	declared from a definition of a static member variable.
	Supposedly a generic solution for GCC 3.2 compilation problems.

	* sigc++/type_traits.h: Define SIGC_WRAP_IS_BASE_CLASS_ based on
	results of the above test.
	(struct is_base_and_derived): Wrap up is_base_class_() functions
	in an internal class if SIGC_WRAP_IS_BASE_CLASS_ is defined.

2005-06-10  Murray Cumming  <murrayc@murrayc.com>

	Use CALL_SIZE instead of hard-coded 7s and 6s.

2005-06-10  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/adaptors/macros/bind.h.m4:
	* sigc++/functors/macros/slot.h.m4:
	* sigc++/macros/signal.h.m4: Use CALL_SIZE instead of
	hard-coded 7s and 6s.

2005-06-10  Murray Cumming  <murrayc@src.gnome.org>

	Increased version

2005-06-10  Murray Cumming  <murrayc@murrayc.com>

	Make the limit_derived_target::with_type inner class an outer class, to

2005-06-10  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/visit_each.h: Make the
	limit_derived_target::with_type inner class an outer class,
	to satisfy the SUN CC 5.7 compiler, though I think it is a
	compiler bug. Bug #302098 has the test case.

2005-06-10  Murray Cumming  <murrayc@murrayc.com>

	Make the limit_derived_target::with_type inner class an outer class, to

2005-06-10  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/visit_each.h: Make the
	limit_derived_target::with_type inner class an outer class,
	to satisfy the SUN CC 5.7 compiler, though I think it is a
	compiler bug. Bug #302098 has the test case.

2005-06-09  Murray Cumming  <murrayc@src.gnome.org>

	Increased version

2005-06-07  Murray Cumming  <murrayc@src.gnome.org>

	Removed missing call to missing macro from configure.in

2005-06-07  Murray Cumming  <murrayc@murrayc.com>

	Specify the actual class when using test_int(), instead of the derived

	2005-06-07  Murray Cumming <murrayc@murrayc.com>

	* tests/test_compatibility.cc: Specify the actual class when
	using test_int(), instead of the derived class, to fix the build
	on SUN Forte CC 5.5. Patch from Friedemann Kleint in
	Bug #305647

2005-06-07  Murray Cumming  <murrayc@murrayc.com>

	signal_emit::emit(): Use scope to ensure a certain order of destruction of

	2005-06-07  Murray Cumming <murrayc@murrayc.com>

	* sigc++/macros/signal.h.m4: signal_emit::emit(): Use scope to
	ensure a certain order of destruction of the member variables, to
	avoid a leak on MSVC++. Patch by Andreas Ames in Bug #306249.

2005-06-07  Murray Cumming  <murrayc@murrayc.com>

	Added comments about commenting-out SIGC_TYPEDEF_REDEFINE_ALLOWED when

	2005-06-07  Murray Cumming <murrayc@murrayc.com>

	* sigc++/macros/signal.h.m4: Added comments about commenting-out
	SIGC_TYPEDEF_REDEFINE_ALLOWED when using SUN Forte CC 5.7,
	because I can not seem to create a test for it.

2005-06-07  Murray Cumming  <murrayc@murrayc.com>

	Added check for the non-standard SUN Forte reverse_iterator<>, and used

	2005-06-07  Murray Cumming <murrayc@murrayc.com>

	* configure.ac:
	* scripts/cxx_std.m4:
	* sigc++/macros/signal.h.m4:
	* sigc++config.h.in: Added check for
	the non-standard SUN Forte reverse_iterator<>,
	and used it. This is based on the same stuff in
	gtkmm.

2005-06-07  Murray Cumming  <murrayc@murrayc.com>

	limit_derived_target(): Just some whitespace changes.

	2005-06-07  Murray Cumming <murrayc@murrayc.com>

	* sigc++/visit_each.h: limit_derived_target(): Just some whitespace
	changes.

2005-06-07  Murray Cumming  <murrayc@murrayc.com>

	limit_derived_target(): Just some whitespace changes.

	2005-06-07  Murray Cumming <murrayc@murrayc.com>

	* sigc++/visit_each.h: limit_derived_target(): Just some whitespace
	changes.

2005-06-04  Neal E. Coombes  <nealc@trdlnk.com>

	Modified temp_slot_list to be a temporary view into a slot list. Instead

2005-05-16  Neal E. Coombes  <nealc@trdlnk.com>

	* sigc++/signal_base.h:  Modified temp_slot_list to be a temporary view
	into a slot list.  Instead of emptying the original it now simply tacks
	a placeholder to the end of the original.  It then uses this as it's
	'end' iterator.  This should allow for conscious recursiveness, as well
	as inserting a slot to any position in the slot list during emittion.
	See bug #303896.

2005-06-04  Friedemann Kleint  <kleint@bifab.de>

	visit_each() template specializations: Mention the bool

	2005-06-04  Friedemann Kleint <kleint@bifab.de>

	* sigc++/macros/limit_reference.h.m4:
	visit_each() template specializations:
	Mention the bool I_derives_trackable
	template type, to fix the build on Solaris
	Forte 5.5.

2005-05-10  Murray Cumming  <murrayc@src.gnome.org>

	Increased version

2005-05-10  Murray Cumming  <murrayc@src.gnome.org>

	Added missing include

2005-05-10  Régis Duchesne  <hpreg@vmware.com>

	New class that just stores a reference, and makes sure that if the

	2005-05-06  Régis Duchesne <hpreg@vmware.com>

	* sigc++/macros/limit_reference.h.m4 (added):
	* sigc++/Makefile.am:
	New class that just stores a reference, and makes sure that if the
	reference derives from trackable, then the trackable reference will be
	used instead of the derived reference in visit_each().
	* sigc++/functors/macros/mem_fun.h.m4: Better fix for bug #169225 by
	Régis Duchesne and Christian Hammond, based on the new limit_reference
	class.
	* sigc++/adaptors/bound_argument.h (added): New class (built upon the
	new limit_reference class) that handles all 3 kinds of bound arguments:
	by value, by reference, and by constant reference. References are
	unwrapped in the bound_argument's constructor.
	* sigc++/adaptors/macros/bind.h.m4: Fix for bug #302327 by Régis
	Duchesne. Bound arguments now need to know whether they are passed by
	reference or not. So bind() now builds bind_functor instances using
	'reference_wrapper<Foo>' types, instead of 'Foo &' types. The
	bind_functor code is modified to compensate.
	* sigc++/adaptors/macros/bind_return.h.m4: Similar fix for a similar
	bug (unfiled) with bound return arguments.
	* sigc++/reference_wrapper.h:
	* sigc++/type_traits.h:
	The reference_wrapper class is only used in bound_argument.h. Put
	correct but unused code under #if 0.
	* sigc++/adaptors/lambda/base.h: This file needs reference_wrapper.h,
	but was incorrectly relying on type_traits.h to include it.
	* tests/Makefile.am:
	* tests/test_virtualbase_delete.cc (deleted):
	* tests/test_virtualbase_delete_ref_param.cc (deleted):
	* tests/test_limit_reference.cc (added):
	Replaced test_virtualbase_delete*.cc with a simpler
	test_limit_reference.cc which checks for all 3 aspects of the same bug
	in one file.
	* tests/test_bind_ref.cc: Slots must use 'Foo &' types. We were lucky
	this broken usage worked before this change. The change in
	type_traits.h made this bug obvious, by preventing the code to compile.
	* tests/test_bind_return.cc: After my change, bind() and bind_return()
	must use 'reference_wrapper<Foo>' types.
	* tests/test_custom.cc: Made this test a no-op (so it does not perturb
	'make check' on released versions of the library) and made it a
	template ready to be modified by hackers.

2005-05-04  Murray Cumming  <murrayc@src.gnome.org>

	Added missing file

2005-05-01  Murray Cumming  <murrayc@src.gnome.org>

	Added test case

2005-05-01  Murray Cumming  <murrayc@murrayc.com>

	slot_base::slot_base(src): If the source slot_base has a null rep->call_,

	2005-05-01  Murray Cumming <murrayc@murrayc.com>

	* sigc++/functors/slot_base.cc:
	slot_base::slot_base(src): If the source
	slot_base has a null rep->call_, meaning that the
	slot is invalid, just return a default-constructed
	slot, to prevent the crash shown in
	tests/tests_copy_invalid_slot.cc. Bug #302515 by
	Régis Duchesne.

2005-05-01  Murray Cumming  <murrayc@src.gnome.org>

	Added test

2005-05-01  Murray Cumming  <murrayc@murrayc.com>

	bound_*<>: Add a new is_base_and_derived<sigc::trackable> parameter to the

	2005-05-01  Murray Cumming <murrayc@murrayc.com>

	* sigc++/functors/macros/mem_fun.h.m4: bound_*<>:
	Add a new is_base_and_derived<sigc::trackable>
	parameter to the template and thereby provide a
	specialization for T_Obj types that derive from
	sigc::trackable. This prevents a crash when casting
	from the derived type to sigc::trackable after the
	derived destructor has run. This cast can sometimes
	fail when using multiple inheritance, at least with
	g++. Bug #169225 by Régis Duchesne and Christian
	Hammond.
	* sigc++/type_traits.h: Add documenation for
	the internal is_base_and_derived<> template, which
	allows us to specialize other templates for certain
	template types.

2005-04-28  Murray Cumming  <murrayc@murrayc.com>

	Added comments for users of g++ 3.2.

	2005-04-28  Murray Cumming <murrayc@murrayc.com>

	* sigc++/type_traits.h: Added comments for users of
	g++ 3.2.

2005-04-28  Murray Cumming  <murrayc@murrayc.com>

	Added simplified test case from bug #169225. We have a patch to make this

	2005-04-28  Murray Cumming <murrayc@murrayc.com>

	* tests/Makefile.am:
	* tests/test_virtualbase_delete.cc: Added
	simplified test case from bug #169225. We have a patch
	to make this succeed but I am not ready to commit it
	just yet.

2005-04-27  Murray Cumming  <murrayc@murrayc.com>

	Added a place to put extra test code, so I don't have to keep installing

	2005-04-27  Murray Cumming <murrayc@murrayc.com>

	* tests/Makefile.am:
	* tests/test_custom.cc:
	Added a place to put extra test code, so I don't have
	to keep installing my crazy libsigc++ versions.

2005-04-27  Murray Cumming  <murrayc@murrayc.com>

	Revert back to the non-explicit template call, because we can not specify

	2005-04-27  Murray Cumming <murrayc@murrayc.com>

	* sigc++/visit_each.h: Revert back to the non-explicit
	template call, because we can not specify the
	template specialization so easily, because the
	specializations have different numbers of types.
	* tests/Makefile/am:
	* tests/test_bind_ref.cc: Add a simple test only for
	sigc::ref disconnection.

2005-04-26  Murray Cumming  <murrayc@murrayc.com>

	Use the explicit template specialization, needed for Tru64 and AIX

	2005-04-26  Murray Cumming <murrayc@murrayc.com>

	* sigc++/visit_each.h: Use the explicit template
	specialization, needed for Tru64 and AIX compilers.
	This causes a crash in some uses of sigc::ref()
	(when using g++ 3.3.4 or 3.3.5 , but not with 3.4) but
	seems to fix a crash in some uses of multiple inheritance
	(bug #169225).
	* tests/test_bind.cc: Comment out the crashing (not with
	g++ 3.4) use of sigc::ref() with an explanatory comment.

2005-04-25  Murray Cumming  <murrayc@src.gnome.org>

	tiny comment change

2005-03-31  Murray Cumming  <murrayc@src.gnome.org>

	Increased version

2005-03-18  Murray Cumming  <murrayc@murrayc.com>

	Updated the list of supported compilers.

	2005-03-18  Murray Cumming <murrayc@murrayc.com>

	* index.shtml: Updated the list of supported
	compilers.

2005-03-18  Murray Cumming  <murrayc@murrayc.com>

	Remove links to the sourceforge download page, because we do not use it.

	2005-03-18  Murray Cumming <murrayc@murrayc.com>

	* fragments/footer.html_fragment:
	* fragments/html_declaration.html_fragment:
	* link.shtml: Remove links to the sourceforge
	download page, because we do not use it.
	* notes.shtml: Removed this. It is not linked
	from anywhere anyway.

2005-03-09  Cedric Gustin  <cedric.gustin@swing.be>

	Fixed typo in today's date.

	2005-03-09  Cedric Gustin <cedric.gustin@swing.be>

	* ChangeLog: Fixed typo in today's date.

2005-03-09  Cedric Gustin  <cedric.gustin@swing.be>

	Moved MSVC_Net2003 directory to SUBDIRS. Added blank.cpp to EXTRA_DIST.

	2005-01-24  Cedric Gustin <cedric.gustin@swing.be>

	* Makefile.am: Moved MSVC_Net2003 directory to SUBDIRS.
	* MSVC_Net2003/Makefile.am: Added blank.cpp to EXTRA_DIST.
	* MSVC_Net2003/libsigc++2_msvcNet2003.sln: Removed
	test_accumulated and test_lambda projects as the tests are
	disabled in the standard, configure-based build.
	* MSVC_Net2003/MSVC_Net2003/libsigc++2_msvcNet2003.vcproj:
	Generate a PDB file in the Debug target.

2005-03-04  Murray Cumming  <murrayc@murrayc.com>

	Mention actual supported compilers. Removed broken examples links. Change

2005-03-05  Murray Cumming  <murrayc@murrayc.com>

	* docs/website/stable.html: Mention actual supported compilers.
	* docs/website/docs.html: Removed broken examples links. Change
	reference link to the reference overview page.

2005-02-23  Murray Cumming  <murrayc@murrayc.com>

	Make slot_base::operator=() public, to fix the build with SUN Forte C++

2005-02-23  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/functors/slot_base.h: Make slot_base::operator=() public, to
	fix the build with SUN Forte C++ 5.5 and Tru64.

2005-02-22  Murray Cumming  <murrayc@src.gnome.org>

	Increased version

2005-02-20  Murray Cumming  <murrayc@murrayc.com>

	#included <new> to avoid an unresolved symbol error with the Tru64

2005-02-20  Murray Cumming  <murrayc@murrayc.com>

	* tests/test_slot.cc, test_disconnect.cc: #included <new> to avoid
	an unresolved symbol error with the Tru64 compiler. Solutio found by
	Tim Mooney in bug #161503.

2005-02-20  Murray Cumming  <murrayc@murrayc.com>

	#included <new> to avoid an unresolved symbol error with the Tru64

2005-02-20  Murray Cumming  <murrayc@murrayc.com>

	* tests/test_slot.cc, test_disconnect.cc: #included <new> to avoid
	an unresolved symbol error with the Tru64 compiler. Solutio found by
	Tim Mooney in bug #161503.

2005-02-20  Martin Schulze  <mschulze@cvs.gnome.org>

	Add some documentation.

2005-02-20  Martin Schulze  <mschulze@cvs.gnome.org>

	* sigc++/signal_base.h: Add some documentation.

2005-02-20  Martin Schulze  <mschulze@cvs.gnome.org>

	Reset deferred_ flag to false in signal_impl::sweep() (Neal E. Coombes).

2005-02-20  Martin Schulze  <mschulze@cvs.gnome.org>

	* sigc++/signal_base.cc: Reset deferred_ flag to false in
	signal_impl::sweep() (Neal E. Coombes). Partly fixes bug
	#167714.

2005-02-11  Martin Schulze  <mschulze@cvs.gnome.org>

	Set the correct group in post-html.

2005-02-11  Martin Schulze  <mschulze@cvs.gnome.org>

	* docs/manual/Makefile.am: Set the correct group in post-html.

2005-02-11  Murray Cumming  <murrayc@murrayc.com>

	Fix typo in url for reference docs. Found by James Lin.

2005-02-11  Murray Cumming  <murrayc@murrayc.com>

	* docs/website/doc.shtml: Fix typo in url for reference docs. Found by
	James Lin.

2005-02-11  Murray Cumming  <murrayc@src.gnome.org>

	reverted stuff I did not mean to commit

2005-02-11  Murray Cumming  <murrayc@murrayc.com>

	Fix typo in url for reference docs. Found by James Lin.

2005-02-11  Murray Cumming  <murrayc@murrayc.com>

	* docs/website/doc.shtml: Fix typo in url for reference docs. Found by
	James Lin.

2005-02-06  Murray Cumming  <murrayc@murrayc.com>

	temp_slot_list::begin(), end(): Actually return the iterators.

2005-02-06  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/signal_base.h: temp_slot_list::begin(), end(): Actually
	return the iterators.

2005-02-04  Neal E. Coombes  <nealc@trdlnk.com>

	Add temp_slot_list struct to facilitate allowing new connections to a

	2005-02-03  Neal E. Coombes <nealc@trdlnk.com>

	* sigc++/signal_base.h: Add temp_slot_list struct to facilitate
	allowing new connections to a signal during an emittion without
	affecting that emittion.
	* sigc++/macros/signal.h.m4: Use the new struct temp_slot_list
	to
	prevent connections made during an emittion from being called in
	the
	same emittion (which has the potential of causing things like
	infinite loops).  This guarantees an emittion will be finite, as
	well
	as maintaining any order of emittion guarantees that may have
	already
	been in place.

2005-02-02  Murray Cumming  <murrayc@src.gnome.org>

	Updated NEWS

2005-02-02  Murray Cumming  <murrayc@src.gnome.org>

	Increase version

2005-02-02  Murray Cumming  <murrayc@src.gnome.org>

	Reenabled tests

2005-02-01  Murray Cumming  <murrayc@murrayc.com>

	Add sigc::var<>() documentation, from Roger Ferrer Ibáñez in bug

2005-02-01  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/adapators/macros/base.h.m4: Add sigc::var<>() documentation,
	from Roger Ferrer Ibáñez in bug #149483.

2005-02-01  Murray Cumming  <murrayc@murrayc.com>

	In the template specializations of visit_each(): As before, specify the

2005-02-01  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/adaptors/macros/compose.h.m4: In the template specializations
	of visit_each(): As before, specify the specific other template
	specializations of visit_each that we use. Needed by AIX.
	* tests/Makefile.am: Reenabled most tests, because AIX can now
	build them.

2005-02-01  Murray Cumming  <murrayc@murrayc.com>

	[murrayc@localhost libsigc++2]$ more ChangeLog 2005-02-01  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/visit_each.h: visit_each_type(): Specify the specific
	template specialization of visit_each<>() to use. The AIX compiler,
	and possibly the Tru64 compiler, need this extra hint.

2005-02-01  Murray Cumming  <murrayc@murrayc.com>

	Define bind_functor::operator() inline because the AIX compiler/linker

2005-02-01  Murray Cumming  <murrayc@murrayc.com>

	* bind.h.m4: Define bind_functor::operator() inline because the AIX
	compiler/linker sometimes fails to find it when it is defined
	outside of the class.

2005-02-01  Murray Cumming  <murrayc@murrayc.com>

	2.0.8:

2005-01-30  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/type_traits.h: is_base_and_derived: Added
	avoid_gcc3_warning_(), to avoid an incorrect warning when using
	g++ 3.3.5

2005-01-30  Murray Cumming  <murrayc@murrayc.com>

	is_base_and_derived: Added avoid_gcc3_warning_(), to avoid an incorrect

2005-01-30  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/type_traits.h: is_base_and_derived: Added
	avoid_gcc3_warning_(), to avoid an incorrect warning when using
	g++ 3.3.5

2005-01-30  Liza Klerck  <liza@trdlnk.com>

	Add a sigc:: namespace prefix to the nested use of visit_each(), to avoid

2005-01-28  Liza Klerck   <liza@trdlnk.com>

	* sigc++/functors/macros/mem_fun.h.m4: Add a sigc:: namespace
	prefix to the nested use of visit_each(), to avoid ambiguity when
	using 2 versions of the libsigc++ API inside different namespace.

2005-01-27  Murray Cumming  <murrayc@murrayc.com>

	Add a sigc:: namespace prefix to the nested use of visit_each(), to avoid

2005-01-27  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/adaptors/macros/adaptor_trait.h.m4: Add a sigc:: namespace
	prefix to the nested use of visit_each(), to avoid ambiguity when
	using 2 versions of the libsigc++ API inside different namespace,
	which is not very advisable anyway. Bug #165222 from
	liza at trdlnk.com.

2005-01-26  Murray Cumming  <murrayc@src.gnome.org>

	Increased version

2005-01-25  Murray Cumming  <murrayc@src.gnome.org>

	Updated NEWS

2005-01-24  Cedric Gustin  <cedric.gustin@swing.be>

	Moved the SIGC_USING_STD macro definition out of the SIGC_CONFIGURE

	2005-01-24  Cedric Gustin <cedric.gustin@swing.be>

	* sigc++config.h.in : Moved the SIGC_USING_STD macro definition
	out of the SIGC_CONFIGURE section. We also need it for MSVC.
	* MSVC_Net2003/.cvsignore : Added .def and .aps files
	* MSVC_Net2003/Makefile.am: Rewrote rule for local copy of
	sigc++config.h (required for 'make distcheck').
	* MSVC_Net2003/libsigc++2_msvcNet2003.sln: Added test_retype and
	test_disconnect_during_emit tests.
	* MSVC_Net2003/tests/test_disconnect_during_emit/*,
	MSVC_Net2003/tests/test_retype/*: Initial commit.

2005-01-21  Murray Cumming  <murrayc@murrayc.com>

	Disabled the test_accumulator, test_bind, and test_compose tests, and part

2005-01-21  Murray Cumming  <murrayc@murrayc.com>

	* tests/: Disabled the test_accumulator, test_bind, and test_compose
	tests, and part of test_mem_fun because the AIX xlC compiler can not
	build them, but it can still do most things, including the examples.
	See the comments in tests/Makefile.am.

2005-01-21  Murray Cumming  <murrayc@murrayc.com>

	non-member operator()(): Specify the extra nil arguments in the templated

2005-01-21  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/adaptors/bind.h.m4: non-member operator()(): Specify the
	extra nil arguments in the templated class name prefix. Oddly, the
	AIX xlC compiler says that the type of the first parameter does not
	match the template if you don't do this.

2005-01-21  Murray Cumming  <murrayc@murrayc.com>

	is_base_and_derived struct: Move the is_base_class_() functions out of the

2005-01-21  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/type_traits.h: is_base_and_derived struct: Move the
	is_base_class_() functions out of the inner class, because the AIX
	xlC compiler does not like that - see the comments in the code.
	* sigc++/adaptors/bind.h.m4: Add the extra nil template types to
	the template specializations, as in slot and signal.

2005-01-21  Murray Cumming  <murrayc@murrayc.com>

	slot and signal template specialization for various numbers of template

2005-01-21  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/functors/macros/slot.h.m4, sigc++/macros/signal.h.m4:
	slot and signal template specialization for
	various numbers of template args: In the class slot line, specify
	all the remaining template types as null, instead of expecting the
	compiler to guess them in itself. This partly fixes the build on
	AIX with the xlC compiler. Bug #164685.

2005-01-19  Murray Cumming  <murrayc@murrayc.com>

	struct is_base_and_derived: Make the test inner struct a friend, so that

2005-01-19  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/type_traits: struct is_base_and_derived: Make the test inner
	struct a friend, so that it can use the big inner struct. This is
	required by the Tru64 compiler.
	* sigc++/adaptors/lambda/base.h: Put the unwrap_lambda_value()
	definitions at the top, because Tru64 (understandably) needs them to
	be declared before use.

2005-01-19  Murray Cumming  <murrayc@murrayc.com>

	Added cxx_std.m4, with a test copied from glibmm/scripts/cxx_std.m4 to

2005-01-19  Murray Cumming  <murrayc@murrayc.com>

	* scripts/: Added cxx_std.m4, with a test copied from
	glibmm/scripts/cxx_std.m4 to check if the compiler has the std::
	namespace.
	* sigcconfig.h: #undef the new #define and add SIGC_USING_STD(),
	like GLIBMM_USING_STD, to put stuff in the std:: namespace when it
	is not there already,
	* configure.in: Used the new test.
	* tests/*: Uses SIG_USING_STD() for every std:: thing that we use.
	This is needed by the Tru64 and HP-UX compilers when using their
	defaults.

2005-01-19  Murray Cumming  <murrayc@murrayc.com>

	Added cxx_std.m4, with a test copied from glibmm/scripts/cxx_std.m4 to

2005-01-19  Murray Cumming  <murrayc@murrayc.com>

	* scripts/: Added cxx_std.m4, with a test copied from
	glibmm/scripts/cxx_std.m4 to check if the compiler has the std::
	namespace.
	* sigcconfig.h: #undef the new #define and add SIGC_USING_STD(),
	like GLIBMM_USING_STD, to put stuff in the std:: namespace when it
	is not there already,
	* configure.in: Used the new test.
	* tests/*: Uses SIG_USING_STD() for every std:: thing that we use.
	This is needed by the Tru64 and HP-UX compilers when using their
	defaults.

2005-01-19  Murray Cumming  <murrayc@murrayc.com>

	AC_INIT(): Provide the extra tarball name parameter, so that it does not

2005-01-19  Murray Cumming  <murrayc@murrayc.com>

	* configure.in: AC_INIT(): Provide the extra tarball name parameter,
	so that it does not create a libsigc--- tarball.

2005-01-19  Murray Cumming  <murrayc@murrayc.com>

	AC_INT(): Use libsigc++ instead of sigc++, attempting to get the correct

2005-01-19  Murray Cumming  <murrayc@murrayc.com>

	* configure.in: AC_INT(): Use libsigc++ instead of sigc++, attempting
	to get the correct tarball name.

2005-01-18  Murray Cumming  <murrayc@murrayc.com>

	Used the autoconf 2.93 and AM_INIT_AUTOMAKE() technique to specify ustar

2005-01-18  Murray Cumming  <murrayc@murrayc.com>

	* configure.in: Used the autoconf 2.93 and AM_INIT_AUTOMAKE()
	technique to specify ustar format for the tarball, to prevent files
	with long file names from appearing at the top of the tarball.
	Based on the same fix in gtkmm 2.6.

2005-01-18  Murray Cumming  <murrayc@murrayc.com>

	Specify the base class when using the rep_ member variable. This stops the

2005-01-18  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/functors/macros/slot_h.m4: Specify the base class when
	using the rep_ member variable. This stops the HP-UX aCC compiler
	from saying that a Nonstatic member  is referenced in a nested class,
	local class or static member initializer. Bug #150719.

2005-01-18  Murray Cumming  <murrayc@murrayc.com>

	Bug #159597 - patch from e97_far at e.kth.se to replace C-style casts with

2005-01-18  Murray Cumming  <murrayc@murrayc.com>

	* Bug #159597 - patch from e97_far at e.kth.se to replace C-style
	casts with reinterpret_cast<> and static_cast<> to avoid warnings.

2005-01-17  Murray Cumming  <murrayc@murrayc.com>

	Specifying html/index.html instead of just the html directory as a target

2005-01-17  Murray Cumming  <murrayc@murrayc.com>

	* docs/manual/Makefile.am: Specifying html/index.html instead of
	just the html directory as a target seems to fix distcheck problems.
	I can also now confirm that the install works on solaris, when using
	gmake, though not when using make.

2005-01-17  Murray Cumming  <murrayc@murrayc.com>

	Add built files to DISTCLEANFILES to fix the distcheck. Specify in paths,

2005-01-17  Murray Cumming  <murrayc@murrayc.com>

	* MSVC_Net2004/Makefile.am: Add built files to DISTCLEANFILES to fix
	the distcheck.
	* docs/reference/Makefile.am, manual/Makefile.am: Specify  in
	paths, to fix distcheck of the manual, and maybe fix install problems
	on Solaris.

2005-01-11  Murray Cumming  <murrayc@murrayc.com>

	Updated the text about binary packages. Link to the 2.0 documentation

2005-01-11  Murray Cumming  <murrayc@murrayc.com>

	* docs/website/stable.html: Updated the text about binary packages.
	* docs/website/docs.html: Link to the 2.0 documentation instead of the
	1.2 documentation.

2005-01-11  GregSchussman  <schussman@slac.stanford.edu>

	Clean up punctuation, make definitions complete sentences, and add

2004-12-17  GregSchussman  <schussman@slac.stanford.edu>

	* glossary.shtml: Clean up punctuation, make definitions complete
	sentences, and add clarifications for certain definitions according to
	what Murray Cumming's suggestions and answers to my questions.
	Bug #161580.

2005-01-11  Murray Cumming  <murrayc@murrayc.com>

	Added manual, copied from the libsigc++-1.2 cvs module, and updated it for

2005-01-11  Murray Cumming  <murrayc@murrayc.com>

	* docs/: Added manual, copied from the libsigc++-1.2 cvs module,
	and updated it for the new 2.0 API.

2005-01-11  Murray Cumming  <murrayc@murrayc.com>

	Added website, copied from the libsigc++-1.2 cvs module. We will use it

2005-01-11  Murray Cumming  <murrayc@murrayc.com>

	* docs/: Added website, copied from the libsigc++-1.2 cvs module.
	We will use it from here from now on.

2004-12-12  Cedric Gustin  <cedric.gustin@swing.be>

	parse version tags at configure time (for sigc-2.0.rc). New resource file.

	2004-12-11  Cedric Gustin <cedric.gustin@swing.be>

	* configure.ac : parse version tags at configure time (for
	sigc-2.0.rc).
	* MSVC_Net2003/sigc-2.0.rc.in : New resource file.
	* MSVC_Net2003/Makefile.am: include sigc-2.0.rc in distribution.

2004-12-08  Cedric Gustin  <cedric.gustin@swing.be>

	get sigc++config.h from $(top_builddir) instead of $(top_srcdir).

	2004-12-08  Cedric Gustin <cedric.gustin@swing.be>

	* MSVC_Net2003/Makefile.am: get sigc++config.h from $(top_builddir)
	instead of $(top_srcdir).

2004-12-08  Cedric Gustin  <cedric.gustin@swing.be>

	copy sigc++config.h from $(top_srcdir) at build time. sigc++config.h

	2004-12-08  Cedric Gustin <cedric.gustin@swing.be>

	* MSVC_Net2003/Makefile.am: copy sigc++config.h from $(top_srcdir)
	at build time. sigc++config.h removed from CVS.

2004-12-08  Cedric Gustin  <cedric.gustin@swing.be>

	Renamed libsigc++ target to sigc-2.0d.dll (Debug) and sigc-2.0.dll

	2004-12-08  Cedric Gustin <cedric.gustin@swing.be>

	* MSVC_Net2003/*/*.vcproj: Renamed libsigc++ target to
	sigc-2.0d.dll (Debug) and sigc-2.0.dll (Release). Added
	$(SolutionDir) and $(SolutionDir)\.. to "Additional Include
	Directories" in tests projects.
	* sigc++config.h.in: Rewrote dllexport/dllimport macros for
	MSVC, for better consistency with glibmm/gtkmm.
	* MSVC_Net2003/Makefile.am: copy sigc++config.h from $(top_srcdir)
	at build time.

2004-11-27  Murray Cumming  <murrayc@murrayc.com>

	Revert the AC_PROG_LIBTOOL change, so that this builds with actually

2004-11-27  Murray Cumming  <murrayc@murrayc.com>

	* configure.in: Revert the AC_PROG_LIBTOOL change, so that this builds
	with actually released libtool versions, and in jhbuild, so that it
	gets testing.

2004-11-06  Martin Schulze  <mschulze@cvs.gnome.org>

	Make catcher_ member public so that it can be accessed by visit_each()

2004-11-06  Martin Schulze  <mschulze@cvs.gnome.org>

	* sigc++/adaptors/macros/exception_catch.h.m4: Make catcher_
	member
	public so that it can be accessed by visit_each() (bug reported
	on
	ml by Philip Langdale <plangdale@vmware.com>).

2004-10-24  Martin Schulze  <mschulze@cvs.gnome.org>

	Link with the "multithreaded DLL" runtime libraries and enable RTTI for

2004-10-24  Martin Schulze  <mschulze@cvs.gnome.org>

	*
	MSVC_Net2003/*/*.vcproj: Link with the "multithreaded DLL"
	runtime
	libraries and enable RTTI for the MSVC build
	(patch from Timothy M. Shead <tshead@k-3d.com>).
	* MSVC_Net2003/*/.cvsignore: Hide generated build files from cvs
	(patch from Timothy M. Shead <tshead@k-3d.com>).

2004-10-12  Martin Schulze  <mschulze@src.gnome.org>

	Update ChangeLog (add '2.0.6:').

2004-10-12  Martin Schulze  <mschulze@cvs.gnome.org>

	Fix project files to compile out-of-the-box and add dummy file so that .cc

2004-10-12  Martin Schulze  <mschulze@cvs.gnome.org>

	* MSVC_Net2003/*/*.vcproj, MSVC_Net2003/blank.cpp: Fix project
	files
	to compile out-of-the-box and add dummy file so that .cc files
	get
	recognized as c++ code files (patch from Timothy M. Shead).

2004-10-12  Martin Schulze  <mschulze@cvs.gnome.org>

	If SIGC_NEW_DELETE_IN_LIBRARY_ONLY is defined, implement

	2004-10-10  Martin Schulze <mschulze@cvs.gnome.org>

	* sigc++/signal_base.{h,cc}, sigc++/functors/slot_base.{h,cc},
	sigc++/functors/macros/slot.h.m4: If
	SIGC_NEW_DELETE_IN_LIBRARY_ONLY
	is defined, implement signal_base::operator new/delete and
	slot_rep::operator new/delete (suggested by Timothy M. Shead).
	Remove old work-around from 2004-10-02 since it didn't work.

2004-10-07  Martin Schulze  <mschulze@cvs.gnome.org>

	Update for libtool 1.5a (with support for Intel C++). Remove bogus

	2004-10-07  Martin Schulze <mschulze@cvs.gnome.org>

	* configure.ac: Update for libtool 1.5a (with support for Intel C++).
	* MSVC_Net2003/sigc++config.h: Remove bogus '#define'
	(reported by Timothy M. Shead <tshead@k-3d.com>).

2004-10-02  Martin Schulze  <mschulze@cvs.gnome.org>

	Bump version number to 2.0.6. Add ChangeLog summary for version 2.0.6.

	2004-10-02  Martin Schulze <mschulze@cvs.gnome.org>

	* configure.ac: Bump version number to 2.0.6.
	* NEWS: Add ChangeLog summary for version 2.0.6.

2004-10-02  Martin Schulze  <mschulze@src.gnome.org>

	Update tests/.cvsignore (Martin)

2004-10-02  Martin Schulze  <mschulze@cvs.gnome.org>

	Rename (typed_)slot_rep::detach to (typed_)slot_rep::destroy. Call the

	2004-10-02  Martin Schulze <mschulze@cvs.gnome.org>

	* sigc++/functors/slot_base.{h,cc},
	sigc++/functors/macros/slot.h.m4:
	Rename (typed_)slot_rep::detach to (typed_)slot_rep::destroy.
	Call the dtor of the functor stored in typed_slot_rep from
	destroy().
	A cleaner solution would be to add an additional "virtual"
	function
	that calls 'delete' or a real virtual dtor. However, this would
	be
	less efficient and might break the ABI. (Fixes #152323.)

2004-10-02  Martin Schulze  <mschulze@cvs.gnome.org>

	Define and use new macro SIGC_NEW_DELETE_IN_LIBRARY_ONLY to ABI-compatibly

	2004-10-02  Martin Schulze <mschulze@cvs.gnome.org>

	* sigc++config.h.in, MSVC_Net2003/sigc++config.h,
	sigc++/signal_base.cc, sigc++/functors/slot_base.{h,cc},
	sigc++/functors/macros/slot.h.m4: Define and use new macro
	SIGC_NEW_DELETE_IN_LIBRARY_ONLY to ABI-compatibly move
	all calls to new and delete into non-inline library code.

2004-09-26  Martin Schulze  <mschulze@cvs.gnome.org>

	Add a missing template keyword in the definition of

	2004-09-26  Martin Schulze <mschulze@cvs.gnome.org>

	* sigc++/adaptors/lambda/macros/group.h.m4: Add a missing
	template keyword in the definition of deduce_result_type::type
	(hopefully fixes #152327).

2004-09-26  Martin Schulze  <mschulze@cvs.gnome.org>

	Use correct bound_mem_functor variants for const (volatile) methods (fixes

	2004-09-26  Martin Schulze <mschulze@cvs.gnome.org>

	* sigc++/macros/object_slot.h.m4: Use correct bound_mem_functor
	variants for const (volatile) methods (fixes #148744).

2004-09-01  Martin Schulze  <mschulze@cvs.gnome.org>

	Correct link to lambda module.

	2004-09-01  Martin Schulze <mschulze@cvs.gnome.org>

	* docs/index.html: Correct link to lambda module.

2004-09-01  Martin Schulze  <mschulze@src.gnome.org>

	update .cvsignore

2004-09-01  Martin Schulze  <mschulze@cvs.gnome.org>

	Update compatibility section.

	2004-09-01  Martin Schulze <mschulze@cvs.gnome.org>

	* README: Update compatibility section.

2004-09-01  Martin Schulze  <mschulze@cvs.gnome.org>

	2.0.5:

	2004-09-01  Martin Schulze <mschulze@cvs.gnome.org>

	* MSVC_Net2003/Makefile.am: Add sigc++config.h to EXTRA_DIST.
	* configure.ac: Bump version number to 2.0.5.
	* NEWS: Add ChangeLog summary for version 2.0.5.

2004-08-21  Martin Schulze  <mschulze@cvs.gnome.org>

	Use sigc::var("\n") instead of sigc::ref("\n"). Comment out the affected

	2004-08-21  Martin Schulze <mschulze@cvs.gnome.org>

	* tests/test_lambda.cc: Use sigc::var("\n") instead of
	sigc::ref("\n").
	Comment out the affected lines, nevertheless.
	Sun FORTE and Compaq C++ can handle neither sigc::ref("\n") nor
	sigc::var("\n"). I see more chances fixing sigc::var("\n").
	* sigc++/adaptors/lambda/macros/base.h.m4: Add a comment about a
	possible work around for sigc::var("\n") compiler problems.
	* tests/test_compatibility.cc: Remove a 'const' keyword that
	prevents
	the test case from compiling with the Sun FORTE.
	* tests/test_trackable.cc: Remove a 'virtual' keyword and an
	unused
	variable to avoid compiler warnings.
	* NEWS: Add ChangeLog summary for version 2.0.4.

2004-08-09  Murray Cumming  <murrayc@src.gnome.org>

	tiny ChangeLog fix

2004-08-04  James Lin  <slimjimmy@mail.com>

	Added SIGC_API qualifier to all externally-visible non-template

	2004-08-03  James Lin <slimjimmy@mail.com>

	* Added SIGC_API qualifier to all externally-visible
	non-template
	classes/structs.
	* Added #include <sigc++config.h> to the files that use
	SIGC_API.
	* Added empty SIGC_API definition to sigc++config.h.in for
	non-MSVC
	compilers.  I'm not sure if this is the right place to put this
	(probably not).
	* Added MSVC-specific sigc++config.h to the MSVC project
	directory.
	(The comment in it probably should be edited.)
	* Changed MSVC project settings to output a multi-threaded DLL,
	set
	the include paths to work (hopefully) out-of-the-box.  Disabled
	precompiled headers, since they just complicate things and
	shouldn't be necessary for such a relatively project.

2004-08-03  James Lin  <slimjimmy@mail.com>

	Added SIGC_API qualifier to all externally-visible non-template

	2004-08-03  James Lin <slimjimmy@mail.com>

	* Added SIGC_API qualifier to all externally-visible
	non-template
	classes/structs.
	* Added #include <sigc++config.h> to the files that use
	SIGC_API.
	* Added empty SIGC_API definition to sigc++config.h.in for
	non-MSVC
	compilers.  I'm not sure if this is the right place to put this
	(probably not).
	* Added MSVC-specific sigc++config.h to the MSVC project
	directory.
	(The comment in it probably should be edited.)
	* Changed MSVC project settings to output a multi-threaded DLL,
	set
	the include paths to work (hopefully) out-of-the-box.  Disabled
	precompiled headers, since they just complicate things and
	shouldn't be necessary for such a relatively project.

2004-08-01  Martin Schulze  <mschulze@cvs.gnome.org>

	Remove type_trait<>::instance() (was unimplemented and unused; caused

	2004-08-01  Martin Schulze <mschulze@cvs.gnome.org>

	* sigc++/type_traits.h: Remove type_trait<>::instance()
	(was unimplemented and unused; caused problems with the MSVC).

2004-07-23  Martin Schulze  <mschulze@cvs.gnome.org>

	Fix typo concerning distribution of libsigc++-2.0.spec. Mention our

	2004-07-23  Martin Schulze <mschulze@cvs.gnome.org>

	* Makefile.am: Fix typo concerning distribution of
	libsigc++-2.0.spec.
	* AUTHORS: Mention our contributors for platforms Sun FORTE and
	Intel C++.

2004-07-15  Martin Schulze  <mschulze@cvs.gnome.org>

	Don't call operator()() in sun_forte_workaround(); rather copy

	2004-07-15  Martin Schulze <mschulze@cvs.gnome.org>

	* *.h.m4: Don't call operator()() in sun_forte_workaround(); rather copy
	operator()(). Calling operator()() makes a copy of the arguments causing
	wrong results if an argument type is a reference. Hopefully fixes #147311.

2004-07-15  Martin Schulze  <mschulze@cvs.gnome.org>

	Break "std::cout << [expr] << a << std::endl;" into "std::cout << [expr];

	2004-07-15  Martin Schulze <mschulze@cvs.gnome.org>

	* tests/test_lambda.cc: Break "std::cout << [expr] << a << std::endl;"
	into "std::cout << [expr]; std::cout << a << std::endl;".
	I hope this fixes #147313 where the right values for "[expr]" but wrong
	values for "a" were written to std::cout for some compiler with optimizations
	turned off.

2004-07-15  Martin Schulze  <mschulze@cvs.gnome.org>

	Correct return type deduction of lambda expressions in

	2004-07-15  Martin Schulze <mschulze@cvs.gnome.org>

	* sigc++/adaptors/lambda/macros/operator.h.m4: Correct return type deduction
	of lambda expressions in lambda_operator*::operator()(). Might be related to
	bug #147313.
	* sigc++/adaptors/lambda/macros/group.h.m4: Use m4 macro _P_().

2004-07-15  Martin Schulze  <mschulze@cvs.gnome.org>

	Add configure check SIGC_OPERATOR_OVERLOAD_AMBUGUITY for a SUN FORTE

	2004-07-15  Martin Schulze <mschulze@cvs.gnome.org>

	* scripts/cxx.m4, sigc++config.h.in, configure.ac,
	sigc++/adaptors/lambda/macros/operator.h.m4, tests/test_lambda.cc:
	Add configure check SIGC_OPERATOR_OVERLOAD_AMBUGUITY for a SUN FORTE
	compiler problem (bug #147391). Use it to decide whether the lambda
	action operators may be overloaded (not doing so restricts the API slightly).
	* sigc++/adaptors/lambda/macros/operator.h.m4: Add some doxygen comments
	and remove attic code.
	* sigc++/adaptors/lambda/macros/base.h.m4:
	Add templates unwrap_lambda_type and unwrap_lambda_value() to support
	the non-overloaded lambda action operators. Also add some doxygen comments
	and remove attic code.
	* sigc++/adaptors/lambda/macros/group.h.m4: Fix a bug that resulted in
	gargabe values being passed on to the functor contained in the group adaptor
	(partly fixes #147313).

2004-07-11  Martin Schulze  <mschulze@cvs.gnome.org>

	Split SIGC_CXX_TEMPLATE_SPECIALIZATION_OPERATOR_OVERLOAD into

	2004-07-11  Martin Schulze <mschulze@cvs.gnome.org>

	* scripts/cxx.m4, sigc++config.h.in, configure.ac, *.h.m4:
	Split SIGC_CXX_TEMPLATE_SPECIALIZATION_OPERATOR_OVERLOAD
	into SIGC_CXX_GCC_TEMPLATE_SPECIALIZATION_OPERATOR_OVERLOAD
	and SIGC_CXX_MSVC_TEMPLATE_SPECIALIZATION_OPERATOR_OVERLOAD.
	Remove LIBSIGC_TEMPLATE_PREFIX. Add template keyword to
	SIGC_WORKAROUND_OPERATOR_PARENTHESES depending on the configure
	checks.
	Should fix the compiler problems with MSVC.

2004-07-11  Martin Schulze  <mschulze@cvs.gnome.org>

	Use sigc::ptr_fun instead of std::ptr_fun. (fixes bug #144846)

	2004-07-11  Martin Schulze <mschulze@cvs.gnome.org>

	* examples/hello_world.cc: Use sigc::ptr_fun instead of
	std::ptr_fun.
	(fixes bug #144846)

2004-07-11  Eric Bourque  <ericb@computer.org>

	new file patched generate spec file ignore generated file (Martin Schulze)

	2004-07-11  Eric Bourque <ericb@computer.org>

	* libsigc++-2.0.spec.in: new file
	* configure.ac : patched generate spec file
	* .cvsignore: ignore generated file (Martin Schulze)
	* Makefile.am: distribute spec file (Martin Schulze)

2004-07-11  Murray Cumming  <murrayc@murrayc.com>

	Added some comments. operator=(): Check for self-asignment, though I do

2004-07-11  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/connection.cc: Added some comments.
	* sigc++/trackable.cc: operator=(): Check for self-asignment, though I
	do not know of any actual bug that this fixes. Added some comments.
	* sigc++/trackable.h Added some doxygen documentation.

2004-07-09  Murray Cumming  <murrayc@murrayc.com>

	Added test_disconnect_during_emit.cc, to prove that this works.

2004-07-09  Murray Cumming  <murrayc@murrayc.com>

	* tests/: Added test_disconnect_during_emit.cc, to prove that this
	works.

2004-07-08  Murray Cumming  <murrayc@murrayc.com>

	foo::operator(int): return a value. The SUN Forte 5.5 compiler complains

2004-07-08  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/tests/test_retype_return.cc: foo::operator(int): return a
	value. The SUN Forte 5.5 compiler complains about this, as it should.

2004-07-08  Murray Cumming  <murrayc@murrayc.com>

	class signal*: Rename the slot_list typedef to slot_list_type, because

2004-07-08  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/macros/signal.h.m4: class signal*: Rename the slot_list
	typedef to slot_list_type, because there is already a template class
	called slot_type. SUN Forte 5.5 seems to complain about this and I am
	not surprised. The old typdef is still there for backwards
	compatibility, except when building with SUN Forte.

2004-07-07  Murray Cumming  <murrayc@murrayc.com>

	SIGC_CXX_TEMPLATE_SPECIALIZATION_OPERATOR_OVERLOAD(): Don't define the

2004-07-07  Murray Cumming  <murrayc@murrayc.com>

	* scripts/cxx.m4: SIGC_CXX_TEMPLATE_SPECIALIZATION_OPERATOR_OVERLOAD():
	Don't define the SIGC_TEMPLATE_SPECIALIZATOIN_OPERATOR_OVERLOAD C
	macro at all if the test fails. This might fix the build on SUN Forte.
	* sigc++/functors/macros/mem_fun.h.m4: Default constructor: Initialize
	the func_ptr_ member variable. I have no evidence that this solves any
	problems, but it worried me.
	* sigc++/functors/slot_base.h: operator bool(): Correct documentation,
	to use @code instead of <code>
	* sigc++/macros/signal.h.m4: Remove the documentation for the
	parameters named first and last, because they do not exist.

2004-05-31  Martin Schulze  <mschulze@cvs.gnome.org>

	Add '--force'-flag to the 'libtoolize'-command (bug #143425).

2004-05-31  Martin Schulze  <mschulze@cvs.gnome.org>

	* autogen.sh: Add '--force'-flag to the 'libtoolize'-command (bug #143425).

2004-05-30  Martin Schulze  <mschulze@cvs.gnome.org>

	Bump version number to 2.0.3. Add ChangeLog summary for version 2.0.3. Fix

2004-05-30  Martin Schulze  <mschulze@cvs.gnome.org>

	* configure.ac: Bump version number to 2.0.3.
	* NEWS: Add ChangeLog summary for version 2.0.3.
	* sigc++/macros/signal.h.m4: Fix segfault on emission of unconnected sig
	nal.
	* tests/test_signal.cc, tests/test_accumulated.cc: Emit unconnected sign
	al.
	* sigc++/macros/object_slot.h.m4: Suppress compiler warning at
	dynamic_cast<>-test (tested by Christof Petig/Timothy M. Shead).

2004-05-23  Martin Schulze  <mschulze@cvs.gnome.org>

	Bump version number to 2.0.2. Add ChangeLog summary for version 2.0.2.

2004-05-22  Martin Schulze  <mschulze@cvs.gnome.org>

	* configure.ac: Bump version number to 2.0.2.
	* NEWS: Add ChangeLog summary for version 2.0.2.

2004-05-20  Martin Schulze  <mschulze@cvs.gnome.org>

	If a custom accumulator is specified invoke it on signal emission even if

2004-05-20  Martin Schulze  <mschulze@cvs.gnome.org>

	* sigc++/macros/signal.h.m4: If a custom accumulator is specified
	invoke it on signal emission even if the signal's slot list is empty.
	(This used to be the case in libsigc++-1.2 as pointed out by Timothy.)

2004-05-20  Martin Schulze  <mschulze@cvs.gnome.org>

	Suppress compiler warning at dynamic_cast<>-test (suggested by Timothy M.

2004-05-20  Martin Schulze  <mschulze@cvs.gnome.org>

	* sigc++/macros/object_slot.h.m4: Suppress compiler warning at
	dynamic_cast<>-test (suggested by Timothy M. Shead).

2004-05-01  Martin Schulze  <mschulze@cvs.gnome.org>

	Updated for libsigc++-2.0.

2004-05-01  Martin Schulze  <mschulze@cvs.gnome.org>

	* README: Updated for libsigc++-2.0.

2004-04-28  Martin Schulze  <mschulze@cvs.gnome.org>

	Bump version number to 2.0.1. Add ChangeLog summary for version 2.0.1.

2004-04-27  Martin Schulze  <mschulze@cvs.gnome.org>

	* configure.ac: Bump version number to 2.0.1.
	* NEWS: Add ChangeLog summary for version 2.0.1.
	* sigc++/adaptors/lambda/macros/base.h.m4: Fixed documentation.
	* sigc++/adaptors/macros/bind.h.m4: Hide work-arounds from doxygen.
	* scripts/cxx.m4, sigc++config.h.in, configure.ac,
	sigc++/adaptors/macros/bind.h.m4: Removed configure     check. It
	showed that the Apple gcc can also compile the sophisticated version
	of the work-around.

2004-04-26  Martin Schulze  <mschulze@cvs.gnome.org>

	Modified test for SigC::Object inheritance so that it also works if

2004-04-26  Martin Schulze  <mschulze@cvs.gnome.org>

	* sigc++/macros/object_slot.h.m4: Modified test for SigC::Object
	inheritance so that it also works if SigC::Object is virtual base.
	(Fixes bug 141094 reported by Jonathan Brandmeyer)

2004-04-26  Martin Schulze  <mschulze@cvs.gnome.org>

	Updated the configure check. It would probably have succeeded on the

2004-04-26  Martin Schulze  <mschulze@cvs.gnome.org>

	* scripts/cxx.m4: Updated the configure check. It would probably
	have succeeded on the Apple.

2004-04-26  Martin Schulze  <mschulze@cvs.gnome.org>

	Add work-arounds for bind<-1>::deduce_result_type compilation error on

2004-04-26  Martin Schulze  <mschulze@cvs.gnome.org>

	* sigc++/adaptors/macros/bind.h.m4: Add work-arounds for
	bind<-1>::deduce_result_type compilation error on Apple gcc 3.3.
	* scripts/cxx.m4, sigc++config.h.in, configure.ac: Add configure
	check for the compilation error above.
	* sigc++/adaptors/lambda/macros/operator.h.m4: Replace _A with
	_Aa. _A is a reserved keyword on Apple gcc 3.3 (Spundun Bhatt).
	(fixes bug #10444 reported by Spundun Bhatt)

2004-04-19  Martin Schulze  <mschulze@cvs.gnome.org>

	Fixed serious bug in signal_base::impl(): Only reference a newly created

2004-04-19  Martin Schulze  <mschulze@cvs.gnome.org>

	* sigc++/signal_base.cc: Fixed serious bug in signal_base::impl():
	Only reference a newly created object (initial reference).
	(This fixes bug #140269 reported by Andris.)

2004-04-19  Murray Cumming  <murrayc@murrayc.com>

	Updated the operator() template check, because it failed with gcc 3.4

2004-04-19  Murray Cumming  <murrayc@murrayc.com>

	* scripts/cxx.m4: Updated the operator() template check, because it
	failed with gcc 3.4 (from cvs). Apparently the template keyword can
	only be used from another template.

2004-04-12  Martin Schulze  <mschulze@cvs.gnome.org>

	Bump version number to 2.0.0. Add ChangeLog summary for version 2.0.0.

2004-04-06  Martin Schulze  <mschulze@cvs.gnome.org>

	* configure.ac: Bump version number to 2.0.0.
	* NEWS: Add ChangeLog summary for version 2.0.0.
	* TODO, AUTHORS: Bring up to date.
	* sigc++-2.0.pc.in, Makefile.am: 1.9 -> 2.0
	* Added more documentation.

2004-04-10  Murray Cumming  <murrayc@murrayc.com>

	Implement blocked() to avoid undefined symbol linker error.

2004-04-10  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/connection.[h|cc]: Implement blocked() to avoid undefined
	symbol linker error.

2004-04-07  Murray Cumming  <murrayc@murrayc.com>

	dist the scripts directory.

2004-04-08  Murray Cumming  <murrayc@murrayc.com>

	* dist the scripts directory.

2004-04-06  Martin Schulze  <teebaum@cvs.gnome.org>

	Bump version number to 1.9.16. Add ChangeLog summary for version 1.9.16.

2004-04-06  Martin Schulze  <teebaum@cvs.gnome.org>

	* configure.ac: Bump version number to 1.9.16.
	* NEWS: Add ChangeLog summary for version 1.9.16.

2004-04-02  Murray Cumming  <murrayc@murrayc.com>

	Make block() and unblock() always return a value, to fix compiler

2004-04-02  Murray Cumming  <murrayc@murrayc.com>

	* sigc++/connection.cc: Make block() and unblock() always return a
	value, to fix compiler warnings. Patch from bug #138620 by
	Alexander Nedotsukov.

2004-04-02  Murray Cumming  <murrayc@murrayc.com>

	* Fix the compile of examples/member_method.cc. Bug #131701 from
	Kirill Smelkov. I also made the examples build as part of the regular
	build.

2004-04-02  Murray Cumming  <murrayc@murrayc.com>

	Remove every undef apart from the one we need, to avoid clashes, because

2004-04-02  Murray Cumming  <murrayc@murrayc.com>

	* sigc++config.h.m4: Remove every undef apart from the one we need, to
	avoid clashes, because we #include this in a public header.

2004-03-25  Murray Cumming  <murrayc@murrayc.com>

	Rename the template_keyword check to template_specialization, because the

2004-03-25  Murray Cumming  <murrayc@murrayc.com>

	* scripts/cxx.m4, configure.in, sigc++config.h.in: Rename the
	template_keyword check to template_specialization, because the problem
	is with or without the keyword.
	* sigc++/adaptors/macros/adaptor_trait.h.m4: Define
	SIGC_WORKAROUND_OPERATOR_PARENTHESES, which calls either operator() or
	sun_forte_workaround() depending on the result of the compiler test.
	* many .m4 files: Add sun_forte_workaround methods that call the
	operator() methods. Put them in #ifdefs so that only SUN Forte C++
	sees them.

2004-03-21  Murray Cumming  <murrayc@murrayc.com>

	Fix the sigc++config.h.in disting, to fix make distcheck.

2004-03-22  Murray Cumming  <murrayc@murrayc.com>

	* Makefile.am, sigc++/Makfile.am: Fix the sigc++config.h.in disting,
	to fix make distcheck.

2004-03-21  Murray Cumming  <murrayc@murrayc.com>

	Rename config.h.in to sigc++config.h.in so that gtkmm does not include

2004-03-21  Murray Cumming  <murrayc@murrayc.com>

	* Rename config.h.in to sigc++config.h.in so that gtkmm does not
	include some other config.h at strange times - fixes a problem in
	the gtkmm demos. This should really be in the sigc++ directory, but
	that seems to add that as an include path, which causes the STL
	headers to include sigc++/signal.h instead of some STL signal.h header.

2004-03-20  Murray Cumming  <murrayc@murrayc.com>

	Install the config.h platform-specific header. Report the include path for

2004-03-20  Murray Cumming  <murrayc@murrayc.com>

	* Makefile.am: Install the config.h platform-specific header.
	* sigc++-2.0.pc.in: Report the include path for config.h

2004-03-19  Murray Cumming  <murrayc@murrayc.com>

	Added config.h.in, using autoheader, from which config.h will be

2004-03-20  Murray Cumming  <murrayc@murrayc.com>

	* Added config.h.in, using autoheader, from which config.h will be
	generated, so we can detect compiler features.
	* configure.ac: Added AC_CONFIG_HEADER(config.h) to generate config.h
	from config.h.in.
	* scripts/cxx.m4: Added this directory and file, with a
	SIGC_CXX_TEMPLATE_KEYWORD_OPERATOR_OVERLOAD macro that defines
	the SIGC_TEMPLATE_KEYWORD_OPERATOR_OVERLOAD C macro.
	* autogen.sh: Added -I scripts to the aclocal call, so that it finds
	the m4 macro for configure.ac.
	* sigc++/adapators/macros/adaptor_trait.h.m4: Include config.h and
	use SIGC_TEMPLATE_KEYOWRD_OPERATOR_OVERLOAD.

2004-03-17  Martin Schulze  <mschulze@cvs.gnome.org>

	Don't test making functors from overloaded methods with partial template

2004-03-18  Martin Schulze  <mschulze@cvs.gnome.org>

	* tests/test_mem_fun.cc, tests/test_ptr_fun.cc: Don't test
	making functors from overloaded methods with partial template
	specialization. Not portable among different compilers (SUN FORTE).
	* adaptors/macros/apdaptor_trait.h.m4: Only gcc seems to use the
	notation A.template operator()<...>(...) => adapt preprocessor check
	for #define LIBSIGC_TEMPLATE_PREFIX. TODO: replace with configure check.

2004-03-13  Murray Cumming  <murrayc@murrayc.com>

	slot_iterator_buf::operator*(): Use blocked() and empty() instead of

2004-03-13  Murray Cumming  <murrayc@murrayc.com>

	* g++ 3.4 (pre-release) build fixes:
	* sigc++/macros/signal.h.m4: slot_iterator_buf::operator*():
	Use blocked() and empty() instead of non-existant blocked_and_empty().
	* sigc++/functors/macros/mem_fun.h.m4: memfun_functor*::operator()():
	Use this->func_ptr_ instead of just func_ptr_.
	* sigc++/adaptors/macros/deduce_result_type.h.m4: Use
	T_functor::template deduce_result_type<> instead of just
	T_functor::deduce_result_type<>.
	* sigc++/adaptors/lambda/macros/base.h.m4, operator.h.m4, group.h.m4::
	Use template keyword again. operator[](): Use this->value_ instead of
	just value_.
	* sigc++/adaptors/lambda/macros/bind/m4: Use template keyword, and
	this-> again.
	* sigc++/adaptors/macros/compose.h.m4, hide.h.m4, bind_return.h.m4,
	exception_catch.h.m4:
	rettype.h.m4, rettype_return.h.m4: Use template keyword,and this-> again

2004-02-27  Martin Schulze  <teebaum@cvs.gnome.org>

	Bump version number to 1.9.15. Add ChangeLog summary for version 1.9.15.

2004-02-27  Martin Schulze  <teebaum@cvs.gnome.org>

	* configure.ac: Bump version number to 1.9.15.
	* NEWS: Add ChangeLog summary for version 1.9.15.

2004-02-27  Martin Schulze  <teebaum@cvs.gnome.org>

	Make the unnumbered slot templates' copy ctors use the copy ctors of the

2004-02-27  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/functors/macros/slot.h.m4: Make the unnumbered slot templates'
	copy ctors use the copy ctors of the base class. Fixes bug #24698.
	* tests/test_slot.cc: Test copy ctor (Bryan Forbes).

2004-02-27  Martin Schulze  <teebaum@cvs.gnome.org>

	Bring it up-to-date (use sigc::ref). Make it work with the SUN Forte.

2004-02-27  Martin Schulze  <teebaum@cvs.gnome.org>

	* tests/type_functor_trait.cc: Bring it up-to-date (use sigc::ref).
	Make it work with the SUN Forte.

2004-02-24  Martin Schulze  <teebaum@cvs.gnome.org>

	Make is_base_and_derived<> work with the SUN Forte.

2004-02-24  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/type_traits.h: Make is_base_and_derived<> work with the SUN Forte.

2004-02-19  Martin Schulze  <teebaum@cvs.gnome.org>

	Make is_base_and_derived<> platform independant. Make lambda_core<> ctors

2004-02-19  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/type_traits.h: Make is_base_and_derived<> platform independant.
	* sigc++/adaptors/lambda/macros/base.h.m4: Make lambda_core<> ctors
	explicit. Remove an unused ctor from lambda_core<T_type, true>.

2004-02-14  Martin Schulze  <teebaum@cvs.gnome.org>

	Move some documentation to slot_base.h. Move some documentation to

2004-02-14  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/functors/slot_base.h, sigc++/functors/macros/slot.h.m4:
	Move some documentation to slot_base.h.
	* sigc++/signal_base.h, sigc++/macros/signal.h.m4:
	Move some documentation to signal_base.h.

	API addition:
	* sigc++/functors/macros/slot.h.m4: Add numbered slot# templates.
	Make unnumbered slot templates inherit from slot#.

	API change:
	* sigc++/functors/macros/mem_fun.h.m4: Allow for methods of the object's
	base types to be passed into sigc::mem_fun(). (Used to be the case in
	libsigc++-1.2).

2004-02-13  Murray Cumming  <murrayc@usa.net>

	Create and use a typedef for the destroy_notify callback functions, to

2004-02-13  Murray Cumming  <murrayc@usa.net>

	* sigc++/functors/slot_base.[h|cc], sigc++/trackable.[h|cc]: Create
	and use a typedef for the destroy_notify callback functions, to avoid
	confusion function pointer declaration syntax in the API.

2004-02-13  Murray Cumming  <murrayc@murrayc.com>

	* Moved implementation to .cc files:
	* sigc++/functors/: Added slot_base.[h|cc] which contains non-template
	code that was previsouly in the generated functors/slot.h and
	non-generated slot.cc files. All non-inline implementation is now in
	the .cc file.
	* sigc++/functors/macros/slot.m4: Removed the code that has been moved
	to slot_base.[h|cc].
	* sigc++/: Added signal_base.[h|cc] which contains non-template code
	that was previously in the generated signal.h and non-generated
	signal.cc file. All non-inline implementation is now in the .cc file.
	* sigc++/macros/signal.m4: Removed the code that ahs been moved to
	signal.cc
	* sigc++/connector.[h|cc]: method implementation moved to the .cc file.

2004-02-13  Martin Schulze  <teebaum@cvs.gnome.org>

	Bump version number to 1.9.14. Add ChangeLog summary for version 1.9.14.

2004-02-13  Martin Schulze  <teebaum@cvs.gnome.org>

	* configure.ac: Bump version number to 1.9.14.
	* NEWS: Add ChangeLog summary for version 1.9.14.

2004-02-10  Murray Cumming  <murrayc@usa.net>

	slot_base: Added operator bool(), needed to check for a slot that is

2004-02-09  Murray Cumming  <murrayc@usa.net>

	* sigc++/macros/slot.h.m4: slot_base: Added operator bool(), needed to
	check for a slot that is created with the default constructor. This was
	present in libsigc++ 1.2 also.

2004-02-06  Murray Cumming  <murrayc@usa.net>

	Build the docs directory, by adding it to SUBDIRS. Updated to be more

2004-02-06  Murray Cumming  <murrayc@usa.net>

	* Makefile.am: Build the docs directory, by adding it to SUBDIRS.
	* docs/Doxyfile.in: Updated to be more glibmm-like.
	* Added some @deprecated doxygen bits.
	* sigc++/macros/signal.h.m4: Call base constructor from signal_base
	constructor - this is an error-as-warning when building gtkmm.

2003-11-30  Martin Schulze  <teebaum@cvs.gnome.org>

	Bump version number to 1.9.13. Add ChangeLog summary for version 1.9.13.

2003-11-30  Martin Schulze  <teebaum@cvs.gnome.org>

	* configure.ac: Bump version number to 1.9.13.
	* NEWS: Add ChangeLog summary for version 1.9.13.
	* Makefile.am, MSVC_Net2003/Makefile.am, configure.ac:
	Distribute MS .Net project files.
	* sigc++/adaptors/macros/[bind,hide].h.m4: Correct and add
	documentation. Make hide_functor ctor explicit.

2003-11-30  Martin Schulze  <teebaum@cvs.gnome.org>

	Bump version number to 1.9.13. Add ChangeLog summary for version 1.9.13.

2003-11-30  Martin Schulze  <teebaum@cvs.gnome.org>

	* configure.ac: Bump version number to 1.9.13.
	* NEWS: Add ChangeLog summary for version 1.9.13.
	* Makefile.am, MSVC_Net2003/Makefile.am, configure.ac:
	Distribute MS .Net project files.
	* sigc++/adaptors/macros/[bind,hide].h.m4: Correct and add
	documentation. Make hide_functor ctor explicit.

2003-11-11  Martin Schulze  <teebaum@cvs.gnome.org>

	Change to zero-based argument index in numbered bind() and hide() overload

2003-11-11  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/adaptors/macros/[bind,hide].h.m4: Change to zero-based
	argument index in numbered bind() and hide() overload
	(Agreement on the mailing list).
	Support binding up to CALL_SIZE arguments with one bind adaptor.
	(Requested by joey yandle and others).
	Only support binding of multiple arguments in unnumberd overloads
	to keep the API simple (Requested by Murray Cumming).
	* tests/test_[bind,hide,functor_trait].cc, sigc++/bind.h:
	Reflect API changes in compatibility module and test cases.

2003-11-10  Martin Schulze  <teebaum@cvs.gnome.org>

	Add unnumbered bind() and hide() overloads to make specifying the argument

2003-11-10  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/adaptors/macros/[bind,hide].h.m4: Add unnumbered
	bind() and hide() overloads to make specifying the argument
	position optional (Proposed by Jeff Franks).
	* tests/test_[bind,hide].cc: Test unnumbered bind() and hide().
	* sigc++/adaptors/macros/adaptor_trait.h.m4:
	Change "#ifdef MSVC" to "#ifdef _MSC_VER" (Roel Vanhout).

2003-11-09  Martin Schulze  <teebaum@cvs.gnome.org>

	Change functor type in typed_slot_rep to

2003-11-09  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/functors/macros/slot.h.m4: Change functor type in
	typed_slot_rep to adaptor_trait::adaptor_type<T_functor>
	and use explicit function template instantiation in
	internal::slot_call::call_it(). Avoids copying of arguments
	in call_it() and enables binding of object instances
	to class methods through bind() (Reported by Jeff Franks).
	* tests/test_bind.cc: Test binding object instances to
	class methods through bind().
	* sigc++/adaptors/adaptors.h: Include retype[_result].h.
	* sigc++/adaptors/macros/adaptor_trait.h.m4:
	- Add documentation.
	- Mark some c-tors as explicit.
	- Remove ununsed operator T_functor&() from adaptor_functor.
	* sigc++/adaptors/macros/deduce_result_type.h.m4:
	Rewrite parts of the documentation.
	* sigc++/adaptors/macros/bind.h.m4: Add documentation.
	* sigc++/functors/macros/mem_fun.h.m4: Remove unnecessary
	explicit markers. Minor fixes to documentation.
	* sigc++/functors/macros/functor_trait.h.m4:
	Minor fixes to documentation.

2003-11-04  Martin Schulze  <teebaum@cvs.gnome.org>

	Bump version number to 1.9.12. Add ChangeLog summary for version 1.9.12.

2003-10-26  Martin Schulze  <teebaum@cvs.gnome.org>

	* configure.ac: Bump version number to 1.9.12.
	* NEWS: Add ChangeLog summary for version 1.9.12.

2003-11-03  Martin Schulze  <teebaum@cvs.gnome.org>

	Document accumulators. Move slot_iterator_buf into namespace internal.

2003-11-03  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/macros/signal.h.m4: Document accumulators.
	Move slot_iterator_buf into namespace internal. Since
	accumulators have the iterator type as a template argument
	there is no need to expose this very internal type.
	* sigc++/functors/macros/*.m4: Regroup documentation.
	Documentation of the core parts of the library should be
	complete by now.

2003-11-02  Martin Schulze  <teebaum@cvs.gnome.org>

	Improve documentation of the core parts of the library. Test ptr_fun()

2003-11-02  Martin Schulze  <teebaum@cvs.gnome.org>

	* Improve documentation of the core parts of the library.
	* tests/test_ptr_fun.cc: Test ptr_fun() with static
	member functions.

2003-11-02  Martin Schulze  <teebaum@cvs.gnome.org>

	Move all .m4 files into new subdirectories sigc++/[...]/macros. Install

2003-11-02  Martin Schulze  <teebaum@cvs.gnome.org>

	* Move all .m4 files into new subdirectories
	sigc++/[...]/macros. Install the .m4 files on
	"make install" (Reported by Ron Steinke).

2003-11-02  Martin Schulze  <teebaum@cvs.gnome.org>

	Move all .m4 files into new subdirectories sigc++/[...]/macros. Install

2003-11-02  Martin Schulze  <teebaum@cvs.gnome.org>

	* Move all .m4 files into new subdirectories
	sigc++/[...]/macros. Install the .m4 files on
	"make install" (Reported by Ron Steinke).

2003-11-02  Martin Schulze  <teebaum@cvs.gnome.org>

	Include sigc++/functors/mem_fun.h (Reported by Ron Steinke).

2003-11-01  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/[class,method,object]_slot.h.m4: Include
	sigc++/functors/mem_fun.h (Reported by Ron Steinke).

2003-11-01  Martin Schulze  <teebaum@cvs.gnome.org>

	Add negation operator I have completely overlooked until now. Test

2003-11-01  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/adaptors/lambda/operator.h.m4: Add negation
	operator I have completely overlooked until now.
	* sigc++/tests/test_lambda.cc: Test negation operator.

2003-11-01  Martin Schulze  <teebaum@cvs.gnome.org>

	- Use a shorter notation for ..._mem_function variants. - Change order of

2003-11-01  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/[class_slot,method_slot,object_slot,hide].h.m4,
	sigc++/signal.h.m4, sigc++/functors/mem_fun.h.m4:
	- Use a shorter notation for ..._mem_function variants.
	- Change order of mem_funcotr<>'s template arguments to
	match std::mem_fun_t and to be more consistent with adaptors.
	- Use ::sigc::slot's implicit ctor in compatibility module.
	* sigc++/adaptors/lambda/operator.h.m4: Change some
	lambda action names to match action names in std.

	API addition:
	* sigc++/adaptors/retype.h.m4: New file adding
	adaptor retype.
	* sigc++/Makefile.am: Build and distribute new file.
	* tests/test_retype.cc: New file testing adaptor retype.
	* MSVC_Net2003/tests/test_retype/test_reytype.vcproj,
	tests/Makefile.am: Build and distribute new test case.

2003-11-01  Martin Schulze  <teebaum@cvs.gnome.org>

	- Use a shorter notation for ..._mem_function variants. - Change order of

2003-11-01  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/[class_slot,method_slot,object_slot,hide].h.m4,
	sigc++/signal.h.m4, sigc++/functors/mem_fun.h.m4:
	- Use a shorter notation for ..._mem_function variants.
	- Change order of mem_funcotr<>'s template arguments to
	match std::mem_fun_t and to be more consistent with adaptors.
	- Use ::sigc::slot's implicit ctor in compatibility module.
	* sigc++/adaptors/lambda/operator.h.m4: Change some
	lambda action names to match action names in std.

	API addition:
	* sigc++/adaptors/retype_return.h.m4: New file adding
	adaptor retype.
	* sigc++/Makefile.am: Build and distribute new file.
	* tests/test_retype.cc: New file testing adaptor retype.
	* MSVC_Net2003/tests/test_retype/test_reytype.vcproj,
	tests/Makefile.am: Build and distribute new test case.

2003-11-01  Martin Schulze  <teebaum@cvs.gnome.org>

	New directory containing project files for Visual Studio .Net 2003.

2003-11-01  Martin Schulze  <teebaum@cvs.gnome.org>

	* MSVC_Net2003: New directory containing project
	files for Visual Studio .Net 2003.
	Credits to Roel Vanhout <roel@riks.nl>!

2003-11-01  Martin Schulze  <teebaum@cvs.gnome.org>

	Use LIBSIGC_TEMPLATE_PREFIX in explicit function template instantiations.

2003-11-01  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/retype.h.m4: Use LIBSIGC_TEMPLATE_PREFIX
	in explicit function template instantiations.
	* sigc++/type_traits.h: Add template specialization
	for arrays (T_type[N]) to disable non-working member
	type_trait<T_type[N]>::instance().
	* sigc++/visit_each.h: Remove more disturbing
	limit_derived_target<>::operator() overloads.
	(Should have noticed earlier that they are unnecessary.)
	* sigc++/adaptors/deduce_result_type.h.m4,
	sigc++/adaptors/lambda/operator.h.m4,
	sigc++/functors/functor_trait.h.m4,
	tests/test_[bind,compose,exception_catch,hide,lambda].cc:
	Completely removed support for typeof(). We don't need
	it any more and it is completely non-standard!

2003-10-31  Cedric Gustin  <cedric.gustin@swing.be>

	Added test of win32 platform. Commented out AM_DISABLE_SHARED (DLLs are

	2003-10-30  Cedric Gustin <cedric.gustin@swing.be>

	* configure.ac: Added test of win32 platform. Commented
	out AM_DISABLE_SHARED (DLLs are shared libraries).
	* sigc++/Makefile.am: added a few LDFLAGS for win32
	DLLs.

2003-10-30  Martin Schulze  <teebaum@cvs.gnome.org>

	Add SigC::Signal#<>::slot(). Comment out make_slot() work-around. Remove

2003-10-30  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/signal.h.m4: Add SigC::Signal#<>::slot().
	* sigc++/slot.h.m4: Comment out make_slot() work-around.
	* sigc++/adaptors/bind.h.m4: Remove unnecessary brackets
	in template argument lists. They are confusing MSVC.
	* sigc++/adaptors/*.h.m4, sigc++/adaptors/lambda/*.h.m4:
	Use LIBSIGC_TEMPLATE_PREFIX in explicit function
	template instantiations.
	* sigc++/tests/test_*.cc:
	- Include <string> where std::string is used.
	- Use double instead of float.

2003-10-27  Martin Schulze  <teebaum@cvs.gnome.org>

	Cleanup. Bring it up to date.

2003-10-27  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/retype.h.m4: Cleanup.
	* TODO: Bring it up to date.

2003-10-26  Martin Schulze  <teebaum@cvs.gnome.org>

	Bump version number to 1.9.11. Add ChangeLog summary for version 1.9.11.

2003-10-26  Martin Schulze  <teebaum@cvs.gnome.org>

	* configure.ac: Bump version number to 1.9.11.
	* NEWS: Add ChangeLog summary for version 1.9.11.

2003-10-26  Martin Schulze  <teebaum@cvs.gnome.org>

	Compatiblity module: Move definition of compatiblity classes SigC::SignalN

2003-10-26  Martin Schulze  <teebaum@cvs.gnome.org>

	Compatiblity module:
	* sigc++/signal.h.m4: Move definition of compatiblity
	classes SigC::SignalN to here.
	* sigc++/connection.h:
	- Add connection::connected().
	- Add compatibility typedef SigC::Connection.
	* sigc++/bind.h, sigc++/bind_return.h,
	sigc++/class_slot.h.m4,	sigc++/hide.h.m4,
	sigc++/method_slot.h.m4, sigc++/object.h,
	sigc++/object_slot.h.m4, sigc++/retype.h.m4,
	sigc++/retype_return.h sigc++/slot.h.m4,
	sigc++/compatibility.h:
	New files to complete compatibility module.
	Split content of compatibility.h.m4 among the new files.
	* sigc++/compatibility.h.m4: Removed.
	* Makefile.am: Build and distribute new files.
	* tests/test_compatibility.cc: Test new stuff.

	Fixes:
	* sigc++/functors/slot.h.m4: Fix copy constructor and
	operator=() of slot template.
	* sigc++/adaptors/bind.h.m4: Fix deduce_result_type
	template specializations. bind<0>() probably compiles
	with gcc-3.3, now.

2003-10-25  Martin Schulze  <teebaum@cvs.gnome.org>

	Fixes:

2003-10-26  Martin Schulze  <teebaum@cvs.gnome.org>

	Fixes:
	* sigc++/functors/slot.{cc,h.m4}:
	- Fix notification process: don't defer detaching of a
	slot from all referred trackables during signal emission!
	- Size optimization: replace virtual functions from
	struct typed_slot_rep with function pointers in slot_rep
	(reduces size of a typical typed_slot_rep instantiation
	by 30% !!!).
	* tests/test_slot.cc: Test sigc::slot more thoroughly.
	* sigc++/functors/mem_fun.h.m4: Fix visit_each().
	* sigc++/adaptos/bind_return.h.m4: Add support for
	sigc::ref().
	* tests/test_bind_return.cc: Use sigc::ref().
	* sigc++/signal.h.m4: Avoid compiler warning about
	uninitialized variable r_ in emit().
	* sigc++/visit_each.h: Cleanup.

	API additions:
	* sigc++/adpators/lambda/operators.h.m4: Add
	lambda actions sigc::{reinterpret,static,dynamic}_cast_
	to support explicit parameter conversion.
	* tests/test_lambda.cc: Test sigc::static_cast_.
	* sigc++/adaptors/retype_return.h.m4: New file adding
	adaptor retype_return (and hide_return).
	* sigc++/Makefile.am: Build and distribute new file.
	* tests/test_retype_return.cc: New file testing
	adaptor retype_return (and hide_return).
	* tests/Makefile.am: Build and distribute new test case.

2003-10-24  Martin Schulze  <teebaum@src.gnome.org>

	update .cvsignore files

2003-10-24  Martin Schulze  <teebaum@cvs.gnome.org>

	Remove disturbing limit_derived_target<>::operator() overloads. Add

2003-10-25  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/visit_each.h: Remove disturbing
	limit_derived_target<>::operator() overloads.
	* sigc++/adaptors/bind.h.m4: Add support for sigc::ref().
	* tests/test_bind.cc: Test sigc::ref().
	* sigc++/adaptors/lambda/{operator,group,base}.h.m4:
	- Move support for sigc::ref() from lambda_core<> into
	lambda operator and lambda group creator functions.
	- Add missing visit_each() overload for lambda<> template.
	* tests/test_lambda.cc: Test auto-disconnection.
	TODO: Fix a strange bug that leads to "Bus error"
	during auto-disconnection.

2003-10-23  Martin Schulze  <teebaum@cvs.gnome.org>

	Bump version number to 1.9.10. Add ChangeLog summary for version 1.9.10.

2003-10-23  Martin Schulze  <teebaum@cvs.gnome.org>

	* configure.ac: Bump version number to 1.9.10.
	* NEWS: Add ChangeLog summary for version 1.9.10.

2003-10-23  Martin Schulze  <teebaum@cvs.gnome.org>

	Move definition of struct nil into functor_trait.h.

2003-10-23  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/functors/{functor_trait,slot}.h.m4:
	Move definition of struct nil into functor_trait.h.

2003-10-23  Martin Schulze  <teebaum@cvs.gnome.org>

	Move definition of struct nil into functor_trait.h.

2003-10-23  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/functors/{functor_trait,slot}.h.m4:
	Move definition of struct nil into functor_trait.h.

2003-10-23  Martin Schulze  <teebaum@cvs.gnome.org>

	Disable typeof() compiler checks. Remove unnecessary deduce_result_type<>

2003-10-23  Martin Schulze  <teebaum@cvs.gnome.org>

	* configure.ac: Disable typeof() compiler checks.
	* sigc++/adaptors/bind.h.m4: Remove unnecessary
	deduce_result_type<> template specializations.

2003-10-20  Martin Schulze  <teebaum@cvs.gnome.org>

	Correct order of typedefs for good. (Patch from Jeff Franks.)

2003-10-20  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/adaptors/compose.h.m4:
	Correct order of typedefs for good. (Patch from Jeff Franks.)

2003-10-20  Martin Schulze  <teebaum@cvs.gnome.org>

	Add constructor that takes a sigc::slot_base& to support 3rd-party slot

2003-10-20  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/connection.h: Add constructor that takes
	a sigc::slot_base& to support 3rd-party slot lists
	like they are used in glibmm/gtkmm.
	* sigc++/functors/slot.h.m4: Make sigc::slot::call_type public.
	(Fixes compile problems reported by Jeff Franks.)
	* sig++/type_traits.h: Don't use long long in
	sigc::is_base_and_derived.
	(Fixes compile problems reported by Jeff Franks.)
	* sigc++/adaptors/{bind,compose,hide,exception_catch}.h.m4:
	Correct order of typedefs. (Repoted by Jeff Franks.)
	* configure.ac: Bump version number to 1.9.9.
	* NEWS: Add ChangeLog summary for version 1.9.9.

2003-10-19  Martin Schulze  <teebaum@cvs.gnome.org>

	Define doxygen group functors. Bump version number to 1.9.8. Add ChangeLog

2003-10-19  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/functors/slot.h.m4: Define doxygen group functors.
	* configure.ac: Bump version number to 1.9.8.
	* NEWS: Add ChangeLog summary for version 1.9.8.

2003-10-19  Martin Schulze  <teebaum@cvs.gnome.org>

	Add announces of versions 1.9.6 and 1.9.7. New file. Defines namespace

2003-10-19  Martin Schulze  <teebaum@cvs.gnome.org>

	* NEWS: Add announces of versions 1.9.6 and 1.9.7.
	* sigc++/compatibility.h.m4: New file. Defines namespace SigC.
	namespace SigC should be API compatible to libsigc++-1.2.
	* sigc++/Makefile.am: Build compatibility.h.
	* tests/test_compatibility.cc, tests/Makefile.am:
	Add test case for compatibility module.
	* docs/index.html: Change group names.
	* sigc++/sigc++.h: Include connection.h.
	* sigc++/connection.{cc,h}:
	- Rename dependency to destroy_notify_callback.
	- Change parameter name in set_slot() from d to data.
	- Fix operator=(): Add "return *this;"
	- Get rid of namespace functor.
	- Corrections in documentation.
	* sigc++/signal.{cc,h.m4}:
	- Add reference counter to signal_impl. Replaces "bool destroy_".
	- Move signal_base, slot_iterator[_buf], slot_list out of
	namespace internal. They are part of the public API.
	- Add convenience function signal#::make_slot().
	- Get rid of namespace functor.
	- Corrections in documentation.
	* sigc++/trackable.{cc,h}:
	- Rename dependency to destroy_notify_callback.
	- Rename trackable::clear() to trackable::notify_callbacks().
	- Corrections in documentation.
	* sigc++/type_traits.h: Add documentation.
	* sigc++/visit_each.h:
	- Get rid of namespace functor.
	- Add documentation.
	* sigc++/adaptors[/lambda]/*: Get rid of namespace functor.
	* sigc++/functors/{functor_trait.h,ptr_fun.h.m4,mem_fun.h.m4}:
	- Get rid of namespace functor.
	- Corrections in documentation / add documentation.
	* sigc++/functors/slot.{cc,h.m4}:
	- Move slot_base out of namespace internal. It's public API.
	- Get rid of one-letter-parameter-names.
	- Get rid of namespace functor.
	- Corrections in documentation.
	* tests/*.cc: Get rid of "using namespace ...".

2003-09-10  Martin Schulze  <teebaum@cvs.gnome.org>

	Add subscript ([]) and assign (=) operator. I think there are now enough

2003-09-10  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/adaptors/lambda/{base,operators}.h.m4:
	Add subscript ([]) and assign (=) operator. I think there are now
	enough operators available to make any future power user happy.
	The only one missing is the comma operator and if we added it
	the logical consequence would be to also add if(), switch(), do(),
	etc. lambda expressions which are really out of place in libsigc++.
	* sigc++/type_traits.h: Fix is_base_and_derived<> for const types.
	* tests/test_lambda.cc: Test new operators.

2003-09-04  Martin Schulze  <teebaum@cvs.gnome.org>

	Bump version number to 1.9.7.

2003-09-05  Martin Schulze  <teebaum@cvs.gnome.org>

	* configure.ac: Bump version number to 1.9.7.

2003-09-03  Martin Schulze  <teebaum@cvs.gnome.org>

	- Restructure so that the size of the generated source file stays

2003-09-03  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/adaptors/lambda/operator.h.m4:
	- Restructure so that the size of the generated source file stays
	reasonable for 34 operators: There are only two lambda templates
	lambda_operator and lambda_operator_unary. The action is an additional
	template parameter. A small template lambda_action[_unary] is specialized
	for all actions.
	- Add most operators that boost::lambda supports. Missing operators are
	"=", "[]", "," and support for pointer arithmetic. I don't know if it's
	worth adding these. In libsigc++, the purpose of lambda operators is to
	provide some extra functionality for the group adaptor.
	* tests/test_lambda.cc:
	Test pre-increment, address and dereference operator.

2003-09-03  Martin Schulze  <teebaum@cvs.gnome.org>

	New file reference_wrapper.h provides ref() to specify that

2003-08-31  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/reference_wrapper.h, sigc++/type_traits.h, sigc++/Makefile.am:
	New file reference_wrapper.h provides ref() to specify that adaptors/lambdas
	should take a reference to the object passed into ref() instead of a copy.

2003-08-31  Martin Schulze  <teebaum@cvs.gnome.org>

	New file reference_wrapper.h provides ref() to specify that

2003-08-31  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/reference_wrapper.h, sigc++/type_traits.h, sigc++/Makefile.am:
	New file reference_wrapper.h provides ref() to specify that adaptors/lambdas
	should take a reference to the object passed into ref() instead of a copy.
	* tests/test_lambda.cc:
	- Test group() with mem_fun().
	- Use ref() where lambdas should store references to objects.
	- Test var() and constant().
	* sigc++/adaptors/lambda/base.h.m4:
	- Support ref() in return type deduction.
	- Add var() and constant() which create lambdas for usage with lambda operators.
	* sigc++/adaptors/lambda/operator.h.m4:
	- Fix return type deduction.
	- Remove operator{+,-,*,...} overloads added on 2003-08-29. ref() is way cleaner.
	* sigc++/adaptors/lambda/group.h.m4,
	sigc++/adaptors/bind.h.m4, sigc++/adaptors/compose.h.m4,
	sigc++/adaptors/exception_catch.h.m4, sigc++/adaptors/hide.h.m4:
	Fix return type deduction.

2003-08-29  Martin Schulze  <teebaum@cvs.gnome.org>

	Add more tests. Make _1, _2, ... constant. Add operator{+,-,*,...}

2003-08-29  Martin Schulze  <teebaum@cvs.gnome.org>

	* tests/test_lambda.cc: Add more tests.
	* sigc++/adaptors/lambda/select.h.m4, sigc++/adaptors/lambda/lambda.cc.m4:
	Make _1, _2, ... constant.
	* sigc++/adaptors/lambda/operator.h.m4:
	Add operator{+,-,*,...} overloads to distinguish between const and non-const objects.
	Store references to non-const objects rather than copies.
	This allows expressions like e.g. std::cout << _1.
	* sigc++/adaptors/lambda/base.h.m4, sigc++/adaptors/lambda/group.h.m4:
	Remove void specializations. Functors returning void are tested and work fine.

2003-08-27  Martin Schulze  <teebaum@cvs.gnome.org>

	Rename, correct and improve this test case. Build and run

2003-08-27  Martin Schulze  <teebaum@cvs.gnome.org>

	* tests/test_callof.cc, tests/test_deduce_result_type.cc:
	Rename, correct and improve this test case.
	* tests/Makefile.am: Build and run test_deduce_result_type
	instead of test_callof.

2003-08-27  Martin Schulze  <teebaum@cvs.gnome.org>

	Update TODO.

2003-08-27  Martin Schulze  <teebaum@cvs.gnome.org>

	* Update TODO.

2003-08-27  Martin Schulze  <teebaum@cvs.gnome.org>

	Remove usage of callof_ignore_arg<>. Remove the first and move

2003-08-27  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/adaptors/hide.h.m4: Remove usage of callof_ignore_arg<>.
	* sigc++/callof.h.m4, sigc++/adaptors/deduce_result_type.h.m4,
	sigc++/functors/functor_trait.h.m4:
	Remove the first and move deduce_result_type templates from
	functor_trait.h.m4 into new file deduce_result_type.h.m4.
	* sigc++/Makefile.am, sigc++/sigc++.h, sigc++/adaptors/adaptor_trait.h.m4:
	Build and include sigc++/adaptors/deduce_result_type.h instead of callof.h.
	* sigc++/functors/slot.h.m4: Document struct nil.

2003-08-24  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/functors/functor_trait.h.m4: Simplify usage of convenience
	macro SIGC_FUNCTORS_HAVE_RESULT_TYPE:
	namespace sigc{ namespace functor{ SIGC_FUNCTORS_HAVE_RESULT_TYPE }}

2003-08-24  Martin Schulze  <teebaum@cvs.gnome.org>

	Merge adaptor return type deduction and typeof() into

2003-08-24  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/functors/functor_trait.h,m4, sigc++/adaptors[/lambda]/*.h.m4:
	Merge adaptor return type deduction and typeof() into
	sigc::functor::deduce_result_type. Use it for all adaptors.
	* tests/test_compose.cc: Only test multi-type get-functor if
	typeof() if supported.

2003-08-23  Martin Schulze  <teebaum@cvs.gnome.org>

	- Remove unnecessary void specializations. In fact, only the one for

2003-08-24  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/adaptors[/lambda]/*.h.m4:
	- Remove unnecessary void specializations. In fact, only the one
	for sigc::functor::exception_catch<> is needed and I don't really
	understand why. For the lambda stuff the void specializatoins are
	just commented out at the moment.
	- Make typeof() optional. Surprisingly, I got the lambda stuff working
	without typeof()! The test suite doesn't catch all cases yet, so maybe
	some thing are still not working.
	TODO: Implement configure check.
	* tests/test_bind.cc, tests/test_compose.cc tests/test_exception_catch.cc,
	tests/test_hide.cc, tests/test_lambda.cc:
	Only test multiple functor return types if typeof() is supported.

2003-08-06  Martin Schulze  <teebaum@cvs.gnome.org>

	Add function trackable::clear().

2003-08-06  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/trackable.{cc,h}: Add function trackable::clear().

2003-06-24  Andreas Rottmann  <rotty@src.gnome.org>

	Minor tweaks.

	* TODO: Minor tweaks.

2003-06-24  Andreas Rottmann  <rotty@src.gnome.org>

	Minor tweaks.

2003-06-24  Andreas Rottmann  <rotty@src.gnome.org>

	Use these variables. Provide doxygen with SRCDIR and TOP_SRCDIR

	* docs/reference/Doxyfile.in: Use these variables.
	* docs/reference/Makefile.am (html/index.html): Provide doxygen
	with SRCDIR and TOP_SRCDIR environment variables.

	* sigc++/functors/slot.h.m4: Make slot::call_type typedef public;
	this fixes a g++ 3.3 error in signal.h.

	* sigc++/signal.h.m4: Make the signal::accumulated class public;
	this fixes a g++ 3.3 error in test_accumulated.cc.

2003-06-24  Andreas Rottmann  <rotty@src.gnome.org>

	Use these variables. Provide doxygen with SRCDIR and TOP_SRCDIR

	* docs/reference/Doxyfile.in: Use these variables.
	* docs/reference/Makefile.am (html/index.html): Provide doxygen
	with SRCDIR and TOP_SRCDIR environment variables.

2003-06-23  Andreas Rottmann  <rotty@src.gnome.org>

	Make slot::call_type typedef public; this fixes a g++ 3.3 error in signal.h.

2003-06-23  Andreas Rottmann  <rotty@src.gnome.org>

	Make the signal::accumulated class public; this fixes a g++ 3.3 error in test_accumulated.cc.

2003-06-23  Andreas Rottmann  <rotty@src.gnome.org>

	Added comment author annotation.

2003-06-23  Andreas Rottmann  <rotty@src.gnome.org>

	.cvignore additions.

2003-06-15  Martin Schulze  <teebaum@cvs.gnome.org>

	Correct typing error in docs. Document the whole thing.

2003-06-15  Martin Schulze  <teebaum@cvs.gnome.org>

	* sigc++/functor/slot.h.m4: Correct typing error in docs.
	* sigc++/functor/ptr_fun.h.m4: Document the whole thing.

2003-05-31  Murray Cumming  <murrayc@usa.net>

	Rearranged the groups to make it all a bit more like the libsigc++ 1.2

2003-05-31  Murray Cumming  <murrayc@usa.net>

	* Reference documentation: Rearranged the groups to make it all
	a bit more like the libsigc++ 1.2 reference documentation.
	Corrected some spelling and grammar too.
	This needs a lot of work. The text is very hard to read and it's
	generally not appropriate for a user of the code who doesn't
	care about the internals. But it's not impossible - our examples
	should show us what we need to say in the documentation.
	We probably need some more groups for the extra stuff, like we do
	in libsigc++ 1.2.

2003-05-30  Martin Schulze  <martin-ml@hippogriff.de>

	Fix documentation. Document the whole thing.

2003-05-29  Martin Schulze  <martin-ml@hippogriff.de>

	* sigc++/signal.h.m4: Fix documentation.
	* sigc++/connection.h, sigc++/functor/slot.h.m4:
	Document the whole thing.

2003-05-29  Martin Schulze  <martin-ml@hippogriff.de>

	- Remove bogus operator() from unnumbered signal<> and

2003-05-29  Martin Schulze  <martin-ml@hippogriff.de>

	* sigc++/signal.h.m4:
	- Remove bogus operator() from unnumbered signal<> and
	signal<>::accumulated templates.
	- Document the whole thing.

	* docs/index.html: Fix some links.

2003-04-06  Martin Schulze  <MHL.Schulze@t-online.de>

	Add Doxygen framework.

2003-04-06  Martin Schulze  <MHL.Schulze@t-online.de>

	* TODO, configure.ac, Makefile.am, docs/*:
	Add Doxygen framework.

2003-04-05  Martin Schulze  <MHL.Schulze@t-online.de>

	Move sigc::callof<> to sigc::functor::internal::callof<>.

2003-04-06  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/callof.h.m4, sigc++/adaptors/*, tests/test_callof.cc:
	Move sigc::callof<> to sigc::functor::internal::callof<>.

	* sigc++/functors/mem_fun.h.m4, tests/test_mem_fun.cc:
	Add new types [bound_][const_]volatile_mem_functor, visit_each()
	and mem_fun() overloads for volatile qualifier.
	Add ctor overloads in bound_*mem_functor and mem_fun() overloads
	that take reference instead of pointer.

2003-03-26  Martin Schulze  <MHL.Schulze@t-online.de>

	Change "closure" to "slot" throughout sigc++2 (file names, class names,

2003-03-26  Martin Schulze  <MHL.Schulze@t-online.de>

	* Change "closure" to "slot" throughout sigc++2 (file names,
	class names, member variables, documentation, etc.).

2003-03-25  Martin Schulze  <MHL.Schulze@t-online.de>

	Rewrite to reflect recent changes as well as recent discussions.

2003-03-26  Martin Schulze  <MHL.Schulze@t-online.de>

	* TODO: Rewrite to reflect recent changes as well as recent discussions.

2003-03-24  Martin Schulze  <MHL.Schulze@t-online.de>

	Make the adaptor's data member public so that visit_each() can access it.

2003-03-24  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/adaptors/bind_return.h.m4: Make the adaptor's data member
	public so that visit_each() can access it.

	* sigc++/adaptors/lambda/*.h.m4: More fixes. Add a note about
	malfunctioning typeof() (probably compiler bug in gcc-3.2).

	* tests/*.cc: Test references. Fix compose equivalent in test_lambda.

2003-03-24  Martin Schulze  <MHL.Schulze@t-online.de>

	Move detection of function and member method pointers' return types from

2003-03-24  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/Makefile.am, sigc++/functors/functor_trait.h[.m4],
	sigc++/adaptors/adaptor_trait.h.m4: Move detection of function
	and member method pointers' return types from adaptor_trait into
	functor_trait. (We'll use functor_trait rather than adaptor_trait for
	our lambda stuff.) functor_trait.h needs to be generated from .m4 now.

	* sigc++/functors/functor_trait.h.m4: Add convenience macros:
	- SIGC_FUNCTORS_HAVE_RESULT_TYPE indicates that the existance of
	T_functor::result_type should be assumed for all unknown functors.
	- SIGC_FUNCTOR_TRAIT(T_functor, T_result) explicitly specifies the
	result type of a functor.
	("typename functor_trait<T_functor>::result_type") is used to
	determine the return type of our adaptors' operator()() overloads.

	* sigc++/adaptors/[lambda/]*.h.m4: Various fixes in visit_each() and
	operator()() overloads to make these operator()() overloads usable.
	Most of them were just commented out before. Some adaptor types also
	have void specializations, now.

	* sigc++/adaptors/lambda/group.h.m4: Change syntax from
	"[some_functor] % grp([args])" to "group([some_functor], [args])"
	like we agreed on the ml some time ago.

	* sigc++/tests/test_[all adaptors].cc: Test stuff that didn't work
	before.

2003-03-22  Murray Cumming  <murrayc@usa.net>

	Added pgk-config file, from a mystery person in bug #108857

2003-03-22  Murray Cumming  <murrayc@usa.net>

	* Added pgk-config file, from a mystery person in bug #108857

2003-03-22  Martin Schulze  <MHL.Schulze@t-online.de>

	Test and show how to use functor_trait for user defined or 3rd-party

2003-03-22  Martin Schulze  <MHL.Schulze@t-online.de>

	* tests/test_bind.cc: Test and show how to use functor_trait
	for user defined or 3rd-party functors so that a
	bind<0>([functor],[arg1])() call with no arguments can return a value.

2003-03-20  Martin Schulze  <MHL.Schulze@t-online.de>

	Add explanations. Comment in / create templates callof_safe[#].

2003-03-20  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/callof.h.m4: Add explanations. Comment in / create templates
	callof_safe[#]. Unfortunately they don't work for functors with overloaded
	operator() so we don't use it for now. At least everything is documented.

	* sigc++/functors/functor_trait.h, sigc++/functors/*.h.m4: Add back
	functor_base compiler hint. We're using it now in adaptor_functor<>.

	* sigc++/adaptors/{adaptor_trait,bind}.h.m4: Make operator() overloads
	with no arguments return the result of the functor invocation.
	Fix multiple bind<0>().
	* tests/test_bind.cc: Test the stuff that's working now.

2003-03-16  Murray Cumming  <murrayc@usa.net>

	Added sigc++/sigc++.h, like in libsigc++ 1.2 Added member_method example,

2003-03-16  Murray Cumming  <murrayc@usa.net>

	* Added sigc++/sigc++.h, like in libsigc++ 1.2
	* examples: Added member_method example, which uses a class method
	and which demonstrates disconnection.

2003-03-13  Martin Schulze  <teebaum@src.gnome.org>

	Bump version to 1.9.6.

2003-03-11  Andreas Rottmann  <rotty@src.gnome.org>

	Use substitution references instead of $(patsubst). Is shorter and fixes the strange-dirs-in-dist-tarball bug.

2003-03-09  Martin Schulze  <MHL.Schulze@t-online.de>

	Add block() capability.

2003-03-09  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/connection.h: Add block() capability.

2003-03-09  Martin Schulze  <MHL.Schulze@t-online.de>

	Add flag signal_impl::destroy_ and function signal_impl::destroy(). Use

2003-03-09  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/signal.{cc,h.m4}: Add flag signal_impl::destroy_
	and function signal_impl::destroy(). Use them to defer
	the destruction of the signal_impl object during signal
	emission.

	* tests/test_disconnect.cc: Add tests for the connection
	class and for deleting signals during emission.

2003-03-09  Martin Schulze  <MHL.Schulze@t-online.de>

	- New files that add a connection class. Objects of this class are

2003-03-09  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/connection.{cc,h}, sigc++/Makefile.am:
	- New files that add a connection class. Objects of this
	class are constructed from closure list iterators and can
	be used to disconnect the refered closure. As opposed to
	iterators they stay valid beyond the lifetime of the closure.

2003-03-09  Martin Schulze  <MHL.Schulze@t-online.de>

	- Rename closure_{base,rep}::[set_]dependency_ -> [set_]parent_. - Make

2003-03-09  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/functors/closure.{cc,h.m4}, sigc++/signal.cc:
	- Rename closure_{base,rep}::[set_]dependency_ -> [set_]parent_.
	- Make closure_rep inherit trackable. This allows for
	connection objects that stay valid beyond the life time
	of the refered closure.
	- Make some one-line-functions inline again.

2003-03-08  Martin Schulze  <MHL.Schulze@t-online.de>

	BUGFIX in trackable_dep_list::clear()

2003-03-08  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/trackable.cc: BUGFIX in trackable_dep_list::clear()

2003-03-08  Andreas Rottmann  <rotty@src.gnome.org>

	Ignore `make dist' tarballs.

2003-03-08  Andreas Rottmann  <rotty@src.gnome.org>

	The "The New Build System" changes.

2003-03-08  Andreas Rottmann  <rotty@src.gnome.org>

	Re-included lambda test.

2003-03-08  Andreas Rottmann  <rotty@src.gnome.org>

	Removed. Removed. Removed. Remove the above Makefiles.

	* sigc++/functors/Makfile.am: Removed.
	* sigc++/adaptors/Makefile.am: Removed.
	* sigc++/adaptors/lambda/Makefile.am: Removed.
	* configure.ac (AC_OUTPUT): Remove the above Makefiles.

2003-03-08  Andreas Rottmann  <rotty@src.gnome.org>

	Rewritten so we can build lambda cleanly. Removed.

	* sigc++/Makefile.am: Rewritten so we can build lambda cleanly.
	* sigc++/Makefile.am_fragment: Removed.

2003-03-08  Andreas Rottmann  <rotty@src.gnome.org>

	Typo fix.

2003-03-07  Martin Schulze  <MHL.Schulze@t-online.de>

	- signal_emit#<>: New templates replacing signal#<>::caller. The purpose

2003-03-07  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/signal.{cc,h.m4}:
	- signal_emit#<>: New templates replacing signal#<>::caller.
	The purpose of these templates is implementing the emit
	function and optimizing signal emission for the case that
	no accumulator is used via template specializations.
	- default_accumulator<>: Removed. The default for T_accumulator
	in signal#<> now is nil. An example how to use accumulators
	is available in tests/test_accumulator.cc.
	- signal_{base,impl}: Move the implementation of signal_base's
	interface to signal_impl. An object of this class is
	dynamically allocated when first connecting a closure to
	the signal. This drastically reduces the size of empty signals
	and allows for future addition of a reference counter to make
	it safe to delete a signal during emission.
	- Directly work on closure_rep during signal emission. This
	seems to be quicker than using the closure templates.
	- Document the classes. Restructure the header file a bit.

	* sigc++/functors/closure.h.m4: Make closure_base::rep_ data
	member public, so that signal emission can directly work on it.

	* tests/test_size.cc: Add an entry for signal_impl.

2003-03-07  Martin Schulze  <MHL.Schulze@t-online.de>

	- closure_base: BUGFIXES in ~closure_base() and operator=(). - Mark some

2003-03-07  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/closure.{cc,h.m4}:
	- closure_base: BUGFIXES in ~closure_base() and operator=().
	- Mark some functions with the inline keyword. This seems to
	help gcc 3.2 to optimize signal emission and (dis)connection.
	- Document the classes. Restructure the header file a bit.

2003-03-07  Martin Schulze  <MHL.Schulze@t-online.de>

	Make trackable allocate a trackable_dep_list object dynamically when

2003-03-07  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/trackable.{cc,h}: Make trackable allocate a
	trackable_dep_list object dynamically when adding the first
	dependency. (This reduces the size of objects, that are not
	refered by a closure by 4 bytes (50%) and increases the size
	of objects that are refered by a closure by 4 bytes (50%)
	on a 32 bit architecture => This reduces total memory use
	when >50% of the trackables are not refered by a closure.)
	Document the classes.

2003-03-06  Andreas Rottmann  <rotty@src.gnome.org>

	Added new test executables.

2003-03-05  Martin Schulze  <MHL.Schulze@t-online.de>

	Add two test cases. test_size is showing the size of public and internal

2003-03-05  Martin Schulze  <MHL.Schulze@t-online.de>

	* tests/Makefile.am, tests/test_size.cc, tests/test_accumulated.cc:
	Add two test cases. test_size is showing the size of  public and
	internal structures. (Which apart from empty signals are smaller
	than the sizes of the equivalent libsigc++-1.2 structures.)
	test_accumulated is a test for the template signal<>::accumulated<>
	at the same time showing the use of accumulators in libsigc++2.

2003-03-05  Martin Schulze  <MHL.Schulze@t-online.de>

	BUGFIX in template specialization

2003-03-05  Martin Schulze  <MHL.Schulze@t-online.de>

	* sigc++/visit_each.h: BUGFIX in template specialization
	limit_derive_target<T_Target*,T_action>::with_type<false,T_type>:
	Add non-const overloads for static void execute_() avoiding
	compile time errors.

2003-02-25  Andreas Rottmann  <rotty@src.gnome.org>

	Martin Schulze's disonnect changes.

2003-02-25  Andreas Rottmann  <rotty@src.gnome.org>

	Ignore some more auto*-stuff.

2003-02-25  Andreas Rottmann  <rotty@src.gnome.org>

	Ignore new diconnect test executable.

2003-02-25  Andreas Rottmann  <rotty@src.gnome.org>

	Add testcase with a mixed connection & disconnection sequence.

2003-02-25  Andreas Rottmann  <rotty@src.gnome.org>

	Bugfix in signal_base::insert(): Set notification function in the newly created copy of slot_ rather than in slot_ itself.

2003-02-25  Andreas Rottmann  <rotty@src.gnome.org>

	Comment in typedefs for iterator types in the signal#<> class template. Make signal#<>::connect() return an iterator for convenience.

2003-01-23  Murray Cumming  <murrayc@usa.net>

	sigc++/adaptors/lambda is disable temporarily (not built and not

2003-01-23  Murray Cumming  <murrayc@usa.net>

	* sigc++/adaptors/lambda is disable temporarily (not built and
	not distributed) because it gets built before its parent
	directory, but #includes generated sources in the parent directory.

2003-01-22  Murray Cumming  <murrayc@usa.net>

	Added Andreas Rottman's example.

2003-01-22  Murray Cumming  <murrayc@usa.net>

	* Added Andreas Rottman's example.

2003-01-22  Murray Cumming  <murrayc@usa.net>

	Applied Andreas Rottman's make dist fixes.

2003-01-22  Murray Cumming  <murrayc@usa.net>

	* Applied Andreas Rottman's make dist fixes.

2003-01-22  Murray Cumming  <murrayc@src.gnome.org>

	Added examples directory

2003-01-15  Murray Cumming  <murrayc@src.gnome.org>

	Added missing files.

2003-01-14  Murray Cumming  <murrayc@usa.net>

	Added whitespace to make the code more readable.

2003-01-14  Murray Cumming  <murrayc@usa.net>

	* Added whitespace to make the code more readable.

2003-01-14  Murray Cumming  <murrayc@src.gnome.org>

	Changed copyrights.

2003-01-13  Murray Cumming  <murrayc@src.gnome.org>

	No more use of the scripts directory.

2003-01-13  Murray Cumming  <murrayc@src.gnome.org>

	initial import

